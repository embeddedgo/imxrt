// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build imxrt1060

package wdog

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	WCR  RWCR
	WSR  RWSR
	WRSR RWRSR
	WICR RWICR
	WMCR RWMCR
}

func WDOG1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.WDOG1_BASE))) }
func WDOG2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.WDOG2_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type WCR uint16

type RWCR struct{ mmio.U16 }

func (r *RWCR) LoadBits(mask WCR) WCR { return WCR(r.U16.LoadBits(uint16(mask))) }
func (r *RWCR) StoreBits(mask, b WCR) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RWCR) SetBits(mask WCR)      { r.U16.SetBits(uint16(mask)) }
func (r *RWCR) ClearBits(mask WCR)    { r.U16.ClearBits(uint16(mask)) }
func (r *RWCR) Load() WCR             { return WCR(r.U16.Load()) }
func (r *RWCR) Store(b WCR)           { r.U16.Store(uint16(b)) }

type RMWCR struct{ mmio.UM16 }

func (rm RMWCR) Load() WCR   { return WCR(rm.UM16.Load()) }
func (rm RMWCR) Store(b WCR) { rm.UM16.Store(uint16(b)) }

func WDZST_(p *Periph) RMWCR {
	return RMWCR{mmio.UM16{&p.WCR.U16, uint16(WDZST)}}
}

func WDBG_(p *Periph) RMWCR {
	return RMWCR{mmio.UM16{&p.WCR.U16, uint16(WDBG)}}
}

func WDE_(p *Periph) RMWCR {
	return RMWCR{mmio.UM16{&p.WCR.U16, uint16(WDE)}}
}

func WDT_(p *Periph) RMWCR {
	return RMWCR{mmio.UM16{&p.WCR.U16, uint16(WDT)}}
}

func SRS_(p *Periph) RMWCR {
	return RMWCR{mmio.UM16{&p.WCR.U16, uint16(SRS)}}
}

func WDA_(p *Periph) RMWCR {
	return RMWCR{mmio.UM16{&p.WCR.U16, uint16(WDA)}}
}

func SRE_(p *Periph) RMWCR {
	return RMWCR{mmio.UM16{&p.WCR.U16, uint16(SRE)}}
}

func WDW_(p *Periph) RMWCR {
	return RMWCR{mmio.UM16{&p.WCR.U16, uint16(WDW)}}
}

func WT_(p *Periph) RMWCR {
	return RMWCR{mmio.UM16{&p.WCR.U16, uint16(WT)}}
}

type WSR uint16

type RWSR struct{ mmio.U16 }

func (r *RWSR) LoadBits(mask WSR) WSR { return WSR(r.U16.LoadBits(uint16(mask))) }
func (r *RWSR) StoreBits(mask, b WSR) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RWSR) SetBits(mask WSR)      { r.U16.SetBits(uint16(mask)) }
func (r *RWSR) ClearBits(mask WSR)    { r.U16.ClearBits(uint16(mask)) }
func (r *RWSR) Load() WSR             { return WSR(r.U16.Load()) }
func (r *RWSR) Store(b WSR)           { r.U16.Store(uint16(b)) }

type RMWSR struct{ mmio.UM16 }

func (rm RMWSR) Load() WSR   { return WSR(rm.UM16.Load()) }
func (rm RMWSR) Store(b WSR) { rm.UM16.Store(uint16(b)) }

type WRSR uint16

type RWRSR struct{ mmio.U16 }

func (r *RWRSR) LoadBits(mask WRSR) WRSR { return WRSR(r.U16.LoadBits(uint16(mask))) }
func (r *RWRSR) StoreBits(mask, b WRSR)  { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RWRSR) SetBits(mask WRSR)       { r.U16.SetBits(uint16(mask)) }
func (r *RWRSR) ClearBits(mask WRSR)     { r.U16.ClearBits(uint16(mask)) }
func (r *RWRSR) Load() WRSR              { return WRSR(r.U16.Load()) }
func (r *RWRSR) Store(b WRSR)            { r.U16.Store(uint16(b)) }

type RMWRSR struct{ mmio.UM16 }

func (rm RMWRSR) Load() WRSR   { return WRSR(rm.UM16.Load()) }
func (rm RMWRSR) Store(b WRSR) { rm.UM16.Store(uint16(b)) }

func SFTW_(p *Periph) RMWRSR {
	return RMWRSR{mmio.UM16{&p.WRSR.U16, uint16(SFTW)}}
}

func TOUT_(p *Periph) RMWRSR {
	return RMWRSR{mmio.UM16{&p.WRSR.U16, uint16(TOUT)}}
}

func POR_(p *Periph) RMWRSR {
	return RMWRSR{mmio.UM16{&p.WRSR.U16, uint16(POR)}}
}

type WICR uint16

type RWICR struct{ mmio.U16 }

func (r *RWICR) LoadBits(mask WICR) WICR { return WICR(r.U16.LoadBits(uint16(mask))) }
func (r *RWICR) StoreBits(mask, b WICR)  { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RWICR) SetBits(mask WICR)       { r.U16.SetBits(uint16(mask)) }
func (r *RWICR) ClearBits(mask WICR)     { r.U16.ClearBits(uint16(mask)) }
func (r *RWICR) Load() WICR              { return WICR(r.U16.Load()) }
func (r *RWICR) Store(b WICR)            { r.U16.Store(uint16(b)) }

type RMWICR struct{ mmio.UM16 }

func (rm RMWICR) Load() WICR   { return WICR(rm.UM16.Load()) }
func (rm RMWICR) Store(b WICR) { rm.UM16.Store(uint16(b)) }

func WICT_(p *Periph) RMWICR {
	return RMWICR{mmio.UM16{&p.WICR.U16, uint16(WICT)}}
}

func WTIS_(p *Periph) RMWICR {
	return RMWICR{mmio.UM16{&p.WICR.U16, uint16(WTIS)}}
}

func WIE_(p *Periph) RMWICR {
	return RMWICR{mmio.UM16{&p.WICR.U16, uint16(WIE)}}
}

type WMCR uint16

type RWMCR struct{ mmio.U16 }

func (r *RWMCR) LoadBits(mask WMCR) WMCR { return WMCR(r.U16.LoadBits(uint16(mask))) }
func (r *RWMCR) StoreBits(mask, b WMCR)  { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RWMCR) SetBits(mask WMCR)       { r.U16.SetBits(uint16(mask)) }
func (r *RWMCR) ClearBits(mask WMCR)     { r.U16.ClearBits(uint16(mask)) }
func (r *RWMCR) Load() WMCR              { return WMCR(r.U16.Load()) }
func (r *RWMCR) Store(b WMCR)            { r.U16.Store(uint16(b)) }

type RMWMCR struct{ mmio.UM16 }

func (rm RMWMCR) Load() WMCR   { return WMCR(rm.UM16.Load()) }
func (rm RMWMCR) Store(b WMCR) { rm.UM16.Store(uint16(b)) }

func PDE_(p *Periph) RMWMCR {
	return RMWMCR{mmio.UM16{&p.WMCR.U16, uint16(PDE)}}
}
