// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build imxrt1060

package src

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	SCR   RSCR
	SBMR1 RSBMR1
	SRSR  RSRSR
	_     [4]uint32
	SBMR2 RSBMR2
	GPR1  RGPR1
	GPR2  RGPR2
	GPR3  RGPR3
	GPR4  RGPR4
	GPR5  RGPR5
	GPR6  RGPR6
	GPR7  RGPR7
	GPR8  RGPR8
	GPR9  RGPR9
	GPR10 RGPR10
}

func SRC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SRC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type SCR uint32

type RSCR struct{ mmio.U32 }

func (r *RSCR) LoadBits(mask SCR) SCR { return SCR(r.U32.LoadBits(uint32(mask))) }
func (r *RSCR) StoreBits(mask, b SCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSCR) SetBits(mask SCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RSCR) ClearBits(mask SCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSCR) Load() SCR             { return SCR(r.U32.Load()) }
func (r *RSCR) Store(b SCR)           { r.U32.Store(uint32(b)) }

type RMSCR struct{ mmio.UM32 }

func (rm RMSCR) Load() SCR   { return SCR(rm.UM32.Load()) }
func (rm RMSCR) Store(b SCR) { rm.UM32.Store(uint32(b)) }

func mask_wdog_rst_(p *Periph) RMSCR {
	return RMSCR{mmio.UM32{&p.SCR.U32, uint32(mask_wdog_rst)}}
}

func core0_rst_(p *Periph) RMSCR {
	return RMSCR{mmio.UM32{&p.SCR.U32, uint32(core0_rst)}}
}

func core0_dbg_rst_(p *Periph) RMSCR {
	return RMSCR{mmio.UM32{&p.SCR.U32, uint32(core0_dbg_rst)}}
}

func dbg_rst_msk_pg_(p *Periph) RMSCR {
	return RMSCR{mmio.UM32{&p.SCR.U32, uint32(dbg_rst_msk_pg)}}
}

func mask_wdog3_rst_(p *Periph) RMSCR {
	return RMSCR{mmio.UM32{&p.SCR.U32, uint32(mask_wdog3_rst)}}
}

type SBMR1 uint32

type RSBMR1 struct{ mmio.U32 }

func (r *RSBMR1) LoadBits(mask SBMR1) SBMR1 { return SBMR1(r.U32.LoadBits(uint32(mask))) }
func (r *RSBMR1) StoreBits(mask, b SBMR1)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSBMR1) SetBits(mask SBMR1)        { r.U32.SetBits(uint32(mask)) }
func (r *RSBMR1) ClearBits(mask SBMR1)      { r.U32.ClearBits(uint32(mask)) }
func (r *RSBMR1) Load() SBMR1               { return SBMR1(r.U32.Load()) }
func (r *RSBMR1) Store(b SBMR1)             { r.U32.Store(uint32(b)) }

type RMSBMR1 struct{ mmio.UM32 }

func (rm RMSBMR1) Load() SBMR1   { return SBMR1(rm.UM32.Load()) }
func (rm RMSBMR1) Store(b SBMR1) { rm.UM32.Store(uint32(b)) }

func BOOT_CFG1_(p *Periph) RMSBMR1 {
	return RMSBMR1{mmio.UM32{&p.SBMR1.U32, uint32(BOOT_CFG1)}}
}

func BOOT_CFG2_(p *Periph) RMSBMR1 {
	return RMSBMR1{mmio.UM32{&p.SBMR1.U32, uint32(BOOT_CFG2)}}
}

func BOOT_CFG3_(p *Periph) RMSBMR1 {
	return RMSBMR1{mmio.UM32{&p.SBMR1.U32, uint32(BOOT_CFG3)}}
}

func BOOT_CFG4_(p *Periph) RMSBMR1 {
	return RMSBMR1{mmio.UM32{&p.SBMR1.U32, uint32(BOOT_CFG4)}}
}

type SRSR uint32

type RSRSR struct{ mmio.U32 }

func (r *RSRSR) LoadBits(mask SRSR) SRSR { return SRSR(r.U32.LoadBits(uint32(mask))) }
func (r *RSRSR) StoreBits(mask, b SRSR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSRSR) SetBits(mask SRSR)       { r.U32.SetBits(uint32(mask)) }
func (r *RSRSR) ClearBits(mask SRSR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RSRSR) Load() SRSR              { return SRSR(r.U32.Load()) }
func (r *RSRSR) Store(b SRSR)            { r.U32.Store(uint32(b)) }

type RMSRSR struct{ mmio.UM32 }

func (rm RMSRSR) Load() SRSR   { return SRSR(rm.UM32.Load()) }
func (rm RMSRSR) Store(b SRSR) { rm.UM32.Store(uint32(b)) }

func ipp_reset_b_(p *Periph) RMSRSR {
	return RMSRSR{mmio.UM32{&p.SRSR.U32, uint32(ipp_reset_b)}}
}

func lockup_sysresetreq_(p *Periph) RMSRSR {
	return RMSRSR{mmio.UM32{&p.SRSR.U32, uint32(lockup_sysresetreq)}}
}

func csu_reset_b_(p *Periph) RMSRSR {
	return RMSRSR{mmio.UM32{&p.SRSR.U32, uint32(csu_reset_b)}}
}

func ipp_user_reset_b_(p *Periph) RMSRSR {
	return RMSRSR{mmio.UM32{&p.SRSR.U32, uint32(ipp_user_reset_b)}}
}

func wdog_rst_b_(p *Periph) RMSRSR {
	return RMSRSR{mmio.UM32{&p.SRSR.U32, uint32(wdog_rst_b)}}
}

func jtag_rst_b_(p *Periph) RMSRSR {
	return RMSRSR{mmio.UM32{&p.SRSR.U32, uint32(jtag_rst_b)}}
}

func jtag_sw_rst_(p *Periph) RMSRSR {
	return RMSRSR{mmio.UM32{&p.SRSR.U32, uint32(jtag_sw_rst)}}
}

func wdog3_rst_b_(p *Periph) RMSRSR {
	return RMSRSR{mmio.UM32{&p.SRSR.U32, uint32(wdog3_rst_b)}}
}

func tempsense_rst_b_(p *Periph) RMSRSR {
	return RMSRSR{mmio.UM32{&p.SRSR.U32, uint32(tempsense_rst_b)}}
}

type SBMR2 uint32

type RSBMR2 struct{ mmio.U32 }

func (r *RSBMR2) LoadBits(mask SBMR2) SBMR2 { return SBMR2(r.U32.LoadBits(uint32(mask))) }
func (r *RSBMR2) StoreBits(mask, b SBMR2)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSBMR2) SetBits(mask SBMR2)        { r.U32.SetBits(uint32(mask)) }
func (r *RSBMR2) ClearBits(mask SBMR2)      { r.U32.ClearBits(uint32(mask)) }
func (r *RSBMR2) Load() SBMR2               { return SBMR2(r.U32.Load()) }
func (r *RSBMR2) Store(b SBMR2)             { r.U32.Store(uint32(b)) }

type RMSBMR2 struct{ mmio.UM32 }

func (rm RMSBMR2) Load() SBMR2   { return SBMR2(rm.UM32.Load()) }
func (rm RMSBMR2) Store(b SBMR2) { rm.UM32.Store(uint32(b)) }

func SEC_CONFIG_(p *Periph) RMSBMR2 {
	return RMSBMR2{mmio.UM32{&p.SBMR2.U32, uint32(SEC_CONFIG)}}
}

func DIR_BT_DIS_(p *Periph) RMSBMR2 {
	return RMSBMR2{mmio.UM32{&p.SBMR2.U32, uint32(DIR_BT_DIS)}}
}

func BT_FUSE_SEL_(p *Periph) RMSBMR2 {
	return RMSBMR2{mmio.UM32{&p.SBMR2.U32, uint32(BT_FUSE_SEL)}}
}

func BMOD_(p *Periph) RMSBMR2 {
	return RMSBMR2{mmio.UM32{&p.SBMR2.U32, uint32(BMOD)}}
}

type GPR1 uint32

type RGPR1 struct{ mmio.U32 }

func (r *RGPR1) LoadBits(mask GPR1) GPR1 { return GPR1(r.U32.LoadBits(uint32(mask))) }
func (r *RGPR1) StoreBits(mask, b GPR1)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPR1) SetBits(mask GPR1)       { r.U32.SetBits(uint32(mask)) }
func (r *RGPR1) ClearBits(mask GPR1)     { r.U32.ClearBits(uint32(mask)) }
func (r *RGPR1) Load() GPR1              { return GPR1(r.U32.Load()) }
func (r *RGPR1) Store(b GPR1)            { r.U32.Store(uint32(b)) }

type RMGPR1 struct{ mmio.UM32 }

func (rm RMGPR1) Load() GPR1   { return GPR1(rm.UM32.Load()) }
func (rm RMGPR1) Store(b GPR1) { rm.UM32.Store(uint32(b)) }

func PERSISTENT_ENTRY0_(p *Periph) RMGPR1 {
	return RMGPR1{mmio.UM32{&p.GPR1.U32, uint32(PERSISTENT_ENTRY0)}}
}

type GPR2 uint32

type RGPR2 struct{ mmio.U32 }

func (r *RGPR2) LoadBits(mask GPR2) GPR2 { return GPR2(r.U32.LoadBits(uint32(mask))) }
func (r *RGPR2) StoreBits(mask, b GPR2)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPR2) SetBits(mask GPR2)       { r.U32.SetBits(uint32(mask)) }
func (r *RGPR2) ClearBits(mask GPR2)     { r.U32.ClearBits(uint32(mask)) }
func (r *RGPR2) Load() GPR2              { return GPR2(r.U32.Load()) }
func (r *RGPR2) Store(b GPR2)            { r.U32.Store(uint32(b)) }

type RMGPR2 struct{ mmio.UM32 }

func (rm RMGPR2) Load() GPR2   { return GPR2(rm.UM32.Load()) }
func (rm RMGPR2) Store(b GPR2) { rm.UM32.Store(uint32(b)) }

func PERSISTENT_ARG0_(p *Periph) RMGPR2 {
	return RMGPR2{mmio.UM32{&p.GPR2.U32, uint32(PERSISTENT_ARG0)}}
}

type GPR3 uint32

type RGPR3 struct{ mmio.U32 }

func (r *RGPR3) LoadBits(mask GPR3) GPR3 { return GPR3(r.U32.LoadBits(uint32(mask))) }
func (r *RGPR3) StoreBits(mask, b GPR3)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPR3) SetBits(mask GPR3)       { r.U32.SetBits(uint32(mask)) }
func (r *RGPR3) ClearBits(mask GPR3)     { r.U32.ClearBits(uint32(mask)) }
func (r *RGPR3) Load() GPR3              { return GPR3(r.U32.Load()) }
func (r *RGPR3) Store(b GPR3)            { r.U32.Store(uint32(b)) }

type RMGPR3 struct{ mmio.UM32 }

func (rm RMGPR3) Load() GPR3   { return GPR3(rm.UM32.Load()) }
func (rm RMGPR3) Store(b GPR3) { rm.UM32.Store(uint32(b)) }

type GPR4 uint32

type RGPR4 struct{ mmio.U32 }

func (r *RGPR4) LoadBits(mask GPR4) GPR4 { return GPR4(r.U32.LoadBits(uint32(mask))) }
func (r *RGPR4) StoreBits(mask, b GPR4)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPR4) SetBits(mask GPR4)       { r.U32.SetBits(uint32(mask)) }
func (r *RGPR4) ClearBits(mask GPR4)     { r.U32.ClearBits(uint32(mask)) }
func (r *RGPR4) Load() GPR4              { return GPR4(r.U32.Load()) }
func (r *RGPR4) Store(b GPR4)            { r.U32.Store(uint32(b)) }

type RMGPR4 struct{ mmio.UM32 }

func (rm RMGPR4) Load() GPR4   { return GPR4(rm.UM32.Load()) }
func (rm RMGPR4) Store(b GPR4) { rm.UM32.Store(uint32(b)) }

type GPR5 uint32

type RGPR5 struct{ mmio.U32 }

func (r *RGPR5) LoadBits(mask GPR5) GPR5 { return GPR5(r.U32.LoadBits(uint32(mask))) }
func (r *RGPR5) StoreBits(mask, b GPR5)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPR5) SetBits(mask GPR5)       { r.U32.SetBits(uint32(mask)) }
func (r *RGPR5) ClearBits(mask GPR5)     { r.U32.ClearBits(uint32(mask)) }
func (r *RGPR5) Load() GPR5              { return GPR5(r.U32.Load()) }
func (r *RGPR5) Store(b GPR5)            { r.U32.Store(uint32(b)) }

type RMGPR5 struct{ mmio.UM32 }

func (rm RMGPR5) Load() GPR5   { return GPR5(rm.UM32.Load()) }
func (rm RMGPR5) Store(b GPR5) { rm.UM32.Store(uint32(b)) }

type GPR6 uint32

type RGPR6 struct{ mmio.U32 }

func (r *RGPR6) LoadBits(mask GPR6) GPR6 { return GPR6(r.U32.LoadBits(uint32(mask))) }
func (r *RGPR6) StoreBits(mask, b GPR6)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPR6) SetBits(mask GPR6)       { r.U32.SetBits(uint32(mask)) }
func (r *RGPR6) ClearBits(mask GPR6)     { r.U32.ClearBits(uint32(mask)) }
func (r *RGPR6) Load() GPR6              { return GPR6(r.U32.Load()) }
func (r *RGPR6) Store(b GPR6)            { r.U32.Store(uint32(b)) }

type RMGPR6 struct{ mmio.UM32 }

func (rm RMGPR6) Load() GPR6   { return GPR6(rm.UM32.Load()) }
func (rm RMGPR6) Store(b GPR6) { rm.UM32.Store(uint32(b)) }

type GPR7 uint32

type RGPR7 struct{ mmio.U32 }

func (r *RGPR7) LoadBits(mask GPR7) GPR7 { return GPR7(r.U32.LoadBits(uint32(mask))) }
func (r *RGPR7) StoreBits(mask, b GPR7)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPR7) SetBits(mask GPR7)       { r.U32.SetBits(uint32(mask)) }
func (r *RGPR7) ClearBits(mask GPR7)     { r.U32.ClearBits(uint32(mask)) }
func (r *RGPR7) Load() GPR7              { return GPR7(r.U32.Load()) }
func (r *RGPR7) Store(b GPR7)            { r.U32.Store(uint32(b)) }

type RMGPR7 struct{ mmio.UM32 }

func (rm RMGPR7) Load() GPR7   { return GPR7(rm.UM32.Load()) }
func (rm RMGPR7) Store(b GPR7) { rm.UM32.Store(uint32(b)) }

type GPR8 uint32

type RGPR8 struct{ mmio.U32 }

func (r *RGPR8) LoadBits(mask GPR8) GPR8 { return GPR8(r.U32.LoadBits(uint32(mask))) }
func (r *RGPR8) StoreBits(mask, b GPR8)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPR8) SetBits(mask GPR8)       { r.U32.SetBits(uint32(mask)) }
func (r *RGPR8) ClearBits(mask GPR8)     { r.U32.ClearBits(uint32(mask)) }
func (r *RGPR8) Load() GPR8              { return GPR8(r.U32.Load()) }
func (r *RGPR8) Store(b GPR8)            { r.U32.Store(uint32(b)) }

type RMGPR8 struct{ mmio.UM32 }

func (rm RMGPR8) Load() GPR8   { return GPR8(rm.UM32.Load()) }
func (rm RMGPR8) Store(b GPR8) { rm.UM32.Store(uint32(b)) }

type GPR9 uint32

type RGPR9 struct{ mmio.U32 }

func (r *RGPR9) LoadBits(mask GPR9) GPR9 { return GPR9(r.U32.LoadBits(uint32(mask))) }
func (r *RGPR9) StoreBits(mask, b GPR9)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPR9) SetBits(mask GPR9)       { r.U32.SetBits(uint32(mask)) }
func (r *RGPR9) ClearBits(mask GPR9)     { r.U32.ClearBits(uint32(mask)) }
func (r *RGPR9) Load() GPR9              { return GPR9(r.U32.Load()) }
func (r *RGPR9) Store(b GPR9)            { r.U32.Store(uint32(b)) }

type RMGPR9 struct{ mmio.UM32 }

func (rm RMGPR9) Load() GPR9   { return GPR9(rm.UM32.Load()) }
func (rm RMGPR9) Store(b GPR9) { rm.UM32.Store(uint32(b)) }

type GPR10 uint32

type RGPR10 struct{ mmio.U32 }

func (r *RGPR10) LoadBits(mask GPR10) GPR10 { return GPR10(r.U32.LoadBits(uint32(mask))) }
func (r *RGPR10) StoreBits(mask, b GPR10)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGPR10) SetBits(mask GPR10)        { r.U32.SetBits(uint32(mask)) }
func (r *RGPR10) ClearBits(mask GPR10)      { r.U32.ClearBits(uint32(mask)) }
func (r *RGPR10) Load() GPR10               { return GPR10(r.U32.Load()) }
func (r *RGPR10) Store(b GPR10)             { r.U32.Store(uint32(b)) }

type RMGPR10 struct{ mmio.UM32 }

func (rm RMGPR10) Load() GPR10   { return GPR10(rm.UM32.Load()) }
func (rm RMGPR10) Store(b GPR10) { rm.UM32.Store(uint32(b)) }
