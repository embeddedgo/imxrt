// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build imxrt1060

// Package src provides access to the registers of the SRC peripheral.
//
// Instances:
//  SRC  SRC_BASE  -  SRC*
// Registers:
//  0x000 32  SCR    SRC Control Register
//  0x004 32  SBMR1  SRC Boot Mode Register 1
//  0x008 32  SRSR   SRC Reset Status Register
//  0x01C 32  SBMR2  SRC Boot Mode Register 2
//  0x020 32  GPR1   SRC General Purpose Register 1
//  0x024 32  GPR2   SRC General Purpose Register 2
//  0x028 32  GPR3   SRC General Purpose Register 3
//  0x02C 32  GPR4   SRC General Purpose Register 4
//  0x030 32  GPR5   SRC General Purpose Register 5
//  0x034 32  GPR6   SRC General Purpose Register 6
//  0x038 32  GPR7   SRC General Purpose Register 7
//  0x03C 32  GPR8   SRC General Purpose Register 8
//  0x040 32  GPR9   SRC General Purpose Register 9
//  0x044 32  GPR10  SRC General Purpose Register 10
// Import:
//  github.com/embeddedgo/imxrt/p/mmap
package src

const (
	mask_wdog_rst     SCR = 0x0F << 7  //+ Mask wdog_rst_b source
	mask_wdog_rst_5   SCR = 0x05 << 7  //  wdog_rst_b is masked
	mask_wdog_rst_10  SCR = 0x0A << 7  //  wdog_rst_b is not masked (default)
	core0_rst         SCR = 0x01 << 13 //+ Software reset for core0 only
	core0_rst_0       SCR = 0x00 << 13 //  do not assert core0 reset
	core0_rst_1       SCR = 0x01 << 13 //  assert core0 reset
	core0_dbg_rst     SCR = 0x01 << 17 //+ Software reset for core0 debug only
	core0_dbg_rst_0   SCR = 0x00 << 17 //  do not assert core0 debug reset
	core0_dbg_rst_1   SCR = 0x01 << 17 //  assert core0 debug reset
	dbg_rst_msk_pg    SCR = 0x01 << 25 //+ Do not assert debug resets after power gating event of core
	dbg_rst_msk_pg_0  SCR = 0x00 << 25 //  do not mask core debug resets (debug resets will be asserted after power gating event)
	dbg_rst_msk_pg_1  SCR = 0x01 << 25 //  mask core debug resets (debug resets won't be asserted after power gating event)
	mask_wdog3_rst    SCR = 0x0F << 28 //+ Mask wdog3_rst_b source
	mask_wdog3_rst_5  SCR = 0x05 << 28 //  wdog3_rst_b is masked
	mask_wdog3_rst_10 SCR = 0x0A << 28 //  wdog3_rst_b is not masked
)

const (
	mask_wdog_rstn  = 7
	core0_rstn      = 13
	core0_dbg_rstn  = 17
	dbg_rst_msk_pgn = 25
	mask_wdog3_rstn = 28
)

const (
	BOOT_CFG1 SBMR1 = 0xFF << 0  //+ Refer to fusemap.
	BOOT_CFG2 SBMR1 = 0xFF << 8  //+ Refer to fusemap.
	BOOT_CFG3 SBMR1 = 0xFF << 16 //+ Refer to fusemap.
	BOOT_CFG4 SBMR1 = 0xFF << 24 //+ Refer to fusemap.
)

const (
	BOOT_CFG1n = 0
	BOOT_CFG2n = 8
	BOOT_CFG3n = 16
	BOOT_CFG4n = 24
)

const (
	ipp_reset_b          SRSR = 0x01 << 0 //+ Indicates whether reset was the result of ipp_reset_b pin (Power-up sequence)
	ipp_reset_b_0        SRSR = 0x00 << 0 //  Reset is not a result of ipp_reset_b pin.
	ipp_reset_b_1        SRSR = 0x01 << 0 //  Reset is a result of ipp_reset_b pin.
	lockup_sysresetreq   SRSR = 0x01 << 1 //+ Indicates a reset has been caused by CPU lockup or software setting of SYSRESETREQ bit in Application Interrupt and Reset Control Register of the ARM core
	lockup_sysresetreq_0 SRSR = 0x00 << 1 //  Reset is not a result of the mentioned case.
	lockup_sysresetreq_1 SRSR = 0x01 << 1 //  Reset is a result of the mentioned case.
	csu_reset_b          SRSR = 0x01 << 2 //+ Indicates whether the reset was the result of the csu_reset_b input.
	csu_reset_b_0        SRSR = 0x00 << 2 //  Reset is not a result of the csu_reset_b event.
	csu_reset_b_1        SRSR = 0x01 << 2 //  Reset is a result of the csu_reset_b event.
	ipp_user_reset_b     SRSR = 0x01 << 3 //+ Indicates whether the reset was the result of the ipp_user_reset_b qualified reset.
	ipp_user_reset_b_0   SRSR = 0x00 << 3 //  Reset is not a result of the ipp_user_reset_b qualified as COLD reset event.
	ipp_user_reset_b_1   SRSR = 0x01 << 3 //  Reset is a result of the ipp_user_reset_b qualified as COLD reset event.
	wdog_rst_b           SRSR = 0x01 << 4 //+ IC Watchdog Time-out reset
	wdog_rst_b_0         SRSR = 0x00 << 4 //  Reset is not a result of the watchdog time-out event.
	wdog_rst_b_1         SRSR = 0x01 << 4 //  Reset is a result of the watchdog time-out event.
	jtag_rst_b           SRSR = 0x01 << 5 //+ HIGH - Z JTAG reset. Indicates whether the reset was the result of HIGH-Z reset from JTAG.
	jtag_rst_b_0         SRSR = 0x00 << 5 //  Reset is not a result of HIGH-Z reset from JTAG.
	jtag_rst_b_1         SRSR = 0x01 << 5 //  Reset is a result of HIGH-Z reset from JTAG.
	jtag_sw_rst          SRSR = 0x01 << 6 //+ JTAG software reset. Indicates whether the reset was the result of software reset from JTAG.
	jtag_sw_rst_0        SRSR = 0x00 << 6 //  Reset is not a result of software reset from JTAG.
	jtag_sw_rst_1        SRSR = 0x01 << 6 //  Reset is a result of software reset from JTAG.
	wdog3_rst_b          SRSR = 0x01 << 7 //+ IC Watchdog3 Time-out reset
	wdog3_rst_b_0        SRSR = 0x00 << 7 //  Reset is not a result of the watchdog3 time-out event.
	wdog3_rst_b_1        SRSR = 0x01 << 7 //  Reset is a result of the watchdog3 time-out event.
	tempsense_rst_b      SRSR = 0x01 << 8 //+ Temper Sensor software reset
	tempsense_rst_b_0    SRSR = 0x00 << 8 //  Reset is not a result of software reset from Temperature Sensor.
	tempsense_rst_b_1    SRSR = 0x01 << 8 //  Reset is a result of software reset from Temperature Sensor.
)

const (
	ipp_reset_bn        = 0
	lockup_sysresetreqn = 1
	csu_reset_bn        = 2
	ipp_user_reset_bn   = 3
	wdog_rst_bn         = 4
	jtag_rst_bn         = 5
	jtag_sw_rstn        = 6
	wdog3_rst_bn        = 7
	tempsense_rst_bn    = 8
)

const (
	SEC_CONFIG  SBMR2 = 0x03 << 0  //+ SECONFIG[1] shows the state of the SECONFIG[1] fuse
	DIR_BT_DIS  SBMR2 = 0x01 << 3  //+ DIR_BT_DIS shows the state of the DIR_BT_DIS fuse
	BT_FUSE_SEL SBMR2 = 0x01 << 4  //+ BT_FUSE_SEL (connected to gpio bt_fuse_sel) shows the state of the BT_FUSE_SEL fuse
	BMOD        SBMR2 = 0x03 << 24 //+ BMOD[1:0] shows the latched state of the BOOT_MODE1 and BOOT_MODE0 signals on the rising edge of POR_B
)

const (
	SEC_CONFIGn  = 0
	DIR_BT_DISn  = 3
	BT_FUSE_SELn = 4
	BMODn        = 24
)

const (
	PERSISTENT_ENTRY0 GPR1 = 0xFFFFFFFF << 0 //+ Holds entry function for core0 for waking-up from low power mode
)

const (
	PERSISTENT_ENTRY0n = 0
)

const (
	PERSISTENT_ARG0 GPR2 = 0xFFFFFFFF << 0 //+ Holds argument of entry function for core0 for waking-up from low power mode
)

const (
	PERSISTENT_ARG0n = 0
)
