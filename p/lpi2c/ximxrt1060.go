// Code generated by xgen -g; DO NOT EDIT.

//go:build imxrt1060

package lpi2c

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	VERID  mmio.R32[VERID]
	PARAM  mmio.R32[PARAM]
	_      [2]uint32
	MCR    mmio.R32[MCR]
	MSR    mmio.R32[MSR]
	MIER   mmio.R32[MSR]
	MDER   mmio.R32[DER]
	MCFGR0 mmio.R32[MCFGR0]
	MCFGR1 mmio.R32[MCFGR1]
	MCFGR2 mmio.R32[MCFGR2]
	MCFGR3 mmio.R32[MCFGR3]
	_      [4]uint32
	MDMR   mmio.R32[MDMR]
	_      uint32
	MCCR0  mmio.R32[MCCR]
	_      uint32
	MCCR1  mmio.R32[MCCR]
	_      uint32
	MFCR   mmio.R32[MFCR]
	MFSR   mmio.R32[MFSR]
	MTDR   mmio.R32[MTDR]
	_      [3]uint32
	MRDR   mmio.R32[RDR]
	_      [39]uint32
	SCR    mmio.R32[SCR]
	SSR    mmio.R32[SSR]
	SIER   mmio.R32[SSR]
	SDER   mmio.R32[DER]
	_      uint32
	SCFGR1 mmio.R32[SCFGR1]
	SCFGR2 mmio.R32[SCFGR2]
	_      [5]uint32
	SAMR   mmio.R32[SAMR]
	_      [3]uint32
	SASR   mmio.R32[SASR]
	STAR   mmio.R32[STAR]
	_      [2]uint32
	STDR   mmio.R32[uint32]
	_      [3]uint32
	SRDR   mmio.R32[RDR]
}

func LPI2C1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPI2C1_BASE))) }
func LPI2C2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPI2C2_BASE))) }
func LPI2C3() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPI2C3_BASE))) }
func LPI2C4() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPI2C4_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type VERID uint32

func FEATURE_(p *Periph) mmio.RM32[VERID] { return mmio.RM32[VERID]{R: &p.VERID, Mask: FEATURE} }
func MINOR_(p *Periph) mmio.RM32[VERID]   { return mmio.RM32[VERID]{R: &p.VERID, Mask: MINOR} }
func MAJOR_(p *Periph) mmio.RM32[VERID]   { return mmio.RM32[VERID]{R: &p.VERID, Mask: MAJOR} }

type PARAM uint32

func MTXFIFO_(p *Periph) mmio.RM32[PARAM] { return mmio.RM32[PARAM]{R: &p.PARAM, Mask: MTXFIFO} }
func MRXFIFO_(p *Periph) mmio.RM32[PARAM] { return mmio.RM32[PARAM]{R: &p.PARAM, Mask: MRXFIFO} }

type MCR uint32

func MEN_(p *Periph) mmio.RM32[MCR]    { return mmio.RM32[MCR]{R: &p.MCR, Mask: MEN} }
func MRST_(p *Periph) mmio.RM32[MCR]   { return mmio.RM32[MCR]{R: &p.MCR, Mask: MRST} }
func MDOZEN_(p *Periph) mmio.RM32[MCR] { return mmio.RM32[MCR]{R: &p.MCR, Mask: MDOZEN} }
func MDBGEN_(p *Periph) mmio.RM32[MCR] { return mmio.RM32[MCR]{R: &p.MCR, Mask: MDBGEN} }
func MRTF_(p *Periph) mmio.RM32[MCR]   { return mmio.RM32[MCR]{R: &p.MCR, Mask: MRTF} }
func MRRF_(p *Periph) mmio.RM32[MCR]   { return mmio.RM32[MCR]{R: &p.MCR, Mask: MRRF} }

type MSR uint32

func MTDF_(p *Periph) mmio.RM32[MSR]  { return mmio.RM32[MSR]{R: &p.MSR, Mask: MTDF} }
func MRDF_(p *Periph) mmio.RM32[MSR]  { return mmio.RM32[MSR]{R: &p.MSR, Mask: MRDF} }
func MEPF_(p *Periph) mmio.RM32[MSR]  { return mmio.RM32[MSR]{R: &p.MSR, Mask: MEPF} }
func MSDF_(p *Periph) mmio.RM32[MSR]  { return mmio.RM32[MSR]{R: &p.MSR, Mask: MSDF} }
func MNDF_(p *Periph) mmio.RM32[MSR]  { return mmio.RM32[MSR]{R: &p.MSR, Mask: MNDF} }
func MALF_(p *Periph) mmio.RM32[MSR]  { return mmio.RM32[MSR]{R: &p.MSR, Mask: MALF} }
func MFEF_(p *Periph) mmio.RM32[MSR]  { return mmio.RM32[MSR]{R: &p.MSR, Mask: MFEF} }
func MPLTF_(p *Periph) mmio.RM32[MSR] { return mmio.RM32[MSR]{R: &p.MSR, Mask: MPLTF} }
func MDMF_(p *Periph) mmio.RM32[MSR]  { return mmio.RM32[MSR]{R: &p.MSR, Mask: MDMF} }
func MBF_(p *Periph) mmio.RM32[MSR]   { return mmio.RM32[MSR]{R: &p.MSR, Mask: MBF} }
func MBBF_(p *Periph) mmio.RM32[MSR]  { return mmio.RM32[MSR]{R: &p.MSR, Mask: MBBF} }

type DER uint32

type MCFGR0 uint32

func HREN_(p *Periph) mmio.RM32[MCFGR0]    { return mmio.RM32[MCFGR0]{R: &p.MCFGR0, Mask: HREN} }
func HRPOL_(p *Periph) mmio.RM32[MCFGR0]   { return mmio.RM32[MCFGR0]{R: &p.MCFGR0, Mask: HRPOL} }
func HRSEL_(p *Periph) mmio.RM32[MCFGR0]   { return mmio.RM32[MCFGR0]{R: &p.MCFGR0, Mask: HRSEL} }
func CIRFIFO_(p *Periph) mmio.RM32[MCFGR0] { return mmio.RM32[MCFGR0]{R: &p.MCFGR0, Mask: CIRFIFO} }
func RDMO_(p *Periph) mmio.RM32[MCFGR0]    { return mmio.RM32[MCFGR0]{R: &p.MCFGR0, Mask: RDMO} }

type MCFGR1 uint32

func MPRESCALE_(p *Periph) mmio.RM32[MCFGR1] { return mmio.RM32[MCFGR1]{R: &p.MCFGR1, Mask: MPRESCALE} }
func MAUTOSTOP_(p *Periph) mmio.RM32[MCFGR1] { return mmio.RM32[MCFGR1]{R: &p.MCFGR1, Mask: MAUTOSTOP} }
func MIGNACK_(p *Periph) mmio.RM32[MCFGR1]   { return mmio.RM32[MCFGR1]{R: &p.MCFGR1, Mask: MIGNACK} }
func MTIMECFG_(p *Periph) mmio.RM32[MCFGR1]  { return mmio.RM32[MCFGR1]{R: &p.MCFGR1, Mask: MTIMECFG} }
func MATCFG_(p *Periph) mmio.RM32[MCFGR1]    { return mmio.RM32[MCFGR1]{R: &p.MCFGR1, Mask: MATCFG} }
func MPINCFG_(p *Periph) mmio.RM32[MCFGR1]   { return mmio.RM32[MCFGR1]{R: &p.MCFGR1, Mask: MPINCFG} }

type MCFGR2 uint32

func MBUSIDLE_(p *Periph) mmio.RM32[MCFGR2] { return mmio.RM32[MCFGR2]{R: &p.MCFGR2, Mask: MBUSIDLE} }
func MFILTSCL_(p *Periph) mmio.RM32[MCFGR2] { return mmio.RM32[MCFGR2]{R: &p.MCFGR2, Mask: MFILTSCL} }
func MFILTSDA_(p *Periph) mmio.RM32[MCFGR2] { return mmio.RM32[MCFGR2]{R: &p.MCFGR2, Mask: MFILTSDA} }

type MCFGR3 uint32

func PINLOW_(p *Periph) mmio.RM32[MCFGR3] { return mmio.RM32[MCFGR3]{R: &p.MCFGR3, Mask: PINLOW} }

type MDMR uint32

func MATCH0_(p *Periph) mmio.RM32[MDMR] { return mmio.RM32[MDMR]{R: &p.MDMR, Mask: MATCH0} }
func MATCH1_(p *Periph) mmio.RM32[MDMR] { return mmio.RM32[MDMR]{R: &p.MDMR, Mask: MATCH1} }

type MCCR uint32

type MFCR uint32

func TXWATER_(p *Periph) mmio.RM32[MFCR] { return mmio.RM32[MFCR]{R: &p.MFCR, Mask: TXWATER} }
func RXWATER_(p *Periph) mmio.RM32[MFCR] { return mmio.RM32[MFCR]{R: &p.MFCR, Mask: RXWATER} }

type MFSR uint32

func TXCOUNT_(p *Periph) mmio.RM32[MFSR] { return mmio.RM32[MFSR]{R: &p.MFSR, Mask: TXCOUNT} }
func RXCOUNT_(p *Periph) mmio.RM32[MFSR] { return mmio.RM32[MFSR]{R: &p.MFSR, Mask: RXCOUNT} }

type MTDR uint32

func DATA_(p *Periph) mmio.RM32[MTDR] { return mmio.RM32[MTDR]{R: &p.MTDR, Mask: DATA} }
func CMD_(p *Periph) mmio.RM32[MTDR]  { return mmio.RM32[MTDR]{R: &p.MTDR, Mask: CMD} }

type RDR uint32

type SCR uint32

func SEN_(p *Periph) mmio.RM32[SCR]     { return mmio.RM32[SCR]{R: &p.SCR, Mask: SEN} }
func SRST_(p *Periph) mmio.RM32[SCR]    { return mmio.RM32[SCR]{R: &p.SCR, Mask: SRST} }
func SFILTEN_(p *Periph) mmio.RM32[SCR] { return mmio.RM32[SCR]{R: &p.SCR, Mask: SFILTEN} }
func SFILTDZ_(p *Periph) mmio.RM32[SCR] { return mmio.RM32[SCR]{R: &p.SCR, Mask: SFILTDZ} }
func SRTF_(p *Periph) mmio.RM32[SCR]    { return mmio.RM32[SCR]{R: &p.SCR, Mask: SRTF} }
func SRRF_(p *Periph) mmio.RM32[SCR]    { return mmio.RM32[SCR]{R: &p.SCR, Mask: SRRF} }

type SSR uint32

func STDF_(p *Periph) mmio.RM32[SSR]  { return mmio.RM32[SSR]{R: &p.SSR, Mask: STDF} }
func SRDF_(p *Periph) mmio.RM32[SSR]  { return mmio.RM32[SSR]{R: &p.SSR, Mask: SRDF} }
func SAVF_(p *Periph) mmio.RM32[SSR]  { return mmio.RM32[SSR]{R: &p.SSR, Mask: SAVF} }
func STAF_(p *Periph) mmio.RM32[SSR]  { return mmio.RM32[SSR]{R: &p.SSR, Mask: STAF} }
func SRSF_(p *Periph) mmio.RM32[SSR]  { return mmio.RM32[SSR]{R: &p.SSR, Mask: SRSF} }
func SSDF_(p *Periph) mmio.RM32[SSR]  { return mmio.RM32[SSR]{R: &p.SSR, Mask: SSDF} }
func SBEF_(p *Periph) mmio.RM32[SSR]  { return mmio.RM32[SSR]{R: &p.SSR, Mask: SBEF} }
func SFEF_(p *Periph) mmio.RM32[SSR]  { return mmio.RM32[SSR]{R: &p.SSR, Mask: SFEF} }
func SAM0F_(p *Periph) mmio.RM32[SSR] { return mmio.RM32[SSR]{R: &p.SSR, Mask: SAM0F} }
func SAM1F_(p *Periph) mmio.RM32[SSR] { return mmio.RM32[SSR]{R: &p.SSR, Mask: SAM1F} }
func SGCF_(p *Periph) mmio.RM32[SSR]  { return mmio.RM32[SSR]{R: &p.SSR, Mask: SGCF} }
func SSARF_(p *Periph) mmio.RM32[SSR] { return mmio.RM32[SSR]{R: &p.SSR, Mask: SSARF} }
func SBF_(p *Periph) mmio.RM32[SSR]   { return mmio.RM32[SSR]{R: &p.SSR, Mask: SBF} }
func SBBF_(p *Periph) mmio.RM32[SSR]  { return mmio.RM32[SSR]{R: &p.SSR, Mask: SBBF} }

type SCFGR1 uint32

func SADRSTALL_(p *Periph) mmio.RM32[SCFGR1] { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: SADRSTALL} }
func SRXSTALL_(p *Periph) mmio.RM32[SCFGR1]  { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: SRXSTALL} }
func STXDSTALL_(p *Periph) mmio.RM32[SCFGR1] { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: STXDSTALL} }
func SACKSTALL_(p *Periph) mmio.RM32[SCFGR1] { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: SACKSTALL} }
func SGCEN_(p *Periph) mmio.RM32[SCFGR1]     { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: SGCEN} }
func SSAEN_(p *Periph) mmio.RM32[SCFGR1]     { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: SSAEN} }
func STXCFG_(p *Periph) mmio.RM32[SCFGR1]    { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: STXCFG} }
func SRXCFG_(p *Periph) mmio.RM32[SCFGR1]    { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: SRXCFG} }
func SIGNACK_(p *Periph) mmio.RM32[SCFGR1]   { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: SIGNACK} }
func SHSMEN_(p *Periph) mmio.RM32[SCFGR1]    { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: SHSMEN} }
func SADDRCFG_(p *Periph) mmio.RM32[SCFGR1]  { return mmio.RM32[SCFGR1]{R: &p.SCFGR1, Mask: SADDRCFG} }

type SCFGR2 uint32

func SCLKHOLD_(p *Periph) mmio.RM32[SCFGR2] { return mmio.RM32[SCFGR2]{R: &p.SCFGR2, Mask: SCLKHOLD} }
func SDATAVD_(p *Periph) mmio.RM32[SCFGR2]  { return mmio.RM32[SCFGR2]{R: &p.SCFGR2, Mask: SDATAVD} }
func SFILTSCL_(p *Periph) mmio.RM32[SCFGR2] { return mmio.RM32[SCFGR2]{R: &p.SCFGR2, Mask: SFILTSCL} }
func SFILTSDA_(p *Periph) mmio.RM32[SCFGR2] { return mmio.RM32[SCFGR2]{R: &p.SCFGR2, Mask: SFILTSDA} }

type SAMR uint32

func ADDR0_(p *Periph) mmio.RM32[SAMR] { return mmio.RM32[SAMR]{R: &p.SAMR, Mask: ADDR0} }
func ADDR1_(p *Periph) mmio.RM32[SAMR] { return mmio.RM32[SAMR]{R: &p.SAMR, Mask: ADDR1} }

type SASR uint32

func RADDR_(p *Periph) mmio.RM32[SASR] { return mmio.RM32[SASR]{R: &p.SASR, Mask: RADDR} }
func ANV_(p *Periph) mmio.RM32[SASR]   { return mmio.RM32[SASR]{R: &p.SASR, Mask: ANV} }

type STAR uint32

func TXNACK_(p *Periph) mmio.RM32[STAR] { return mmio.RM32[STAR]{R: &p.STAR, Mask: TXNACK} }
