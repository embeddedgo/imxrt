// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build imxrt1060

// Package adc_etc provides access to the registers of the ADC_ETC peripheral.
//
// Instances:
//
//	ADC_ETC  ADC_ETC_BASE  -  ADC_ETC_IRQ0*,ADC_ETC_IRQ1*,ADC_ETC_IRQ2*,ADC_ETC_ERROR_IRQ*
//
// Registers:
//
//	0x000 32  CTRL              ADC_ETC Global Control Register
//	0x004 32  DONE0_1_IRQ       ETC DONE0 and DONE1 IRQ State Register
//	0x008 32  DONE2_ERR_IRQ     ETC DONE_2 and DONE_ERR IRQ State Register
//	0x00C 32  DMA_CTRL          ETC DMA control Register
//	0x010 32  TRIG0_CTRL        ETC_TRIG0 Control Register
//	0x014 32  TRIG0_COUNTER     ETC_TRIG0 Counter Register
//	0x018 32  TRIG0_CHAIN_1_0   ETC_TRIG Chain 0/1 Register
//	0x01C 32  TRIG0_CHAIN_3_2   ETC_TRIG Chain 2/3 Register
//	0x020 32  TRIG0_CHAIN_5_4   ETC_TRIG Chain 4/5 Register
//	0x024 32  TRIG0_CHAIN_7_6   ETC_TRIG Chain 6/7 Register
//	0x028 32  TRIG0_RESULT_1_0  ETC_TRIG Result Data 1/0 Register
//	0x02C 32  TRIG0_RESULT_3_2  ETC_TRIG Result Data 3/2 Register
//	0x030 32  TRIG0_RESULT_5_4  ETC_TRIG Result Data 5/4 Register
//	0x034 32  TRIG0_RESULT_7_6  ETC_TRIG Result Data 7/6 Register
//	0x038 32  TRIG1_CTRL        ETC_TRIG1 Control Register
//	0x03C 32  TRIG1_COUNTER     ETC_TRIG1 Counter Register
//	0x040 32  TRIG1_CHAIN_1_0   ETC_TRIG Chain 0/1 Register
//	0x044 32  TRIG1_CHAIN_3_2   ETC_TRIG Chain 2/3 Register
//	0x048 32  TRIG1_CHAIN_5_4   ETC_TRIG Chain 4/5 Register
//	0x04C 32  TRIG1_CHAIN_7_6   ETC_TRIG Chain 6/7 Register
//	0x050 32  TRIG1_RESULT_1_0  ETC_TRIG Result Data 1/0 Register
//	0x054 32  TRIG1_RESULT_3_2  ETC_TRIG Result Data 3/2 Register
//	0x058 32  TRIG1_RESULT_5_4  ETC_TRIG Result Data 5/4 Register
//	0x05C 32  TRIG1_RESULT_7_6  ETC_TRIG Result Data 7/6 Register
//	0x060 32  TRIG2_CTRL        ETC_TRIG2 Control Register
//	0x064 32  TRIG2_COUNTER     ETC_TRIG2 Counter Register
//	0x068 32  TRIG2_CHAIN_1_0   ETC_TRIG Chain 0/1 Register
//	0x06C 32  TRIG2_CHAIN_3_2   ETC_TRIG Chain 2/3 Register
//	0x070 32  TRIG2_CHAIN_5_4   ETC_TRIG Chain 4/5 Register
//	0x074 32  TRIG2_CHAIN_7_6   ETC_TRIG Chain 6/7 Register
//	0x078 32  TRIG2_RESULT_1_0  ETC_TRIG Result Data 1/0 Register
//	0x07C 32  TRIG2_RESULT_3_2  ETC_TRIG Result Data 3/2 Register
//	0x080 32  TRIG2_RESULT_5_4  ETC_TRIG Result Data 5/4 Register
//	0x084 32  TRIG2_RESULT_7_6  ETC_TRIG Result Data 7/6 Register
//	0x088 32  TRIG3_CTRL        ETC_TRIG3 Control Register
//	0x08C 32  TRIG3_COUNTER     ETC_TRIG3 Counter Register
//	0x090 32  TRIG3_CHAIN_1_0   ETC_TRIG Chain 0/1 Register
//	0x094 32  TRIG3_CHAIN_3_2   ETC_TRIG Chain 2/3 Register
//	0x098 32  TRIG3_CHAIN_5_4   ETC_TRIG Chain 4/5 Register
//	0x09C 32  TRIG3_CHAIN_7_6   ETC_TRIG Chain 6/7 Register
//	0x0A0 32  TRIG3_RESULT_1_0  ETC_TRIG Result Data 1/0 Register
//	0x0A4 32  TRIG3_RESULT_3_2  ETC_TRIG Result Data 3/2 Register
//	0x0A8 32  TRIG3_RESULT_5_4  ETC_TRIG Result Data 5/4 Register
//	0x0AC 32  TRIG3_RESULT_7_6  ETC_TRIG Result Data 7/6 Register
//	0x0B0 32  TRIG4_CTRL        ETC_TRIG4 Control Register
//	0x0B4 32  TRIG4_COUNTER     ETC_TRIG4 Counter Register
//	0x0B8 32  TRIG4_CHAIN_1_0   ETC_TRIG Chain 0/1 Register
//	0x0BC 32  TRIG4_CHAIN_3_2   ETC_TRIG Chain 2/3 Register
//	0x0C0 32  TRIG4_CHAIN_5_4   ETC_TRIG Chain 4/5 Register
//	0x0C4 32  TRIG4_CHAIN_7_6   ETC_TRIG Chain 6/7 Register
//	0x0C8 32  TRIG4_RESULT_1_0  ETC_TRIG Result Data 1/0 Register
//	0x0CC 32  TRIG4_RESULT_3_2  ETC_TRIG Result Data 3/2 Register
//	0x0D0 32  TRIG4_RESULT_5_4  ETC_TRIG Result Data 5/4 Register
//	0x0D4 32  TRIG4_RESULT_7_6  ETC_TRIG Result Data 7/6 Register
//	0x0D8 32  TRIG5_CTRL        ETC_TRIG5 Control Register
//	0x0DC 32  TRIG5_COUNTER     ETC_TRIG5 Counter Register
//	0x0E0 32  TRIG5_CHAIN_1_0   ETC_TRIG Chain 0/1 Register
//	0x0E4 32  TRIG5_CHAIN_3_2   ETC_TRIG Chain 2/3 Register
//	0x0E8 32  TRIG5_CHAIN_5_4   ETC_TRIG Chain 4/5 Register
//	0x0EC 32  TRIG5_CHAIN_7_6   ETC_TRIG Chain 6/7 Register
//	0x0F0 32  TRIG5_RESULT_1_0  ETC_TRIG Result Data 1/0 Register
//	0x0F4 32  TRIG5_RESULT_3_2  ETC_TRIG Result Data 3/2 Register
//	0x0F8 32  TRIG5_RESULT_5_4  ETC_TRIG Result Data 5/4 Register
//	0x0FC 32  TRIG5_RESULT_7_6  ETC_TRIG Result Data 7/6 Register
//	0x100 32  TRIG6_CTRL        ETC_TRIG6 Control Register
//	0x104 32  TRIG6_COUNTER     ETC_TRIG6 Counter Register
//	0x108 32  TRIG6_CHAIN_1_0   ETC_TRIG Chain 0/1 Register
//	0x10C 32  TRIG6_CHAIN_3_2   ETC_TRIG Chain 2/3 Register
//	0x110 32  TRIG6_CHAIN_5_4   ETC_TRIG Chain 4/5 Register
//	0x114 32  TRIG6_CHAIN_7_6   ETC_TRIG Chain 6/7 Register
//	0x118 32  TRIG6_RESULT_1_0  ETC_TRIG Result Data 1/0 Register
//	0x11C 32  TRIG6_RESULT_3_2  ETC_TRIG Result Data 3/2 Register
//	0x120 32  TRIG6_RESULT_5_4  ETC_TRIG Result Data 5/4 Register
//	0x124 32  TRIG6_RESULT_7_6  ETC_TRIG Result Data 7/6 Register
//	0x128 32  TRIG7_CTRL        ETC_TRIG7 Control Register
//	0x12C 32  TRIG7_COUNTER     ETC_TRIG7 Counter Register
//	0x130 32  TRIG7_CHAIN_1_0   ETC_TRIG Chain 0/1 Register
//	0x134 32  TRIG7_CHAIN_3_2   ETC_TRIG Chain 2/3 Register
//	0x138 32  TRIG7_CHAIN_5_4   ETC_TRIG Chain 4/5 Register
//	0x13C 32  TRIG7_CHAIN_7_6   ETC_TRIG Chain 6/7 Register
//	0x140 32  TRIG7_RESULT_1_0  ETC_TRIG Result Data 1/0 Register
//	0x144 32  TRIG7_RESULT_3_2  ETC_TRIG Result Data 3/2 Register
//	0x148 32  TRIG7_RESULT_5_4  ETC_TRIG Result Data 5/4 Register
//	0x14C 32  TRIG7_RESULT_7_6  ETC_TRIG Result Data 7/6 Register
//
// Import:
//
//	github.com/embeddedgo/imxrt/p/mmap
package adc_etc

const (
	TRIG_ENABLE        CTRL = 0xFF << 0  //+ TRIG enable register
	EXT0_TRIG_ENABLE   CTRL = 0x01 << 8  //+ TSC0 TRIG enable register. 1'b1: enable external TSC0 trigger. 1'b0: disable external TSC0 trigger.
	EXT0_TRIG_PRIORITY CTRL = 0x07 << 9  //+ External TSC0 trigger priority, 7 is Highest, 0 is lowest .
	EXT1_TRIG_ENABLE   CTRL = 0x01 << 12 //+ TSC1 TRIG enable register. 1'b1: enable external TSC1 trigger. 1'b0: disable external TSC1 trigger.
	EXT1_TRIG_PRIORITY CTRL = 0x07 << 13 //+ External TSC1 trigger priority, 7 is Highest, 0 is lowest .
	PRE_DIVIDER        CTRL = 0xFF << 16 //+ Pre-divider for trig delay and interval .
	DMA_MODE_SEL       CTRL = 0x01 << 29 //+ 1'b0: Trig DMA_REQ with latched signal, REQ will be cleared when ACK and source request cleared
	TSC_BYPASS         CTRL = 0x01 << 30 //+ 1'b1: TSC is bypassed to ADC2. 1'b0: TSC not bypassed. To use ADC2, this bit should be cleared.
	SOFTRST            CTRL = 0x01 << 31 //+ Software reset, high active. When write 1 ,all logical will be reset.
)

const (
	TRIG_ENABLEn        = 0
	EXT0_TRIG_ENABLEn   = 8
	EXT0_TRIG_PRIORITYn = 9
	EXT1_TRIG_ENABLEn   = 12
	EXT1_TRIG_PRIORITYn = 13
	PRE_DIVIDERn        = 16
	DMA_MODE_SELn       = 29
	TSC_BYPASSn         = 30
	SOFTRSTn            = 31
)

const (
	TRIG0_DONE0 DONE0_1_IRQ = 0x01 << 0  //+ TRIG0 done0 interrupt detection
	TRIG1_DONE0 DONE0_1_IRQ = 0x01 << 1  //+ TRIG1 done0 interrupt detection
	TRIG2_DONE0 DONE0_1_IRQ = 0x01 << 2  //+ TRIG2 done0 interrupt detection
	TRIG3_DONE0 DONE0_1_IRQ = 0x01 << 3  //+ TRIG3 done0 interrupt detection
	TRIG4_DONE0 DONE0_1_IRQ = 0x01 << 4  //+ TRIG4 done0 interrupt detection
	TRIG5_DONE0 DONE0_1_IRQ = 0x01 << 5  //+ TRIG5 done0 interrupt detection
	TRIG6_DONE0 DONE0_1_IRQ = 0x01 << 6  //+ TRIG6 done0 interrupt detection
	TRIG7_DONE0 DONE0_1_IRQ = 0x01 << 7  //+ TRIG7 done0 interrupt detection
	TRIG0_DONE1 DONE0_1_IRQ = 0x01 << 16 //+ TRIG0 done1 interrupt detection
	TRIG1_DONE1 DONE0_1_IRQ = 0x01 << 17 //+ TRIG1 done1 interrupt detection
	TRIG2_DONE1 DONE0_1_IRQ = 0x01 << 18 //+ TRIG2 done1 interrupt detection
	TRIG3_DONE1 DONE0_1_IRQ = 0x01 << 19 //+ TRIG3 done1 interrupt detection
	TRIG4_DONE1 DONE0_1_IRQ = 0x01 << 20 //+ TRIG4 done1 interrupt detection
	TRIG5_DONE1 DONE0_1_IRQ = 0x01 << 21 //+ TRIG5 done1 interrupt detection
	TRIG6_DONE1 DONE0_1_IRQ = 0x01 << 22 //+ TRIG6 done1 interrupt detection
	TRIG7_DONE1 DONE0_1_IRQ = 0x01 << 23 //+ TRIG7 done1 interrupt detection
)

const (
	TRIG0_DONE0n = 0
	TRIG1_DONE0n = 1
	TRIG2_DONE0n = 2
	TRIG3_DONE0n = 3
	TRIG4_DONE0n = 4
	TRIG5_DONE0n = 5
	TRIG6_DONE0n = 6
	TRIG7_DONE0n = 7
	TRIG0_DONE1n = 16
	TRIG1_DONE1n = 17
	TRIG2_DONE1n = 18
	TRIG3_DONE1n = 19
	TRIG4_DONE1n = 20
	TRIG5_DONE1n = 21
	TRIG6_DONE1n = 22
	TRIG7_DONE1n = 23
)

const (
	TRIG0_DONE2 DONE2_ERR_IRQ = 0x01 << 0  //+ TRIG0 done2 interrupt detection
	TRIG1_DONE2 DONE2_ERR_IRQ = 0x01 << 1  //+ TRIG1 done2 interrupt detection
	TRIG2_DONE2 DONE2_ERR_IRQ = 0x01 << 2  //+ TRIG2 done2 interrupt detection
	TRIG3_DONE2 DONE2_ERR_IRQ = 0x01 << 3  //+ TRIG3 done2 interrupt detection
	TRIG4_DONE2 DONE2_ERR_IRQ = 0x01 << 4  //+ TRIG4 done2 interrupt detection
	TRIG5_DONE2 DONE2_ERR_IRQ = 0x01 << 5  //+ TRIG5 done2 interrupt detection
	TRIG6_DONE2 DONE2_ERR_IRQ = 0x01 << 6  //+ TRIG6 done2 interrupt detection
	TRIG7_DONE2 DONE2_ERR_IRQ = 0x01 << 7  //+ TRIG7 done2 interrupt detection
	TRIG0_ERR   DONE2_ERR_IRQ = 0x01 << 16 //+ TRIG0 error interrupt detection
	TRIG1_ERR   DONE2_ERR_IRQ = 0x01 << 17 //+ TRIG1 error interrupt detection
	TRIG2_ERR   DONE2_ERR_IRQ = 0x01 << 18 //+ TRIG2 error interrupt detection
	TRIG3_ERR   DONE2_ERR_IRQ = 0x01 << 19 //+ TRIG3 error interrupt detection
	TRIG4_ERR   DONE2_ERR_IRQ = 0x01 << 20 //+ TRIG4 error interrupt detection
	TRIG5_ERR   DONE2_ERR_IRQ = 0x01 << 21 //+ TRIG5 error interrupt detection
	TRIG6_ERR   DONE2_ERR_IRQ = 0x01 << 22 //+ TRIG6 error interrupt detection
	TRIG7_ERR   DONE2_ERR_IRQ = 0x01 << 23 //+ TRIG7 error interrupt detection
)

const (
	TRIG0_DONE2n = 0
	TRIG1_DONE2n = 1
	TRIG2_DONE2n = 2
	TRIG3_DONE2n = 3
	TRIG4_DONE2n = 4
	TRIG5_DONE2n = 5
	TRIG6_DONE2n = 6
	TRIG7_DONE2n = 7
	TRIG0_ERRn   = 16
	TRIG1_ERRn   = 17
	TRIG2_ERRn   = 18
	TRIG3_ERRn   = 19
	TRIG4_ERRn   = 20
	TRIG5_ERRn   = 21
	TRIG6_ERRn   = 22
	TRIG7_ERRn   = 23
)

const (
	TRIG0_ENABLE DMA_CTRL = 0x01 << 0  //+ When TRIG0 done enable DMA request
	TRIG1_ENABLE DMA_CTRL = 0x01 << 1  //+ When TRIG1 done enable DMA request
	TRIG2_ENABLE DMA_CTRL = 0x01 << 2  //+ When TRIG2 done enable DMA request
	TRIG3_ENABLE DMA_CTRL = 0x01 << 3  //+ When TRIG3 done enable DMA request
	TRIG4_ENABLE DMA_CTRL = 0x01 << 4  //+ When TRIG4 done enable DMA request
	TRIG5_ENABLE DMA_CTRL = 0x01 << 5  //+ When TRIG5 done enable DMA request
	TRIG6_ENABLE DMA_CTRL = 0x01 << 6  //+ When TRIG6 done enable DMA request
	TRIG7_ENABLE DMA_CTRL = 0x01 << 7  //+ When TRIG7 done enable DMA request
	TRIG0_REQ    DMA_CTRL = 0x01 << 16 //+ When TRIG0 done DMA request detection
	TRIG1_REQ    DMA_CTRL = 0x01 << 17 //+ When TRIG1 done DMA request detection
	TRIG2_REQ    DMA_CTRL = 0x01 << 18 //+ When TRIG2 done DMA request detection
	TRIG3_REQ    DMA_CTRL = 0x01 << 19 //+ When TRIG3 done DMA request detection
	TRIG4_REQ    DMA_CTRL = 0x01 << 20 //+ When TRIG4 done DMA request detection
	TRIG5_REQ    DMA_CTRL = 0x01 << 21 //+ When TRIG5 done DMA request detection
	TRIG6_REQ    DMA_CTRL = 0x01 << 22 //+ When TRIG6 done DMA request detection
	TRIG7_REQ    DMA_CTRL = 0x01 << 23 //+ When TRIG7 done DMA request detection
)

const (
	TRIG0_ENABLEn = 0
	TRIG1_ENABLEn = 1
	TRIG2_ENABLEn = 2
	TRIG3_ENABLEn = 3
	TRIG4_ENABLEn = 4
	TRIG5_ENABLEn = 5
	TRIG6_ENABLEn = 6
	TRIG7_ENABLEn = 7
	TRIG0_REQn    = 16
	TRIG1_REQn    = 17
	TRIG2_REQn    = 18
	TRIG3_REQn    = 19
	TRIG4_REQn    = 20
	TRIG5_REQn    = 21
	TRIG6_REQn    = 22
	TRIG7_REQn    = 23
)

const (
	SW_TRIG       TRIG0_CTRL = 0x01 << 0  //+ Software write 1 as the TRIGGER. This register is self-clearing.
	TRIG_MODE     TRIG0_CTRL = 0x01 << 4  //+ TRIG mode register. 1'b0: hardware trigger. 1'b1: software trigger.
	TRIG_CHAIN    TRIG0_CTRL = 0x07 << 8  //+ TRIG chain length to the ADC. 0: Trig length is 1; ... 7: Trig length is 8;
	TRIG_PRIORITY TRIG0_CTRL = 0x07 << 12 //+ External trigger priority, 7 is highest, 0 is lowest .
	SYNC_MODE     TRIG0_CTRL = 0x01 << 16 //+ TRIG mode control . 1'b0: Disable sync mode; 1'b1: Enable sync mode
)

const (
	SW_TRIGn       = 0
	TRIG_MODEn     = 4
	TRIG_CHAINn    = 8
	TRIG_PRIORITYn = 12
	SYNC_MODEn     = 16
)

const (
	INIT_DELAY      TRIG0_COUNTER = 0xFFFF << 0  //+ TRIGGER initial delay counter
	SAMPLE_INTERVAL TRIG0_COUNTER = 0xFFFF << 16 //+ TRIGGER sampling interval counter
)

const (
	INIT_DELAYn      = 0
	SAMPLE_INTERVALn = 16
)

const (
	CSEL0 TRIG0_CHAIN_1_0 = 0x0F << 0  //+ CHAIN0 CSEL ADC channel selection
	HWTS0 TRIG0_CHAIN_1_0 = 0xFF << 4  //+ CHAIN0 HWTS ADC hardware trigger selection. For more information, see the ADC chapter.
	B2B0  TRIG0_CHAIN_1_0 = 0x01 << 12 //+ CHAIN0 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE0   TRIG0_CHAIN_1_0 = 0x03 << 13 //+ CHAIN0 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
	CSEL1 TRIG0_CHAIN_1_0 = 0x0F << 16 //+ CHAIN1 CSEL ADC channel selection
	HWTS1 TRIG0_CHAIN_1_0 = 0xFF << 20 //+ CHAIN1 HWTS ADC hardware trigger selection. For more information, see the ADC chapter.
	B2B1  TRIG0_CHAIN_1_0 = 0x01 << 28 //+ CHAIN1 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE1   TRIG0_CHAIN_1_0 = 0x03 << 29 //+ CHAIN1 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
)

const (
	CSEL0n = 0
	HWTS0n = 4
	B2B0n  = 12
	IE0n   = 13
	CSEL1n = 16
	HWTS1n = 20
	B2B1n  = 28
	IE1n   = 29
)

const (
	CSEL2 TRIG0_CHAIN_3_2 = 0x0F << 0  //+ CHAIN2 CSEL
	HWTS2 TRIG0_CHAIN_3_2 = 0xFF << 4  //+ CHAIN2 HWTS
	B2B2  TRIG0_CHAIN_3_2 = 0x01 << 12 //+ CHAIN2 B2B
	IE2   TRIG0_CHAIN_3_2 = 0x03 << 13 //+ CHAIN2 IE
	CSEL3 TRIG0_CHAIN_3_2 = 0x0F << 16 //+ CHAIN3 CSEL
	HWTS3 TRIG0_CHAIN_3_2 = 0xFF << 20 //+ CHAIN3 HWTS
	B2B3  TRIG0_CHAIN_3_2 = 0x01 << 28 //+ CHAIN3 B2B
	IE3   TRIG0_CHAIN_3_2 = 0x03 << 29 //+ CHAIN3 IE
)

const (
	CSEL2n = 0
	HWTS2n = 4
	B2B2n  = 12
	IE2n   = 13
	CSEL3n = 16
	HWTS3n = 20
	B2B3n  = 28
	IE3n   = 29
)

const (
	CSEL4 TRIG0_CHAIN_5_4 = 0x0F << 0  //+ CHAIN4 CSEL
	HWTS4 TRIG0_CHAIN_5_4 = 0xFF << 4  //+ CHAIN4 HWTS
	B2B4  TRIG0_CHAIN_5_4 = 0x01 << 12 //+ CHAIN4 B2B
	IE4   TRIG0_CHAIN_5_4 = 0x03 << 13 //+ CHAIN4 IE
	CSEL5 TRIG0_CHAIN_5_4 = 0x0F << 16 //+ CHAIN5 CSEL
	HWTS5 TRIG0_CHAIN_5_4 = 0xFF << 20 //+ CHAIN5 HWTS
	B2B5  TRIG0_CHAIN_5_4 = 0x01 << 28 //+ CHAIN5 B2B
	IE5   TRIG0_CHAIN_5_4 = 0x03 << 29 //+ CHAIN5 IE
)

const (
	CSEL4n = 0
	HWTS4n = 4
	B2B4n  = 12
	IE4n   = 13
	CSEL5n = 16
	HWTS5n = 20
	B2B5n  = 28
	IE5n   = 29
)

const (
	CSEL6 TRIG0_CHAIN_7_6 = 0x0F << 0  //+ CHAIN6 CSEL
	HWTS6 TRIG0_CHAIN_7_6 = 0xFF << 4  //+ CHAIN6 HWTS
	B2B6  TRIG0_CHAIN_7_6 = 0x01 << 12 //+ CHAIN6 B2B
	IE6   TRIG0_CHAIN_7_6 = 0x03 << 13 //+ CHAIN6 IE
	CSEL7 TRIG0_CHAIN_7_6 = 0x0F << 16 //+ CHAIN7 CSEL
	HWTS7 TRIG0_CHAIN_7_6 = 0xFF << 20 //+ CHAIN7 HWTS
	B2B7  TRIG0_CHAIN_7_6 = 0x01 << 28 //+ CHAIN7 B2B
	IE7   TRIG0_CHAIN_7_6 = 0x03 << 29 //+ CHAIN7 IE
)

const (
	CSEL6n = 0
	HWTS6n = 4
	B2B6n  = 12
	IE6n   = 13
	CSEL7n = 16
	HWTS7n = 20
	B2B7n  = 28
	IE7n   = 29
)

const (
	DATA0 TRIG0_RESULT_1_0 = 0xFFF << 0  //+ Result DATA0
	DATA1 TRIG0_RESULT_1_0 = 0xFFF << 16 //+ Result DATA1
)

const (
	DATA0n = 0
	DATA1n = 16
)

const (
	DATA2 TRIG0_RESULT_3_2 = 0xFFF << 0  //+ Result DATA2
	DATA3 TRIG0_RESULT_3_2 = 0xFFF << 16 //+ Result DATA3
)

const (
	DATA2n = 0
	DATA3n = 16
)

const (
	DATA4 TRIG0_RESULT_5_4 = 0xFFF << 0  //+ Result DATA4
	DATA5 TRIG0_RESULT_5_4 = 0xFFF << 16 //+ Result DATA5
)

const (
	DATA4n = 0
	DATA5n = 16
)

const (
	DATA6 TRIG0_RESULT_7_6 = 0xFFF << 0  //+ Result DATA6
	DATA7 TRIG0_RESULT_7_6 = 0xFFF << 16 //+ Result DATA7
)

const (
	DATA6n = 0
	DATA7n = 16
)

const (
	SW_TRIG       TRIG1_CTRL = 0x01 << 0  //+ Software write 1 as the TRIGGER. This register is self-clearing.
	TRIG_MODE     TRIG1_CTRL = 0x01 << 4  //+ TRIG mode register. 1'b0: hardware trigger. 1'b1: software trigger.
	TRIG_CHAIN    TRIG1_CTRL = 0x07 << 8  //+ TRIG chain length to the ADC. 0: Trig length is 1; ... 7: Trig length is 8;
	TRIG_PRIORITY TRIG1_CTRL = 0x07 << 12 //+ External trigger priority, 7 is highest, 0 is lowest .
	SYNC_MODE     TRIG1_CTRL = 0x01 << 16 //+ TRIG mode control . 1'b0: Disable sync mode; 1'b1: Enable sync mode
)

const (
	SW_TRIGn       = 0
	TRIG_MODEn     = 4
	TRIG_CHAINn    = 8
	TRIG_PRIORITYn = 12
	SYNC_MODEn     = 16
)

const (
	INIT_DELAY      TRIG1_COUNTER = 0xFFFF << 0  //+ TRIGGER initial delay counter
	SAMPLE_INTERVAL TRIG1_COUNTER = 0xFFFF << 16 //+ TRIGGER sampling interval counter
)

const (
	INIT_DELAYn      = 0
	SAMPLE_INTERVALn = 16
)

const (
	CSEL0 TRIG1_CHAIN_1_0 = 0x0F << 0  //+ CHAIN0 CSEL ADC channel selection
	HWTS0 TRIG1_CHAIN_1_0 = 0xFF << 4  //+ CHAIN0 HWTS ADC hardware trigger selection
	B2B0  TRIG1_CHAIN_1_0 = 0x01 << 12 //+ CHAIN0 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE0   TRIG1_CHAIN_1_0 = 0x03 << 13 //+ CHAIN0 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
	CSEL1 TRIG1_CHAIN_1_0 = 0x0F << 16 //+ CHAIN1 CSEL ADC channel selection
	HWTS1 TRIG1_CHAIN_1_0 = 0xFF << 20 //+ CHAIN1 HWTS ADC hardware trigger selection
	B2B1  TRIG1_CHAIN_1_0 = 0x01 << 28 //+ CHAIN1 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE1   TRIG1_CHAIN_1_0 = 0x03 << 29 //+ CHAIN1 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
)

const (
	CSEL0n = 0
	HWTS0n = 4
	B2B0n  = 12
	IE0n   = 13
	CSEL1n = 16
	HWTS1n = 20
	B2B1n  = 28
	IE1n   = 29
)

const (
	CSEL2 TRIG1_CHAIN_3_2 = 0x0F << 0  //+ CHAIN2 CSEL
	HWTS2 TRIG1_CHAIN_3_2 = 0xFF << 4  //+ CHAIN2 HWTS
	B2B2  TRIG1_CHAIN_3_2 = 0x01 << 12 //+ CHAIN2 B2B
	IE2   TRIG1_CHAIN_3_2 = 0x03 << 13 //+ CHAIN2 IE
	CSEL3 TRIG1_CHAIN_3_2 = 0x0F << 16 //+ CHAIN3 CSEL
	HWTS3 TRIG1_CHAIN_3_2 = 0xFF << 20 //+ CHAIN3 HWTS
	B2B3  TRIG1_CHAIN_3_2 = 0x01 << 28 //+ CHAIN3 B2B
	IE3   TRIG1_CHAIN_3_2 = 0x03 << 29 //+ CHAIN3 IE
)

const (
	CSEL2n = 0
	HWTS2n = 4
	B2B2n  = 12
	IE2n   = 13
	CSEL3n = 16
	HWTS3n = 20
	B2B3n  = 28
	IE3n   = 29
)

const (
	CSEL4 TRIG1_CHAIN_5_4 = 0x0F << 0  //+ CHAIN4 CSEL
	HWTS4 TRIG1_CHAIN_5_4 = 0xFF << 4  //+ CHAIN4 HWTS
	B2B4  TRIG1_CHAIN_5_4 = 0x01 << 12 //+ CHAIN4 B2B
	IE4   TRIG1_CHAIN_5_4 = 0x03 << 13 //+ CHAIN4 IE
	CSEL5 TRIG1_CHAIN_5_4 = 0x0F << 16 //+ CHAIN5 CSEL
	HWTS5 TRIG1_CHAIN_5_4 = 0xFF << 20 //+ CHAIN5 HWTS
	B2B5  TRIG1_CHAIN_5_4 = 0x01 << 28 //+ CHAIN5 B2B
	IE5   TRIG1_CHAIN_5_4 = 0x03 << 29 //+ CHAIN5 IE
)

const (
	CSEL4n = 0
	HWTS4n = 4
	B2B4n  = 12
	IE4n   = 13
	CSEL5n = 16
	HWTS5n = 20
	B2B5n  = 28
	IE5n   = 29
)

const (
	CSEL6 TRIG1_CHAIN_7_6 = 0x0F << 0  //+ CHAIN6 CSEL
	HWTS6 TRIG1_CHAIN_7_6 = 0xFF << 4  //+ CHAIN6 HWTS
	B2B6  TRIG1_CHAIN_7_6 = 0x01 << 12 //+ CHAIN6 B2B
	IE6   TRIG1_CHAIN_7_6 = 0x03 << 13 //+ CHAIN6 IE
	CSEL7 TRIG1_CHAIN_7_6 = 0x0F << 16 //+ CHAIN7 CSEL
	HWTS7 TRIG1_CHAIN_7_6 = 0xFF << 20 //+ CHAIN7 HWTS
	B2B7  TRIG1_CHAIN_7_6 = 0x01 << 28 //+ CHAIN7 B2B
	IE7   TRIG1_CHAIN_7_6 = 0x03 << 29 //+ CHAIN7 IE
)

const (
	CSEL6n = 0
	HWTS6n = 4
	B2B6n  = 12
	IE6n   = 13
	CSEL7n = 16
	HWTS7n = 20
	B2B7n  = 28
	IE7n   = 29
)

const (
	DATA0 TRIG1_RESULT_1_0 = 0xFFF << 0  //+ Result DATA0
	DATA1 TRIG1_RESULT_1_0 = 0xFFF << 16 //+ Result DATA1
)

const (
	DATA0n = 0
	DATA1n = 16
)

const (
	DATA2 TRIG1_RESULT_3_2 = 0xFFF << 0  //+ Result DATA2
	DATA3 TRIG1_RESULT_3_2 = 0xFFF << 16 //+ Result DATA3
)

const (
	DATA2n = 0
	DATA3n = 16
)

const (
	DATA4 TRIG1_RESULT_5_4 = 0xFFF << 0  //+ Result DATA4
	DATA5 TRIG1_RESULT_5_4 = 0xFFF << 16 //+ Result DATA5
)

const (
	DATA4n = 0
	DATA5n = 16
)

const (
	DATA6 TRIG1_RESULT_7_6 = 0xFFF << 0  //+ Result DATA6
	DATA7 TRIG1_RESULT_7_6 = 0xFFF << 16 //+ Result DATA7
)

const (
	DATA6n = 0
	DATA7n = 16
)

const (
	SW_TRIG       TRIG2_CTRL = 0x01 << 0  //+ Software write 1 as the TRIGGER. This register is self-clearing.
	TRIG_MODE     TRIG2_CTRL = 0x01 << 4  //+ TRIG mode register. 1'b0: hardware trigger. 1'b1: software trigger.
	TRIG_CHAIN    TRIG2_CTRL = 0x07 << 8  //+ TRIG chain length to the ADC. 0: Trig length is 1; ... 7: Trig length is 8;
	TRIG_PRIORITY TRIG2_CTRL = 0x07 << 12 //+ External trigger priority, 7 is highest, 0 is lowest .
	SYNC_MODE     TRIG2_CTRL = 0x01 << 16 //+ TRIG mode control . 1'b0: Disable sync mode; 1'b1: Enable sync mode
)

const (
	SW_TRIGn       = 0
	TRIG_MODEn     = 4
	TRIG_CHAINn    = 8
	TRIG_PRIORITYn = 12
	SYNC_MODEn     = 16
)

const (
	INIT_DELAY      TRIG2_COUNTER = 0xFFFF << 0  //+ TRIGGER initial delay counter
	SAMPLE_INTERVAL TRIG2_COUNTER = 0xFFFF << 16 //+ TRIGGER sampling interval counter
)

const (
	INIT_DELAYn      = 0
	SAMPLE_INTERVALn = 16
)

const (
	CSEL0 TRIG2_CHAIN_1_0 = 0x0F << 0  //+ CHAIN0 CSEL ADC channel selection
	HWTS0 TRIG2_CHAIN_1_0 = 0xFF << 4  //+ CHAIN0 HWTS ADC hardware trigger selection
	B2B0  TRIG2_CHAIN_1_0 = 0x01 << 12 //+ CHAIN0 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE0   TRIG2_CHAIN_1_0 = 0x03 << 13 //+ CHAIN0 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
	CSEL1 TRIG2_CHAIN_1_0 = 0x0F << 16 //+ CHAIN1 CSEL ADC channel selection
	HWTS1 TRIG2_CHAIN_1_0 = 0xFF << 20 //+ CHAIN1 HWTS ADC hardware trigger selection
	B2B1  TRIG2_CHAIN_1_0 = 0x01 << 28 //+ CHAIN1 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE1   TRIG2_CHAIN_1_0 = 0x03 << 29 //+ CHAIN1 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
)

const (
	CSEL0n = 0
	HWTS0n = 4
	B2B0n  = 12
	IE0n   = 13
	CSEL1n = 16
	HWTS1n = 20
	B2B1n  = 28
	IE1n   = 29
)

const (
	CSEL2 TRIG2_CHAIN_3_2 = 0x0F << 0  //+ CHAIN2 CSEL
	HWTS2 TRIG2_CHAIN_3_2 = 0xFF << 4  //+ CHAIN2 HWTS
	B2B2  TRIG2_CHAIN_3_2 = 0x01 << 12 //+ CHAIN2 B2B
	IE2   TRIG2_CHAIN_3_2 = 0x03 << 13 //+ CHAIN2 IE
	CSEL3 TRIG2_CHAIN_3_2 = 0x0F << 16 //+ CHAIN3 CSEL
	HWTS3 TRIG2_CHAIN_3_2 = 0xFF << 20 //+ CHAIN3 HWTS
	B2B3  TRIG2_CHAIN_3_2 = 0x01 << 28 //+ CHAIN3 B2B
	IE3   TRIG2_CHAIN_3_2 = 0x03 << 29 //+ CHAIN3 IE
)

const (
	CSEL2n = 0
	HWTS2n = 4
	B2B2n  = 12
	IE2n   = 13
	CSEL3n = 16
	HWTS3n = 20
	B2B3n  = 28
	IE3n   = 29
)

const (
	CSEL4 TRIG2_CHAIN_5_4 = 0x0F << 0  //+ CHAIN4 CSEL
	HWTS4 TRIG2_CHAIN_5_4 = 0xFF << 4  //+ CHAIN4 HWTS
	B2B4  TRIG2_CHAIN_5_4 = 0x01 << 12 //+ CHAIN4 B2B
	IE4   TRIG2_CHAIN_5_4 = 0x03 << 13 //+ CHAIN4 IE
	CSEL5 TRIG2_CHAIN_5_4 = 0x0F << 16 //+ CHAIN5 CSEL
	HWTS5 TRIG2_CHAIN_5_4 = 0xFF << 20 //+ CHAIN5 HWTS
	B2B5  TRIG2_CHAIN_5_4 = 0x01 << 28 //+ CHAIN5 B2B
	IE5   TRIG2_CHAIN_5_4 = 0x03 << 29 //+ CHAIN5 IE
)

const (
	CSEL4n = 0
	HWTS4n = 4
	B2B4n  = 12
	IE4n   = 13
	CSEL5n = 16
	HWTS5n = 20
	B2B5n  = 28
	IE5n   = 29
)

const (
	CSEL6 TRIG2_CHAIN_7_6 = 0x0F << 0  //+ CHAIN6 CSEL
	HWTS6 TRIG2_CHAIN_7_6 = 0xFF << 4  //+ CHAIN6 HWTS
	B2B6  TRIG2_CHAIN_7_6 = 0x01 << 12 //+ CHAIN6 B2B
	IE6   TRIG2_CHAIN_7_6 = 0x03 << 13 //+ CHAIN6 IE
	CSEL7 TRIG2_CHAIN_7_6 = 0x0F << 16 //+ CHAIN7 CSEL
	HWTS7 TRIG2_CHAIN_7_6 = 0xFF << 20 //+ CHAIN7 HWTS
	B2B7  TRIG2_CHAIN_7_6 = 0x01 << 28 //+ CHAIN7 B2B
	IE7   TRIG2_CHAIN_7_6 = 0x03 << 29 //+ CHAIN7 IE
)

const (
	CSEL6n = 0
	HWTS6n = 4
	B2B6n  = 12
	IE6n   = 13
	CSEL7n = 16
	HWTS7n = 20
	B2B7n  = 28
	IE7n   = 29
)

const (
	DATA0 TRIG2_RESULT_1_0 = 0xFFF << 0  //+ Result DATA0
	DATA1 TRIG2_RESULT_1_0 = 0xFFF << 16 //+ Result DATA1
)

const (
	DATA0n = 0
	DATA1n = 16
)

const (
	DATA2 TRIG2_RESULT_3_2 = 0xFFF << 0  //+ Result DATA2
	DATA3 TRIG2_RESULT_3_2 = 0xFFF << 16 //+ Result DATA3
)

const (
	DATA2n = 0
	DATA3n = 16
)

const (
	DATA4 TRIG2_RESULT_5_4 = 0xFFF << 0  //+ Result DATA4
	DATA5 TRIG2_RESULT_5_4 = 0xFFF << 16 //+ Result DATA5
)

const (
	DATA4n = 0
	DATA5n = 16
)

const (
	DATA6 TRIG2_RESULT_7_6 = 0xFFF << 0  //+ Result DATA6
	DATA7 TRIG2_RESULT_7_6 = 0xFFF << 16 //+ Result DATA7
)

const (
	DATA6n = 0
	DATA7n = 16
)

const (
	SW_TRIG       TRIG3_CTRL = 0x01 << 0  //+ Software write 1 as the TRIGGER. This register is self-clearing.
	TRIG_MODE     TRIG3_CTRL = 0x01 << 4  //+ TRIG mode register. 1'b0: hardware trigger. 1'b1: software trigger.
	TRIG_CHAIN    TRIG3_CTRL = 0x07 << 8  //+ TRIG chain length to the ADC. 0: Trig length is 1; ... 7: Trig length is 8;
	TRIG_PRIORITY TRIG3_CTRL = 0x07 << 12 //+ External trigger priority, 7 is highest, 0 is lowest .
	SYNC_MODE     TRIG3_CTRL = 0x01 << 16 //+ TRIG mode control . 1'b0: Disable sync mode; 1'b1: Enable sync mode
)

const (
	SW_TRIGn       = 0
	TRIG_MODEn     = 4
	TRIG_CHAINn    = 8
	TRIG_PRIORITYn = 12
	SYNC_MODEn     = 16
)

const (
	INIT_DELAY      TRIG3_COUNTER = 0xFFFF << 0  //+ TRIGGER initial delay counter
	SAMPLE_INTERVAL TRIG3_COUNTER = 0xFFFF << 16 //+ TRIGGER sampling interval counter
)

const (
	INIT_DELAYn      = 0
	SAMPLE_INTERVALn = 16
)

const (
	CSEL0 TRIG3_CHAIN_1_0 = 0x0F << 0  //+ CHAIN0 CSEL ADC channel selection
	HWTS0 TRIG3_CHAIN_1_0 = 0xFF << 4  //+ CHAIN0 HWTS ADC hardware trigger selection
	B2B0  TRIG3_CHAIN_1_0 = 0x01 << 12 //+ CHAIN0 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE0   TRIG3_CHAIN_1_0 = 0x03 << 13 //+ CHAIN0 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
	CSEL1 TRIG3_CHAIN_1_0 = 0x0F << 16 //+ CHAIN1 CSEL ADC channel selection
	HWTS1 TRIG3_CHAIN_1_0 = 0xFF << 20 //+ CHAIN1 HWTS ADC hardware trigger selection
	B2B1  TRIG3_CHAIN_1_0 = 0x01 << 28 //+ CHAIN1 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE1   TRIG3_CHAIN_1_0 = 0x03 << 29 //+ CHAIN1 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
)

const (
	CSEL0n = 0
	HWTS0n = 4
	B2B0n  = 12
	IE0n   = 13
	CSEL1n = 16
	HWTS1n = 20
	B2B1n  = 28
	IE1n   = 29
)

const (
	CSEL2 TRIG3_CHAIN_3_2 = 0x0F << 0  //+ CHAIN2 CSEL
	HWTS2 TRIG3_CHAIN_3_2 = 0xFF << 4  //+ CHAIN2 HWTS
	B2B2  TRIG3_CHAIN_3_2 = 0x01 << 12 //+ CHAIN2 B2B
	IE2   TRIG3_CHAIN_3_2 = 0x03 << 13 //+ CHAIN2 IE
	CSEL3 TRIG3_CHAIN_3_2 = 0x0F << 16 //+ CHAIN3 CSEL
	HWTS3 TRIG3_CHAIN_3_2 = 0xFF << 20 //+ CHAIN3 HWTS
	B2B3  TRIG3_CHAIN_3_2 = 0x01 << 28 //+ CHAIN3 B2B
	IE3   TRIG3_CHAIN_3_2 = 0x03 << 29 //+ CHAIN3 IE
)

const (
	CSEL2n = 0
	HWTS2n = 4
	B2B2n  = 12
	IE2n   = 13
	CSEL3n = 16
	HWTS3n = 20
	B2B3n  = 28
	IE3n   = 29
)

const (
	CSEL4 TRIG3_CHAIN_5_4 = 0x0F << 0  //+ CHAIN4 CSEL
	HWTS4 TRIG3_CHAIN_5_4 = 0xFF << 4  //+ CHAIN4 HWTS
	B2B4  TRIG3_CHAIN_5_4 = 0x01 << 12 //+ CHAIN4 B2B
	IE4   TRIG3_CHAIN_5_4 = 0x03 << 13 //+ CHAIN4 IE
	CSEL5 TRIG3_CHAIN_5_4 = 0x0F << 16 //+ CHAIN5 CSEL
	HWTS5 TRIG3_CHAIN_5_4 = 0xFF << 20 //+ CHAIN5 HWTS
	B2B5  TRIG3_CHAIN_5_4 = 0x01 << 28 //+ CHAIN5 B2B
	IE5   TRIG3_CHAIN_5_4 = 0x03 << 29 //+ CHAIN5 IE
)

const (
	CSEL4n = 0
	HWTS4n = 4
	B2B4n  = 12
	IE4n   = 13
	CSEL5n = 16
	HWTS5n = 20
	B2B5n  = 28
	IE5n   = 29
)

const (
	CSEL6 TRIG3_CHAIN_7_6 = 0x0F << 0  //+ CHAIN6 CSEL
	HWTS6 TRIG3_CHAIN_7_6 = 0xFF << 4  //+ CHAIN6 HWTS
	B2B6  TRIG3_CHAIN_7_6 = 0x01 << 12 //+ CHAIN6 B2B
	IE6   TRIG3_CHAIN_7_6 = 0x03 << 13 //+ CHAIN6 IE
	CSEL7 TRIG3_CHAIN_7_6 = 0x0F << 16 //+ CHAIN7 CSEL
	HWTS7 TRIG3_CHAIN_7_6 = 0xFF << 20 //+ CHAIN7 HWTS
	B2B7  TRIG3_CHAIN_7_6 = 0x01 << 28 //+ CHAIN7 B2B
	IE7   TRIG3_CHAIN_7_6 = 0x03 << 29 //+ CHAIN7 IE
)

const (
	CSEL6n = 0
	HWTS6n = 4
	B2B6n  = 12
	IE6n   = 13
	CSEL7n = 16
	HWTS7n = 20
	B2B7n  = 28
	IE7n   = 29
)

const (
	DATA0 TRIG3_RESULT_1_0 = 0xFFF << 0  //+ Result DATA0
	DATA1 TRIG3_RESULT_1_0 = 0xFFF << 16 //+ Result DATA1
)

const (
	DATA0n = 0
	DATA1n = 16
)

const (
	DATA2 TRIG3_RESULT_3_2 = 0xFFF << 0  //+ Result DATA2
	DATA3 TRIG3_RESULT_3_2 = 0xFFF << 16 //+ Result DATA3
)

const (
	DATA2n = 0
	DATA3n = 16
)

const (
	DATA4 TRIG3_RESULT_5_4 = 0xFFF << 0  //+ Result DATA4
	DATA5 TRIG3_RESULT_5_4 = 0xFFF << 16 //+ Result DATA5
)

const (
	DATA4n = 0
	DATA5n = 16
)

const (
	DATA6 TRIG3_RESULT_7_6 = 0xFFF << 0  //+ Result DATA6
	DATA7 TRIG3_RESULT_7_6 = 0xFFF << 16 //+ Result DATA7
)

const (
	DATA6n = 0
	DATA7n = 16
)

const (
	SW_TRIG       TRIG4_CTRL = 0x01 << 0  //+ Software write 1 as the TRIGGER. This register is self-clearing.
	TRIG_MODE     TRIG4_CTRL = 0x01 << 4  //+ TRIG mode register. 1'b0: hardware trigger. 1'b1: software trigger.
	TRIG_CHAIN    TRIG4_CTRL = 0x07 << 8  //+ TRIG chain length to the ADC. 0: Trig length is 1; ... 7: Trig length is 8;
	TRIG_PRIORITY TRIG4_CTRL = 0x07 << 12 //+ External trigger priority, 7 is highest, 0 is lowest .
	SYNC_MODE     TRIG4_CTRL = 0x01 << 16 //+ TRIG mode control . 1'b0: Disable sync mode; 1'b1: Enable sync mode
)

const (
	SW_TRIGn       = 0
	TRIG_MODEn     = 4
	TRIG_CHAINn    = 8
	TRIG_PRIORITYn = 12
	SYNC_MODEn     = 16
)

const (
	INIT_DELAY      TRIG4_COUNTER = 0xFFFF << 0  //+ TRIGGER initial delay counter
	SAMPLE_INTERVAL TRIG4_COUNTER = 0xFFFF << 16 //+ TRIGGER sampling interval counter
)

const (
	INIT_DELAYn      = 0
	SAMPLE_INTERVALn = 16
)

const (
	CSEL0 TRIG4_CHAIN_1_0 = 0x0F << 0  //+ CHAIN0 CSEL ADC channel selection
	HWTS0 TRIG4_CHAIN_1_0 = 0xFF << 4  //+ CHAIN0 HWTS ADC hardware trigger selection
	B2B0  TRIG4_CHAIN_1_0 = 0x01 << 12 //+ CHAIN0 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE0   TRIG4_CHAIN_1_0 = 0x03 << 13 //+ CHAIN0 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
	CSEL1 TRIG4_CHAIN_1_0 = 0x0F << 16 //+ CHAIN1 CSEL ADC channel selection
	HWTS1 TRIG4_CHAIN_1_0 = 0xFF << 20 //+ CHAIN1 HWTS ADC hardware trigger selection
	B2B1  TRIG4_CHAIN_1_0 = 0x01 << 28 //+ CHAIN1 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE1   TRIG4_CHAIN_1_0 = 0x03 << 29 //+ CHAIN1 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
)

const (
	CSEL0n = 0
	HWTS0n = 4
	B2B0n  = 12
	IE0n   = 13
	CSEL1n = 16
	HWTS1n = 20
	B2B1n  = 28
	IE1n   = 29
)

const (
	CSEL2 TRIG4_CHAIN_3_2 = 0x0F << 0  //+ CHAIN2 CSEL
	HWTS2 TRIG4_CHAIN_3_2 = 0xFF << 4  //+ CHAIN2 HWTS
	B2B2  TRIG4_CHAIN_3_2 = 0x01 << 12 //+ CHAIN2 B2B
	IE2   TRIG4_CHAIN_3_2 = 0x03 << 13 //+ CHAIN2 IE
	CSEL3 TRIG4_CHAIN_3_2 = 0x0F << 16 //+ CHAIN3 CSEL
	HWTS3 TRIG4_CHAIN_3_2 = 0xFF << 20 //+ CHAIN3 HWTS
	B2B3  TRIG4_CHAIN_3_2 = 0x01 << 28 //+ CHAIN3 B2B
	IE3   TRIG4_CHAIN_3_2 = 0x03 << 29 //+ CHAIN3 IE
)

const (
	CSEL2n = 0
	HWTS2n = 4
	B2B2n  = 12
	IE2n   = 13
	CSEL3n = 16
	HWTS3n = 20
	B2B3n  = 28
	IE3n   = 29
)

const (
	CSEL4 TRIG4_CHAIN_5_4 = 0x0F << 0  //+ CHAIN4 CSEL
	HWTS4 TRIG4_CHAIN_5_4 = 0xFF << 4  //+ CHAIN4 HWTS
	B2B4  TRIG4_CHAIN_5_4 = 0x01 << 12 //+ CHAIN4 B2B
	IE4   TRIG4_CHAIN_5_4 = 0x03 << 13 //+ CHAIN4 IE
	CSEL5 TRIG4_CHAIN_5_4 = 0x0F << 16 //+ CHAIN5 CSEL
	HWTS5 TRIG4_CHAIN_5_4 = 0xFF << 20 //+ CHAIN5 HWTS
	B2B5  TRIG4_CHAIN_5_4 = 0x01 << 28 //+ CHAIN5 B2B
	IE5   TRIG4_CHAIN_5_4 = 0x03 << 29 //+ CHAIN5 IE
)

const (
	CSEL4n = 0
	HWTS4n = 4
	B2B4n  = 12
	IE4n   = 13
	CSEL5n = 16
	HWTS5n = 20
	B2B5n  = 28
	IE5n   = 29
)

const (
	CSEL6 TRIG4_CHAIN_7_6 = 0x0F << 0  //+ CHAIN6 CSEL
	HWTS6 TRIG4_CHAIN_7_6 = 0xFF << 4  //+ CHAIN6 HWTS
	B2B6  TRIG4_CHAIN_7_6 = 0x01 << 12 //+ CHAIN6 B2B
	IE6   TRIG4_CHAIN_7_6 = 0x03 << 13 //+ CHAIN6 IE
	CSEL7 TRIG4_CHAIN_7_6 = 0x0F << 16 //+ CHAIN7 CSEL
	HWTS7 TRIG4_CHAIN_7_6 = 0xFF << 20 //+ CHAIN7 HWTS
	B2B7  TRIG4_CHAIN_7_6 = 0x01 << 28 //+ CHAIN7 B2B
	IE7   TRIG4_CHAIN_7_6 = 0x03 << 29 //+ CHAIN7 IE
)

const (
	CSEL6n = 0
	HWTS6n = 4
	B2B6n  = 12
	IE6n   = 13
	CSEL7n = 16
	HWTS7n = 20
	B2B7n  = 28
	IE7n   = 29
)

const (
	DATA0 TRIG4_RESULT_1_0 = 0xFFF << 0  //+ Result DATA0
	DATA1 TRIG4_RESULT_1_0 = 0xFFF << 16 //+ Result DATA1
)

const (
	DATA0n = 0
	DATA1n = 16
)

const (
	DATA2 TRIG4_RESULT_3_2 = 0xFFF << 0  //+ Result DATA2
	DATA3 TRIG4_RESULT_3_2 = 0xFFF << 16 //+ Result DATA3
)

const (
	DATA2n = 0
	DATA3n = 16
)

const (
	DATA4 TRIG4_RESULT_5_4 = 0xFFF << 0  //+ Result DATA4
	DATA5 TRIG4_RESULT_5_4 = 0xFFF << 16 //+ Result DATA5
)

const (
	DATA4n = 0
	DATA5n = 16
)

const (
	DATA6 TRIG4_RESULT_7_6 = 0xFFF << 0  //+ Result DATA6
	DATA7 TRIG4_RESULT_7_6 = 0xFFF << 16 //+ Result DATA7
)

const (
	DATA6n = 0
	DATA7n = 16
)

const (
	SW_TRIG       TRIG5_CTRL = 0x01 << 0  //+ Software write 1 as the TRIGGER
	TRIG_MODE     TRIG5_CTRL = 0x01 << 4  //+ TRIG mode register. 1'b0: hardware trigger. 1'b1: software trigger.
	TRIG_CHAIN    TRIG5_CTRL = 0x07 << 8  //+ TRIG chain length to the ADC. 0: Trig length is 1; ... 7: Trig length is 8;
	TRIG_PRIORITY TRIG5_CTRL = 0x07 << 12 //+ External trigger priority, 7 is highest, 0 is lowest .
	SYNC_MODE     TRIG5_CTRL = 0x01 << 16 //+ TRIG mode control . 1'b0: Disable sync mode; 1'b1: Enable sync mode
)

const (
	SW_TRIGn       = 0
	TRIG_MODEn     = 4
	TRIG_CHAINn    = 8
	TRIG_PRIORITYn = 12
	SYNC_MODEn     = 16
)

const (
	INIT_DELAY      TRIG5_COUNTER = 0xFFFF << 0  //+ TRIGGER initial delay counter
	SAMPLE_INTERVAL TRIG5_COUNTER = 0xFFFF << 16 //+ TRIGGER sampling interval counter
)

const (
	INIT_DELAYn      = 0
	SAMPLE_INTERVALn = 16
)

const (
	CSEL0 TRIG5_CHAIN_1_0 = 0x0F << 0  //+ CHAIN0 CSEL ADC channel selection
	HWTS0 TRIG5_CHAIN_1_0 = 0xFF << 4  //+ CHAIN0 HWTS ADC hardware trigger selection
	B2B0  TRIG5_CHAIN_1_0 = 0x01 << 12 //+ CHAIN0 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE0   TRIG5_CHAIN_1_0 = 0x03 << 13 //+ CHAIN0 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
	CSEL1 TRIG5_CHAIN_1_0 = 0x0F << 16 //+ CHAIN1 CSEL ADC channel selection
	HWTS1 TRIG5_CHAIN_1_0 = 0xFF << 20 //+ CHAIN1 HWTS ADC hardware trigger selection
	B2B1  TRIG5_CHAIN_1_0 = 0x01 << 28 //+ CHAIN1 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE1   TRIG5_CHAIN_1_0 = 0x03 << 29 //+ CHAIN1 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
)

const (
	CSEL0n = 0
	HWTS0n = 4
	B2B0n  = 12
	IE0n   = 13
	CSEL1n = 16
	HWTS1n = 20
	B2B1n  = 28
	IE1n   = 29
)

const (
	CSEL2 TRIG5_CHAIN_3_2 = 0x0F << 0  //+ CHAIN2 CSEL
	HWTS2 TRIG5_CHAIN_3_2 = 0xFF << 4  //+ CHAIN2 HWTS
	B2B2  TRIG5_CHAIN_3_2 = 0x01 << 12 //+ CHAIN2 B2B
	IE2   TRIG5_CHAIN_3_2 = 0x03 << 13 //+ CHAIN2 IE
	CSEL3 TRIG5_CHAIN_3_2 = 0x0F << 16 //+ CHAIN3 CSEL
	HWTS3 TRIG5_CHAIN_3_2 = 0xFF << 20 //+ CHAIN3 HWTS
	B2B3  TRIG5_CHAIN_3_2 = 0x01 << 28 //+ CHAIN3 B2B
	IE3   TRIG5_CHAIN_3_2 = 0x03 << 29 //+ CHAIN3 IE
)

const (
	CSEL2n = 0
	HWTS2n = 4
	B2B2n  = 12
	IE2n   = 13
	CSEL3n = 16
	HWTS3n = 20
	B2B3n  = 28
	IE3n   = 29
)

const (
	CSEL4 TRIG5_CHAIN_5_4 = 0x0F << 0  //+ CHAIN4 CSEL
	HWTS4 TRIG5_CHAIN_5_4 = 0xFF << 4  //+ CHAIN4 HWTS
	B2B4  TRIG5_CHAIN_5_4 = 0x01 << 12 //+ CHAIN4 B2B
	IE4   TRIG5_CHAIN_5_4 = 0x03 << 13 //+ CHAIN4 IE
	CSEL5 TRIG5_CHAIN_5_4 = 0x0F << 16 //+ CHAIN5 CSEL
	HWTS5 TRIG5_CHAIN_5_4 = 0xFF << 20 //+ CHAIN5 HWTS
	B2B5  TRIG5_CHAIN_5_4 = 0x01 << 28 //+ CHAIN5 B2B
	IE5   TRIG5_CHAIN_5_4 = 0x03 << 29 //+ CHAIN5 IE
)

const (
	CSEL4n = 0
	HWTS4n = 4
	B2B4n  = 12
	IE4n   = 13
	CSEL5n = 16
	HWTS5n = 20
	B2B5n  = 28
	IE5n   = 29
)

const (
	CSEL6 TRIG5_CHAIN_7_6 = 0x0F << 0  //+ CHAIN6 CSEL
	HWTS6 TRIG5_CHAIN_7_6 = 0xFF << 4  //+ CHAIN6 HWTS
	B2B6  TRIG5_CHAIN_7_6 = 0x01 << 12 //+ CHAIN6 B2B
	IE6   TRIG5_CHAIN_7_6 = 0x03 << 13 //+ CHAIN6 IE
	CSEL7 TRIG5_CHAIN_7_6 = 0x0F << 16 //+ CHAIN7 CSEL
	HWTS7 TRIG5_CHAIN_7_6 = 0xFF << 20 //+ CHAIN7 HWTS
	B2B7  TRIG5_CHAIN_7_6 = 0x01 << 28 //+ CHAIN7 B2B
	IE7   TRIG5_CHAIN_7_6 = 0x03 << 29 //+ CHAIN7 IE
)

const (
	CSEL6n = 0
	HWTS6n = 4
	B2B6n  = 12
	IE6n   = 13
	CSEL7n = 16
	HWTS7n = 20
	B2B7n  = 28
	IE7n   = 29
)

const (
	DATA0 TRIG5_RESULT_1_0 = 0xFFF << 0  //+ Result DATA0
	DATA1 TRIG5_RESULT_1_0 = 0xFFF << 16 //+ Result DATA1
)

const (
	DATA0n = 0
	DATA1n = 16
)

const (
	DATA2 TRIG5_RESULT_3_2 = 0xFFF << 0  //+ Result DATA2
	DATA3 TRIG5_RESULT_3_2 = 0xFFF << 16 //+ Result DATA3
)

const (
	DATA2n = 0
	DATA3n = 16
)

const (
	DATA4 TRIG5_RESULT_5_4 = 0xFFF << 0  //+ Result DATA4
	DATA5 TRIG5_RESULT_5_4 = 0xFFF << 16 //+ Result DATA5
)

const (
	DATA4n = 0
	DATA5n = 16
)

const (
	DATA6 TRIG5_RESULT_7_6 = 0xFFF << 0  //+ Result DATA6
	DATA7 TRIG5_RESULT_7_6 = 0xFFF << 16 //+ Result DATA7
)

const (
	DATA6n = 0
	DATA7n = 16
)

const (
	SW_TRIG       TRIG6_CTRL = 0x01 << 0  //+ Software write 1 as the TRIGGER. This register is self-clearing.
	TRIG_MODE     TRIG6_CTRL = 0x01 << 4  //+ TRIG mode register. 1'b0: hardware trigger. 1'b1: software trigger.
	TRIG_CHAIN    TRIG6_CTRL = 0x07 << 8  //+ TRIG chain length to the ADC. 0: Trig length is 1; ... 7: Trig length is 8;
	TRIG_PRIORITY TRIG6_CTRL = 0x07 << 12 //+ External trigger priority, 7 is highest, 0 is lowest .
	SYNC_MODE     TRIG6_CTRL = 0x01 << 16 //+ TRIG mode control . 1'b0: Disable sync mode; 1'b1: Enable sync mode
)

const (
	SW_TRIGn       = 0
	TRIG_MODEn     = 4
	TRIG_CHAINn    = 8
	TRIG_PRIORITYn = 12
	SYNC_MODEn     = 16
)

const (
	INIT_DELAY      TRIG6_COUNTER = 0xFFFF << 0  //+ TRIGGER initial delay counter
	SAMPLE_INTERVAL TRIG6_COUNTER = 0xFFFF << 16 //+ TRIGGER sampling interval counter
)

const (
	INIT_DELAYn      = 0
	SAMPLE_INTERVALn = 16
)

const (
	CSEL0 TRIG6_CHAIN_1_0 = 0x0F << 0  //+ CHAIN0 CSEL ADC channel selection
	HWTS0 TRIG6_CHAIN_1_0 = 0xFF << 4  //+ CHAIN0 HWTS ADC hardware trigger selection
	B2B0  TRIG6_CHAIN_1_0 = 0x01 << 12 //+ CHAIN0 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE0   TRIG6_CHAIN_1_0 = 0x03 << 13 //+ CHAIN0 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
	CSEL1 TRIG6_CHAIN_1_0 = 0x0F << 16 //+ CHAIN1 CSEL ADC channel selection
	HWTS1 TRIG6_CHAIN_1_0 = 0xFF << 20 //+ CHAIN1 HWTS ADC hardware trigger selection
	B2B1  TRIG6_CHAIN_1_0 = 0x01 << 28 //+ CHAIN1 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE1   TRIG6_CHAIN_1_0 = 0x03 << 29 //+ CHAIN1 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
)

const (
	CSEL0n = 0
	HWTS0n = 4
	B2B0n  = 12
	IE0n   = 13
	CSEL1n = 16
	HWTS1n = 20
	B2B1n  = 28
	IE1n   = 29
)

const (
	CSEL2 TRIG6_CHAIN_3_2 = 0x0F << 0  //+ CHAIN2 CSEL
	HWTS2 TRIG6_CHAIN_3_2 = 0xFF << 4  //+ CHAIN2 HWTS
	B2B2  TRIG6_CHAIN_3_2 = 0x01 << 12 //+ CHAIN2 B2B
	IE2   TRIG6_CHAIN_3_2 = 0x03 << 13 //+ CHAIN2 IE
	CSEL3 TRIG6_CHAIN_3_2 = 0x0F << 16 //+ CHAIN3 CSEL
	HWTS3 TRIG6_CHAIN_3_2 = 0xFF << 20 //+ CHAIN3 HWTS
	B2B3  TRIG6_CHAIN_3_2 = 0x01 << 28 //+ CHAIN3 B2B
	IE3   TRIG6_CHAIN_3_2 = 0x03 << 29 //+ CHAIN3 IE
)

const (
	CSEL2n = 0
	HWTS2n = 4
	B2B2n  = 12
	IE2n   = 13
	CSEL3n = 16
	HWTS3n = 20
	B2B3n  = 28
	IE3n   = 29
)

const (
	CSEL4 TRIG6_CHAIN_5_4 = 0x0F << 0  //+ CHAIN4 CSEL
	HWTS4 TRIG6_CHAIN_5_4 = 0xFF << 4  //+ CHAIN4 HWTS
	B2B4  TRIG6_CHAIN_5_4 = 0x01 << 12 //+ CHAIN4 B2B
	IE4   TRIG6_CHAIN_5_4 = 0x03 << 13 //+ CHAIN4 IE
	CSEL5 TRIG6_CHAIN_5_4 = 0x0F << 16 //+ CHAIN5 CSEL
	HWTS5 TRIG6_CHAIN_5_4 = 0xFF << 20 //+ CHAIN5 HWTS
	B2B5  TRIG6_CHAIN_5_4 = 0x01 << 28 //+ CHAIN5 B2B
	IE5   TRIG6_CHAIN_5_4 = 0x03 << 29 //+ CHAIN5 IE
)

const (
	CSEL4n = 0
	HWTS4n = 4
	B2B4n  = 12
	IE4n   = 13
	CSEL5n = 16
	HWTS5n = 20
	B2B5n  = 28
	IE5n   = 29
)

const (
	CSEL6 TRIG6_CHAIN_7_6 = 0x0F << 0  //+ CHAIN6 CSEL
	HWTS6 TRIG6_CHAIN_7_6 = 0xFF << 4  //+ CHAIN6 HWTS
	B2B6  TRIG6_CHAIN_7_6 = 0x01 << 12 //+ CHAIN6 B2B
	IE6   TRIG6_CHAIN_7_6 = 0x03 << 13 //+ CHAIN6 IE
	CSEL7 TRIG6_CHAIN_7_6 = 0x0F << 16 //+ CHAIN7 CSEL
	HWTS7 TRIG6_CHAIN_7_6 = 0xFF << 20 //+ CHAIN7 HWTS
	B2B7  TRIG6_CHAIN_7_6 = 0x01 << 28 //+ CHAIN7 B2B
	IE7   TRIG6_CHAIN_7_6 = 0x03 << 29 //+ CHAIN7 IE
)

const (
	CSEL6n = 0
	HWTS6n = 4
	B2B6n  = 12
	IE6n   = 13
	CSEL7n = 16
	HWTS7n = 20
	B2B7n  = 28
	IE7n   = 29
)

const (
	DATA0 TRIG6_RESULT_1_0 = 0xFFF << 0  //+ Result DATA0
	DATA1 TRIG6_RESULT_1_0 = 0xFFF << 16 //+ Result DATA1
)

const (
	DATA0n = 0
	DATA1n = 16
)

const (
	DATA2 TRIG6_RESULT_3_2 = 0xFFF << 0  //+ Result DATA2
	DATA3 TRIG6_RESULT_3_2 = 0xFFF << 16 //+ Result DATA3
)

const (
	DATA2n = 0
	DATA3n = 16
)

const (
	DATA4 TRIG6_RESULT_5_4 = 0xFFF << 0  //+ Result DATA4
	DATA5 TRIG6_RESULT_5_4 = 0xFFF << 16 //+ Result DATA5
)

const (
	DATA4n = 0
	DATA5n = 16
)

const (
	DATA6 TRIG6_RESULT_7_6 = 0xFFF << 0  //+ Result DATA6
	DATA7 TRIG6_RESULT_7_6 = 0xFFF << 16 //+ Result DATA7
)

const (
	DATA6n = 0
	DATA7n = 16
)

const (
	SW_TRIG       TRIG7_CTRL = 0x01 << 0  //+ Software write 1 as the TRIGGER. This register is self-clearing.
	TRIG_MODE     TRIG7_CTRL = 0x01 << 4  //+ TRIG mode register. 1'b0: hardware trigger. 1'b1: software trigger.
	TRIG_CHAIN    TRIG7_CTRL = 0x07 << 8  //+ TRIG chain length to the ADC. 0: Trig length is 1; ... 7: Trig length is 8;
	TRIG_PRIORITY TRIG7_CTRL = 0x07 << 12 //+ External trigger priority, 7 is highest, 0 is lowest .
	SYNC_MODE     TRIG7_CTRL = 0x01 << 16 //+ TRIG mode control . 1'b0: Disable sync mode; 1'b1: Enable sync mode
)

const (
	SW_TRIGn       = 0
	TRIG_MODEn     = 4
	TRIG_CHAINn    = 8
	TRIG_PRIORITYn = 12
	SYNC_MODEn     = 16
)

const (
	INIT_DELAY      TRIG7_COUNTER = 0xFFFF << 0  //+ TRIGGER initial delay counter
	SAMPLE_INTERVAL TRIG7_COUNTER = 0xFFFF << 16 //+ TRIGGER sampling interval counter
)

const (
	INIT_DELAYn      = 0
	SAMPLE_INTERVALn = 16
)

const (
	CSEL0 TRIG7_CHAIN_1_0 = 0x0F << 0  //+ CHAIN0 CSEL ADC channel selection
	HWTS0 TRIG7_CHAIN_1_0 = 0xFF << 4  //+ CHAIN0 HWTS ADC hardware trigger selection
	B2B0  TRIG7_CHAIN_1_0 = 0x01 << 12 //+ CHAIN0 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE0   TRIG7_CHAIN_1_0 = 0x03 << 13 //+ CHAIN0 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
	CSEL1 TRIG7_CHAIN_1_0 = 0x0F << 16 //+ CHAIN1 CSEL ADC channel selection
	HWTS1 TRIG7_CHAIN_1_0 = 0xFF << 20 //+ CHAIN1 HWTS ADC hardware trigger selection
	B2B1  TRIG7_CHAIN_1_0 = 0x01 << 28 //+ CHAIN1 B2B 1'b0: Disable B2B, wait until interval is reached 1'b1: Enable B2B, back to back ADC trigger
	IE1   TRIG7_CHAIN_1_0 = 0x03 << 29 //+ CHAIN1 IE 2'b00: No interrupt when finished 2'b01: Finished Interrupt on Done0 2'b10: Finished Interrupt on Done1 2'b11: Finished Interrupt on Done2
)

const (
	CSEL0n = 0
	HWTS0n = 4
	B2B0n  = 12
	IE0n   = 13
	CSEL1n = 16
	HWTS1n = 20
	B2B1n  = 28
	IE1n   = 29
)

const (
	CSEL2 TRIG7_CHAIN_3_2 = 0x0F << 0  //+ CHAIN2 CSEL
	HWTS2 TRIG7_CHAIN_3_2 = 0xFF << 4  //+ CHAIN2 HWTS
	B2B2  TRIG7_CHAIN_3_2 = 0x01 << 12 //+ CHAIN2 B2B
	IE2   TRIG7_CHAIN_3_2 = 0x03 << 13 //+ CHAIN2 IE
	CSEL3 TRIG7_CHAIN_3_2 = 0x0F << 16 //+ CHAIN3 CSEL
	HWTS3 TRIG7_CHAIN_3_2 = 0xFF << 20 //+ CHAIN3 HWTS
	B2B3  TRIG7_CHAIN_3_2 = 0x01 << 28 //+ CHAIN3 B2B
	IE3   TRIG7_CHAIN_3_2 = 0x03 << 29 //+ CHAIN3 IE
)

const (
	CSEL2n = 0
	HWTS2n = 4
	B2B2n  = 12
	IE2n   = 13
	CSEL3n = 16
	HWTS3n = 20
	B2B3n  = 28
	IE3n   = 29
)

const (
	CSEL4 TRIG7_CHAIN_5_4 = 0x0F << 0  //+ CHAIN4 CSEL
	HWTS4 TRIG7_CHAIN_5_4 = 0xFF << 4  //+ CHAIN4 HWTS
	B2B4  TRIG7_CHAIN_5_4 = 0x01 << 12 //+ CHAIN4 B2B
	IE4   TRIG7_CHAIN_5_4 = 0x03 << 13 //+ CHAIN4 IE
	CSEL5 TRIG7_CHAIN_5_4 = 0x0F << 16 //+ CHAIN5 CSEL
	HWTS5 TRIG7_CHAIN_5_4 = 0xFF << 20 //+ CHAIN5 HWTS
	B2B5  TRIG7_CHAIN_5_4 = 0x01 << 28 //+ CHAIN5 B2B
	IE5   TRIG7_CHAIN_5_4 = 0x03 << 29 //+ CHAIN5 IE
)

const (
	CSEL4n = 0
	HWTS4n = 4
	B2B4n  = 12
	IE4n   = 13
	CSEL5n = 16
	HWTS5n = 20
	B2B5n  = 28
	IE5n   = 29
)

const (
	CSEL6 TRIG7_CHAIN_7_6 = 0x0F << 0  //+ CHAIN6 CSEL
	HWTS6 TRIG7_CHAIN_7_6 = 0xFF << 4  //+ CHAIN6 HWTS
	B2B6  TRIG7_CHAIN_7_6 = 0x01 << 12 //+ CHAIN6 B2B
	IE6   TRIG7_CHAIN_7_6 = 0x03 << 13 //+ CHAIN6 IE
	CSEL7 TRIG7_CHAIN_7_6 = 0x0F << 16 //+ CHAIN7 CSEL
	HWTS7 TRIG7_CHAIN_7_6 = 0xFF << 20 //+ CHAIN7 HWTS
	B2B7  TRIG7_CHAIN_7_6 = 0x01 << 28 //+ CHAIN7 B2B
	IE7   TRIG7_CHAIN_7_6 = 0x03 << 29 //+ CHAIN7 IE
)

const (
	CSEL6n = 0
	HWTS6n = 4
	B2B6n  = 12
	IE6n   = 13
	CSEL7n = 16
	HWTS7n = 20
	B2B7n  = 28
	IE7n   = 29
)

const (
	DATA0 TRIG7_RESULT_1_0 = 0xFFF << 0  //+ Result DATA0
	DATA1 TRIG7_RESULT_1_0 = 0xFFF << 16 //+ Result DATA1
)

const (
	DATA0n = 0
	DATA1n = 16
)

const (
	DATA2 TRIG7_RESULT_3_2 = 0xFFF << 0  //+ Result DATA2
	DATA3 TRIG7_RESULT_3_2 = 0xFFF << 16 //+ Result DATA3
)

const (
	DATA2n = 0
	DATA3n = 16
)

const (
	DATA4 TRIG7_RESULT_5_4 = 0xFFF << 0  //+ Result DATA4
	DATA5 TRIG7_RESULT_5_4 = 0xFFF << 16 //+ Result DATA5
)

const (
	DATA4n = 0
	DATA5n = 16
)

const (
	DATA6 TRIG7_RESULT_7_6 = 0xFFF << 0  //+ Result DATA6
	DATA7 TRIG7_RESULT_7_6 = 0xFFF << 16 //+ Result DATA7
)

const (
	DATA6n = 0
	DATA7n = 16
)
