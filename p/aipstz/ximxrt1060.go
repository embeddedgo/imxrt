// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build imxrt1060

package aipstz

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	MPR   RMPR
	_     [15]uint32
	OPACR [5]ROPACR
}

func AIPSTZ1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.AIPSTZ1_BASE))) }
func AIPSTZ2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.AIPSTZ2_BASE))) }
func AIPSTZ3() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.AIPSTZ3_BASE))) }
func AIPSTZ4() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.AIPSTZ4_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type MPR uint32

type RMPR struct{ mmio.U32 }

func (r *RMPR) LoadBits(mask MPR) MPR { return MPR(r.U32.LoadBits(uint32(mask))) }
func (r *RMPR) StoreBits(mask, b MPR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMPR) SetBits(mask MPR)      { r.U32.SetBits(uint32(mask)) }
func (r *RMPR) ClearBits(mask MPR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RMPR) Load() MPR             { return MPR(r.U32.Load()) }
func (r *RMPR) Store(b MPR)           { r.U32.Store(uint32(b)) }

type RMMPR struct{ mmio.UM32 }

func (rm RMMPR) Load() MPR   { return MPR(rm.UM32.Load()) }
func (rm RMMPR) Store(b MPR) { rm.UM32.Store(uint32(b)) }

func MPROT5_(p *Periph) RMMPR {
	return RMMPR{mmio.UM32{&p.MPR.U32, uint32(MPROT5)}}
}

func MPROT3_(p *Periph) RMMPR {
	return RMMPR{mmio.UM32{&p.MPR.U32, uint32(MPROT3)}}
}

func MPROT2_(p *Periph) RMMPR {
	return RMMPR{mmio.UM32{&p.MPR.U32, uint32(MPROT2)}}
}

func MPROT1_(p *Periph) RMMPR {
	return RMMPR{mmio.UM32{&p.MPR.U32, uint32(MPROT1)}}
}

func MPROT0_(p *Periph) RMMPR {
	return RMMPR{mmio.UM32{&p.MPR.U32, uint32(MPROT0)}}
}

type OPACR uint32

type ROPACR struct{ mmio.U32 }

func (r *ROPACR) LoadBits(mask OPACR) OPACR { return OPACR(r.U32.LoadBits(uint32(mask))) }
func (r *ROPACR) StoreBits(mask, b OPACR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ROPACR) SetBits(mask OPACR)        { r.U32.SetBits(uint32(mask)) }
func (r *ROPACR) ClearBits(mask OPACR)      { r.U32.ClearBits(uint32(mask)) }
func (r *ROPACR) Load() OPACR               { return OPACR(r.U32.Load()) }
func (r *ROPACR) Store(b OPACR)             { r.U32.Store(uint32(b)) }

type RMOPACR struct{ mmio.UM32 }

func (rm RMOPACR) Load() OPACR   { return OPACR(rm.UM32.Load()) }
func (rm RMOPACR) Store(b OPACR) { rm.UM32.Store(uint32(b)) }

func OPAC7_(p *Periph, n int) RMOPACR {
	return RMOPACR{mmio.UM32{&p.OPACR[n].U32, uint32(OPAC7)}}
}

func OPAC6_(p *Periph, n int) RMOPACR {
	return RMOPACR{mmio.UM32{&p.OPACR[n].U32, uint32(OPAC6)}}
}

func OPAC5_(p *Periph, n int) RMOPACR {
	return RMOPACR{mmio.UM32{&p.OPACR[n].U32, uint32(OPAC5)}}
}

func OPAC4_(p *Periph, n int) RMOPACR {
	return RMOPACR{mmio.UM32{&p.OPACR[n].U32, uint32(OPAC4)}}
}

func OPAC3_(p *Periph, n int) RMOPACR {
	return RMOPACR{mmio.UM32{&p.OPACR[n].U32, uint32(OPAC3)}}
}

func OPAC2_(p *Periph, n int) RMOPACR {
	return RMOPACR{mmio.UM32{&p.OPACR[n].U32, uint32(OPAC2)}}
}

func OPAC1_(p *Periph, n int) RMOPACR {
	return RMOPACR{mmio.UM32{&p.OPACR[n].U32, uint32(OPAC1)}}
}

func OPAC0_(p *Periph, n int) RMOPACR {
	return RMOPACR{mmio.UM32{&p.OPACR[n].U32, uint32(OPAC0)}}
}
