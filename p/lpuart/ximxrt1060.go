// Code generated by xgen -g; DO NOT EDIT.

//go:build imxrt1060

package lpuart

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	VERID  mmio.R32[VERID]
	PARAM  mmio.R32[PARAM]
	GLOBAL mmio.R32[GLOBAL]
	PINCFG mmio.R32[PINCFG]
	BAUD   mmio.R32[BAUD]
	STAT   mmio.R32[STAT]
	CTRL   mmio.R32[CTRL]
	DATA   mmio.R32[DATA]
	MATCH  mmio.R32[MATCH]
	MODIR  mmio.R32[MODIR]
	FIFO   mmio.R32[FIFO]
	WATER  mmio.R32[WATER]
}

func LPUART1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART1_BASE))) }
func LPUART2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART2_BASE))) }
func LPUART3() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART3_BASE))) }
func LPUART4() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART4_BASE))) }
func LPUART5() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART5_BASE))) }
func LPUART6() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART6_BASE))) }
func LPUART7() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART7_BASE))) }
func LPUART8() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART8_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type VERID uint32

func FEATURE_(p *Periph) mmio.RM32[VERID] { return mmio.RM32[VERID]{R: &p.VERID, Mask: FEATURE} }
func MINOR_(p *Periph) mmio.RM32[VERID]   { return mmio.RM32[VERID]{R: &p.VERID, Mask: MINOR} }
func MAJOR_(p *Periph) mmio.RM32[VERID]   { return mmio.RM32[VERID]{R: &p.VERID, Mask: MAJOR} }

type PARAM uint32

func TXFIFO_(p *Periph) mmio.RM32[PARAM] { return mmio.RM32[PARAM]{R: &p.PARAM, Mask: TXFIFO} }
func RXFIFO_(p *Periph) mmio.RM32[PARAM] { return mmio.RM32[PARAM]{R: &p.PARAM, Mask: RXFIFO} }

type GLOBAL uint32

func RST_(p *Periph) mmio.RM32[GLOBAL] { return mmio.RM32[GLOBAL]{R: &p.GLOBAL, Mask: RST} }

type PINCFG uint32

func TRGSEL_(p *Periph) mmio.RM32[PINCFG] { return mmio.RM32[PINCFG]{R: &p.PINCFG, Mask: TRGSEL} }

type BAUD uint32

func SBR_(p *Periph) mmio.RM32[BAUD]       { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: SBR} }
func SBNS_(p *Periph) mmio.RM32[BAUD]      { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: SBNS} }
func RXEDGIE_(p *Periph) mmio.RM32[BAUD]   { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: RXEDGIE} }
func LBKDIE_(p *Periph) mmio.RM32[BAUD]    { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: LBKDIE} }
func RESYNCDIS_(p *Periph) mmio.RM32[BAUD] { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: RESYNCDIS} }
func BOTHEDGE_(p *Periph) mmio.RM32[BAUD]  { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: BOTHEDGE} }
func MATCFG_(p *Periph) mmio.RM32[BAUD]    { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: MATCFG} }
func RIDMAE_(p *Periph) mmio.RM32[BAUD]    { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: RIDMAE} }
func RDMAE_(p *Periph) mmio.RM32[BAUD]     { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: RDMAE} }
func TDMAE_(p *Periph) mmio.RM32[BAUD]     { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: TDMAE} }
func OSR_(p *Periph) mmio.RM32[BAUD]       { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: OSR} }
func M10_(p *Periph) mmio.RM32[BAUD]       { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: M10} }
func MAEN2_(p *Periph) mmio.RM32[BAUD]     { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: MAEN2} }
func MAEN1_(p *Periph) mmio.RM32[BAUD]     { return mmio.RM32[BAUD]{R: &p.BAUD, Mask: MAEN1} }

type STAT uint32

func MA2F_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{R: &p.STAT, Mask: MA2F} }
func MA1F_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{R: &p.STAT, Mask: MA1F} }
func PF_(p *Periph) mmio.RM32[STAT]      { return mmio.RM32[STAT]{R: &p.STAT, Mask: PF} }
func FE_(p *Periph) mmio.RM32[STAT]      { return mmio.RM32[STAT]{R: &p.STAT, Mask: FE} }
func NF_(p *Periph) mmio.RM32[STAT]      { return mmio.RM32[STAT]{R: &p.STAT, Mask: NF} }
func OR_(p *Periph) mmio.RM32[STAT]      { return mmio.RM32[STAT]{R: &p.STAT, Mask: OR} }
func IDLE_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{R: &p.STAT, Mask: IDLE} }
func RDRF_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{R: &p.STAT, Mask: RDRF} }
func TC_(p *Periph) mmio.RM32[STAT]      { return mmio.RM32[STAT]{R: &p.STAT, Mask: TC} }
func TDRE_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{R: &p.STAT, Mask: TDRE} }
func RAF_(p *Periph) mmio.RM32[STAT]     { return mmio.RM32[STAT]{R: &p.STAT, Mask: RAF} }
func LBKDE_(p *Periph) mmio.RM32[STAT]   { return mmio.RM32[STAT]{R: &p.STAT, Mask: LBKDE} }
func BRK13_(p *Periph) mmio.RM32[STAT]   { return mmio.RM32[STAT]{R: &p.STAT, Mask: BRK13} }
func RWUID_(p *Periph) mmio.RM32[STAT]   { return mmio.RM32[STAT]{R: &p.STAT, Mask: RWUID} }
func RXINV_(p *Periph) mmio.RM32[STAT]   { return mmio.RM32[STAT]{R: &p.STAT, Mask: RXINV} }
func MSBF_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{R: &p.STAT, Mask: MSBF} }
func RXEDGIF_(p *Periph) mmio.RM32[STAT] { return mmio.RM32[STAT]{R: &p.STAT, Mask: RXEDGIF} }
func LBKDIF_(p *Periph) mmio.RM32[STAT]  { return mmio.RM32[STAT]{R: &p.STAT, Mask: LBKDIF} }

type CTRL uint32

func PT_(p *Periph) mmio.RM32[CTRL]      { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: PT} }
func PE_(p *Periph) mmio.RM32[CTRL]      { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: PE} }
func ILT_(p *Periph) mmio.RM32[CTRL]     { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: ILT} }
func WAKE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: WAKE} }
func M_(p *Periph) mmio.RM32[CTRL]       { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: M} }
func RSRC_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: RSRC} }
func DOZEEN_(p *Periph) mmio.RM32[CTRL]  { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: DOZEEN} }
func LOOPS_(p *Periph) mmio.RM32[CTRL]   { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: LOOPS} }
func IDLECFG_(p *Periph) mmio.RM32[CTRL] { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: IDLECFG} }
func M7_(p *Periph) mmio.RM32[CTRL]      { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: M7} }
func MA2IE_(p *Periph) mmio.RM32[CTRL]   { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: MA2IE} }
func MA1IE_(p *Periph) mmio.RM32[CTRL]   { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: MA1IE} }
func SBK_(p *Periph) mmio.RM32[CTRL]     { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: SBK} }
func RWU_(p *Periph) mmio.RM32[CTRL]     { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: RWU} }
func RE_(p *Periph) mmio.RM32[CTRL]      { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: RE} }
func TE_(p *Periph) mmio.RM32[CTRL]      { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: TE} }
func ILIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: ILIE} }
func RIE_(p *Periph) mmio.RM32[CTRL]     { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: RIE} }
func TCIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: TCIE} }
func TIE_(p *Periph) mmio.RM32[CTRL]     { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: TIE} }
func PEIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: PEIE} }
func FEIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: FEIE} }
func NEIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: NEIE} }
func ORIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: ORIE} }
func TXINV_(p *Periph) mmio.RM32[CTRL]   { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: TXINV} }
func TXDIR_(p *Periph) mmio.RM32[CTRL]   { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: TXDIR} }
func R9T8_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: R9T8} }
func R8T9_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{R: &p.CTRL, Mask: R8T9} }

type DATA uint32

func R0T0_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{R: &p.DATA, Mask: R0T0} }
func R1T1_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{R: &p.DATA, Mask: R1T1} }
func R2T2_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{R: &p.DATA, Mask: R2T2} }
func R3T3_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{R: &p.DATA, Mask: R3T3} }
func R4T4_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{R: &p.DATA, Mask: R4T4} }
func R5T5_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{R: &p.DATA, Mask: R5T5} }
func R6T6_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{R: &p.DATA, Mask: R6T6} }
func R7T7_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{R: &p.DATA, Mask: R7T7} }
func R8T8_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{R: &p.DATA, Mask: R8T8} }
func R9T9_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{R: &p.DATA, Mask: R9T9} }
func IDLINE_(p *Periph) mmio.RM32[DATA]  { return mmio.RM32[DATA]{R: &p.DATA, Mask: IDLINE} }
func RXEMPT_(p *Periph) mmio.RM32[DATA]  { return mmio.RM32[DATA]{R: &p.DATA, Mask: RXEMPT} }
func FRETSC_(p *Periph) mmio.RM32[DATA]  { return mmio.RM32[DATA]{R: &p.DATA, Mask: FRETSC} }
func PARITYE_(p *Periph) mmio.RM32[DATA] { return mmio.RM32[DATA]{R: &p.DATA, Mask: PARITYE} }
func NOISY_(p *Periph) mmio.RM32[DATA]   { return mmio.RM32[DATA]{R: &p.DATA, Mask: NOISY} }

type MATCH uint32

func MA1_(p *Periph) mmio.RM32[MATCH] { return mmio.RM32[MATCH]{R: &p.MATCH, Mask: MA1} }
func MA2_(p *Periph) mmio.RM32[MATCH] { return mmio.RM32[MATCH]{R: &p.MATCH, Mask: MA2} }

type MODIR uint32

func TXCTSE_(p *Periph) mmio.RM32[MODIR]   { return mmio.RM32[MODIR]{R: &p.MODIR, Mask: TXCTSE} }
func TXRTSE_(p *Periph) mmio.RM32[MODIR]   { return mmio.RM32[MODIR]{R: &p.MODIR, Mask: TXRTSE} }
func TXRTSPOL_(p *Periph) mmio.RM32[MODIR] { return mmio.RM32[MODIR]{R: &p.MODIR, Mask: TXRTSPOL} }
func RXRTSE_(p *Periph) mmio.RM32[MODIR]   { return mmio.RM32[MODIR]{R: &p.MODIR, Mask: RXRTSE} }
func TXCTSC_(p *Periph) mmio.RM32[MODIR]   { return mmio.RM32[MODIR]{R: &p.MODIR, Mask: TXCTSC} }
func TXCTSSRC_(p *Periph) mmio.RM32[MODIR] { return mmio.RM32[MODIR]{R: &p.MODIR, Mask: TXCTSSRC} }
func RTSWATER_(p *Periph) mmio.RM32[MODIR] { return mmio.RM32[MODIR]{R: &p.MODIR, Mask: RTSWATER} }
func TNP_(p *Periph) mmio.RM32[MODIR]      { return mmio.RM32[MODIR]{R: &p.MODIR, Mask: TNP} }
func IREN_(p *Periph) mmio.RM32[MODIR]     { return mmio.RM32[MODIR]{R: &p.MODIR, Mask: IREN} }

type FIFO uint32

func RXFIFOSIZE_(p *Periph) mmio.RM32[FIFO] { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: RXFIFOSIZE} }
func RXFE_(p *Periph) mmio.RM32[FIFO]       { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: RXFE} }
func TXFIFOSIZE_(p *Periph) mmio.RM32[FIFO] { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: TXFIFOSIZE} }
func TXFE_(p *Periph) mmio.RM32[FIFO]       { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: TXFE} }
func RXUFE_(p *Periph) mmio.RM32[FIFO]      { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: RXUFE} }
func TXOFE_(p *Periph) mmio.RM32[FIFO]      { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: TXOFE} }
func RXIDEN_(p *Periph) mmio.RM32[FIFO]     { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: RXIDEN} }
func RXFLUSH_(p *Periph) mmio.RM32[FIFO]    { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: RXFLUSH} }
func TXFLUSH_(p *Periph) mmio.RM32[FIFO]    { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: TXFLUSH} }
func RXUF_(p *Periph) mmio.RM32[FIFO]       { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: RXUF} }
func TXOF_(p *Periph) mmio.RM32[FIFO]       { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: TXOF} }
func RXFEMPT_(p *Periph) mmio.RM32[FIFO]    { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: RXFEMPT} }
func TXFEMPT_(p *Periph) mmio.RM32[FIFO]    { return mmio.RM32[FIFO]{R: &p.FIFO, Mask: TXFEMPT} }

type WATER uint32

func TXWATER_(p *Periph) mmio.RM32[WATER] { return mmio.RM32[WATER]{R: &p.WATER, Mask: TXWATER} }
func TXCOUNT_(p *Periph) mmio.RM32[WATER] { return mmio.RM32[WATER]{R: &p.WATER, Mask: TXCOUNT} }
func RXWATER_(p *Periph) mmio.RM32[WATER] { return mmio.RM32[WATER]{R: &p.WATER, Mask: RXWATER} }
func RXCOUNT_(p *Periph) mmio.RM32[WATER] { return mmio.RM32[WATER]{R: &p.WATER, Mask: RXCOUNT} }
