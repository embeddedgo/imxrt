// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build imxrt1060

package lpuart

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	VERID  mmio.R32[VERID]
	PARAM  mmio.R32[PARAM]
	GLOBAL mmio.R32[GLOBAL]
	PINCFG mmio.R32[PINCFG]
	BAUD   mmio.R32[BAUD]
	STAT   mmio.R32[STAT]
	CTRL   mmio.R32[CTRL]
	DATA   mmio.R32[DATA]
	MATCH  mmio.R32[MATCH]
	MODIR  mmio.R32[MODIR]
	FIFO   mmio.R32[FIFO]
	WATER  mmio.R32[WATER]
}

func LPUART1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART1_BASE))) }
func LPUART2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART2_BASE))) }
func LPUART3() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART3_BASE))) }
func LPUART4() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART4_BASE))) }
func LPUART5() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART5_BASE))) }
func LPUART6() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART6_BASE))) }
func LPUART7() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART7_BASE))) }
func LPUART8() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPUART8_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type VERID uint32

func FEATURE_(p *Periph) mmio.RM32[VERID] { return mmio.RM32[VERID]{&p.VERID, FEATURE} }
func MINOR_(p *Periph) mmio.RM32[VERID]   { return mmio.RM32[VERID]{&p.VERID, MINOR} }
func MAJOR_(p *Periph) mmio.RM32[VERID]   { return mmio.RM32[VERID]{&p.VERID, MAJOR} }

type PARAM uint32

func TXFIFO_(p *Periph) mmio.RM32[PARAM] { return mmio.RM32[PARAM]{&p.PARAM, TXFIFO} }
func RXFIFO_(p *Periph) mmio.RM32[PARAM] { return mmio.RM32[PARAM]{&p.PARAM, RXFIFO} }

type GLOBAL uint32

func RST_(p *Periph) mmio.RM32[GLOBAL] { return mmio.RM32[GLOBAL]{&p.GLOBAL, RST} }

type PINCFG uint32

func TRGSEL_(p *Periph) mmio.RM32[PINCFG] { return mmio.RM32[PINCFG]{&p.PINCFG, TRGSEL} }

type BAUD uint32

func SBR_(p *Periph) mmio.RM32[BAUD]       { return mmio.RM32[BAUD]{&p.BAUD, SBR} }
func SBNS_(p *Periph) mmio.RM32[BAUD]      { return mmio.RM32[BAUD]{&p.BAUD, SBNS} }
func RXEDGIE_(p *Periph) mmio.RM32[BAUD]   { return mmio.RM32[BAUD]{&p.BAUD, RXEDGIE} }
func LBKDIE_(p *Periph) mmio.RM32[BAUD]    { return mmio.RM32[BAUD]{&p.BAUD, LBKDIE} }
func RESYNCDIS_(p *Periph) mmio.RM32[BAUD] { return mmio.RM32[BAUD]{&p.BAUD, RESYNCDIS} }
func BOTHEDGE_(p *Periph) mmio.RM32[BAUD]  { return mmio.RM32[BAUD]{&p.BAUD, BOTHEDGE} }
func MATCFG_(p *Periph) mmio.RM32[BAUD]    { return mmio.RM32[BAUD]{&p.BAUD, MATCFG} }
func RIDMAE_(p *Periph) mmio.RM32[BAUD]    { return mmio.RM32[BAUD]{&p.BAUD, RIDMAE} }
func RDMAE_(p *Periph) mmio.RM32[BAUD]     { return mmio.RM32[BAUD]{&p.BAUD, RDMAE} }
func TDMAE_(p *Periph) mmio.RM32[BAUD]     { return mmio.RM32[BAUD]{&p.BAUD, TDMAE} }
func OSR_(p *Periph) mmio.RM32[BAUD]       { return mmio.RM32[BAUD]{&p.BAUD, OSR} }
func M10_(p *Periph) mmio.RM32[BAUD]       { return mmio.RM32[BAUD]{&p.BAUD, M10} }
func MAEN2_(p *Periph) mmio.RM32[BAUD]     { return mmio.RM32[BAUD]{&p.BAUD, MAEN2} }
func MAEN1_(p *Periph) mmio.RM32[BAUD]     { return mmio.RM32[BAUD]{&p.BAUD, MAEN1} }

type STAT uint32

func MA2F_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{&p.STAT, MA2F} }
func MA1F_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{&p.STAT, MA1F} }
func PF_(p *Periph) mmio.RM32[STAT]      { return mmio.RM32[STAT]{&p.STAT, PF} }
func FE_(p *Periph) mmio.RM32[STAT]      { return mmio.RM32[STAT]{&p.STAT, FE} }
func NF_(p *Periph) mmio.RM32[STAT]      { return mmio.RM32[STAT]{&p.STAT, NF} }
func OR_(p *Periph) mmio.RM32[STAT]      { return mmio.RM32[STAT]{&p.STAT, OR} }
func IDLE_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{&p.STAT, IDLE} }
func RDRF_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{&p.STAT, RDRF} }
func TC_(p *Periph) mmio.RM32[STAT]      { return mmio.RM32[STAT]{&p.STAT, TC} }
func TDRE_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{&p.STAT, TDRE} }
func RAF_(p *Periph) mmio.RM32[STAT]     { return mmio.RM32[STAT]{&p.STAT, RAF} }
func LBKDE_(p *Periph) mmio.RM32[STAT]   { return mmio.RM32[STAT]{&p.STAT, LBKDE} }
func BRK13_(p *Periph) mmio.RM32[STAT]   { return mmio.RM32[STAT]{&p.STAT, BRK13} }
func RWUID_(p *Periph) mmio.RM32[STAT]   { return mmio.RM32[STAT]{&p.STAT, RWUID} }
func RXINV_(p *Periph) mmio.RM32[STAT]   { return mmio.RM32[STAT]{&p.STAT, RXINV} }
func MSBF_(p *Periph) mmio.RM32[STAT]    { return mmio.RM32[STAT]{&p.STAT, MSBF} }
func RXEDGIF_(p *Periph) mmio.RM32[STAT] { return mmio.RM32[STAT]{&p.STAT, RXEDGIF} }
func LBKDIF_(p *Periph) mmio.RM32[STAT]  { return mmio.RM32[STAT]{&p.STAT, LBKDIF} }

type CTRL uint32

func PT_(p *Periph) mmio.RM32[CTRL]      { return mmio.RM32[CTRL]{&p.CTRL, PT} }
func PE_(p *Periph) mmio.RM32[CTRL]      { return mmio.RM32[CTRL]{&p.CTRL, PE} }
func ILT_(p *Periph) mmio.RM32[CTRL]     { return mmio.RM32[CTRL]{&p.CTRL, ILT} }
func WAKE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{&p.CTRL, WAKE} }
func M_(p *Periph) mmio.RM32[CTRL]       { return mmio.RM32[CTRL]{&p.CTRL, M} }
func RSRC_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{&p.CTRL, RSRC} }
func DOZEEN_(p *Periph) mmio.RM32[CTRL]  { return mmio.RM32[CTRL]{&p.CTRL, DOZEEN} }
func LOOPS_(p *Periph) mmio.RM32[CTRL]   { return mmio.RM32[CTRL]{&p.CTRL, LOOPS} }
func IDLECFG_(p *Periph) mmio.RM32[CTRL] { return mmio.RM32[CTRL]{&p.CTRL, IDLECFG} }
func M7_(p *Periph) mmio.RM32[CTRL]      { return mmio.RM32[CTRL]{&p.CTRL, M7} }
func MA2IE_(p *Periph) mmio.RM32[CTRL]   { return mmio.RM32[CTRL]{&p.CTRL, MA2IE} }
func MA1IE_(p *Periph) mmio.RM32[CTRL]   { return mmio.RM32[CTRL]{&p.CTRL, MA1IE} }
func SBK_(p *Periph) mmio.RM32[CTRL]     { return mmio.RM32[CTRL]{&p.CTRL, SBK} }
func RWU_(p *Periph) mmio.RM32[CTRL]     { return mmio.RM32[CTRL]{&p.CTRL, RWU} }
func RE_(p *Periph) mmio.RM32[CTRL]      { return mmio.RM32[CTRL]{&p.CTRL, RE} }
func TE_(p *Periph) mmio.RM32[CTRL]      { return mmio.RM32[CTRL]{&p.CTRL, TE} }
func ILIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{&p.CTRL, ILIE} }
func RIE_(p *Periph) mmio.RM32[CTRL]     { return mmio.RM32[CTRL]{&p.CTRL, RIE} }
func TCIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{&p.CTRL, TCIE} }
func TIE_(p *Periph) mmio.RM32[CTRL]     { return mmio.RM32[CTRL]{&p.CTRL, TIE} }
func PEIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{&p.CTRL, PEIE} }
func FEIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{&p.CTRL, FEIE} }
func NEIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{&p.CTRL, NEIE} }
func ORIE_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{&p.CTRL, ORIE} }
func TXINV_(p *Periph) mmio.RM32[CTRL]   { return mmio.RM32[CTRL]{&p.CTRL, TXINV} }
func TXDIR_(p *Periph) mmio.RM32[CTRL]   { return mmio.RM32[CTRL]{&p.CTRL, TXDIR} }
func R9T8_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{&p.CTRL, R9T8} }
func R8T9_(p *Periph) mmio.RM32[CTRL]    { return mmio.RM32[CTRL]{&p.CTRL, R8T9} }

type DATA uint32

func R0T0_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{&p.DATA, R0T0} }
func R1T1_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{&p.DATA, R1T1} }
func R2T2_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{&p.DATA, R2T2} }
func R3T3_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{&p.DATA, R3T3} }
func R4T4_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{&p.DATA, R4T4} }
func R5T5_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{&p.DATA, R5T5} }
func R6T6_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{&p.DATA, R6T6} }
func R7T7_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{&p.DATA, R7T7} }
func R8T8_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{&p.DATA, R8T8} }
func R9T9_(p *Periph) mmio.RM32[DATA]    { return mmio.RM32[DATA]{&p.DATA, R9T9} }
func IDLINE_(p *Periph) mmio.RM32[DATA]  { return mmio.RM32[DATA]{&p.DATA, IDLINE} }
func RXEMPT_(p *Periph) mmio.RM32[DATA]  { return mmio.RM32[DATA]{&p.DATA, RXEMPT} }
func FRETSC_(p *Periph) mmio.RM32[DATA]  { return mmio.RM32[DATA]{&p.DATA, FRETSC} }
func PARITYE_(p *Periph) mmio.RM32[DATA] { return mmio.RM32[DATA]{&p.DATA, PARITYE} }
func NOISY_(p *Periph) mmio.RM32[DATA]   { return mmio.RM32[DATA]{&p.DATA, NOISY} }

type MATCH uint32

func MA1_(p *Periph) mmio.RM32[MATCH] { return mmio.RM32[MATCH]{&p.MATCH, MA1} }
func MA2_(p *Periph) mmio.RM32[MATCH] { return mmio.RM32[MATCH]{&p.MATCH, MA2} }

type MODIR uint32

func TXCTSE_(p *Periph) mmio.RM32[MODIR]   { return mmio.RM32[MODIR]{&p.MODIR, TXCTSE} }
func TXRTSE_(p *Periph) mmio.RM32[MODIR]   { return mmio.RM32[MODIR]{&p.MODIR, TXRTSE} }
func TXRTSPOL_(p *Periph) mmio.RM32[MODIR] { return mmio.RM32[MODIR]{&p.MODIR, TXRTSPOL} }
func RXRTSE_(p *Periph) mmio.RM32[MODIR]   { return mmio.RM32[MODIR]{&p.MODIR, RXRTSE} }
func TXCTSC_(p *Periph) mmio.RM32[MODIR]   { return mmio.RM32[MODIR]{&p.MODIR, TXCTSC} }
func TXCTSSRC_(p *Periph) mmio.RM32[MODIR] { return mmio.RM32[MODIR]{&p.MODIR, TXCTSSRC} }
func RTSWATER_(p *Periph) mmio.RM32[MODIR] { return mmio.RM32[MODIR]{&p.MODIR, RTSWATER} }
func TNP_(p *Periph) mmio.RM32[MODIR]      { return mmio.RM32[MODIR]{&p.MODIR, TNP} }
func IREN_(p *Periph) mmio.RM32[MODIR]     { return mmio.RM32[MODIR]{&p.MODIR, IREN} }

type FIFO uint32

func RXFIFOSIZE_(p *Periph) mmio.RM32[FIFO] { return mmio.RM32[FIFO]{&p.FIFO, RXFIFOSIZE} }
func RXFE_(p *Periph) mmio.RM32[FIFO]       { return mmio.RM32[FIFO]{&p.FIFO, RXFE} }
func TXFIFOSIZE_(p *Periph) mmio.RM32[FIFO] { return mmio.RM32[FIFO]{&p.FIFO, TXFIFOSIZE} }
func TXFE_(p *Periph) mmio.RM32[FIFO]       { return mmio.RM32[FIFO]{&p.FIFO, TXFE} }
func RXUFE_(p *Periph) mmio.RM32[FIFO]      { return mmio.RM32[FIFO]{&p.FIFO, RXUFE} }
func TXOFE_(p *Periph) mmio.RM32[FIFO]      { return mmio.RM32[FIFO]{&p.FIFO, TXOFE} }
func RXIDEN_(p *Periph) mmio.RM32[FIFO]     { return mmio.RM32[FIFO]{&p.FIFO, RXIDEN} }
func RXFLUSH_(p *Periph) mmio.RM32[FIFO]    { return mmio.RM32[FIFO]{&p.FIFO, RXFLUSH} }
func TXFLUSH_(p *Periph) mmio.RM32[FIFO]    { return mmio.RM32[FIFO]{&p.FIFO, TXFLUSH} }
func RXUF_(p *Periph) mmio.RM32[FIFO]       { return mmio.RM32[FIFO]{&p.FIFO, RXUF} }
func TXOF_(p *Periph) mmio.RM32[FIFO]       { return mmio.RM32[FIFO]{&p.FIFO, TXOF} }
func RXFEMPT_(p *Periph) mmio.RM32[FIFO]    { return mmio.RM32[FIFO]{&p.FIFO, RXFEMPT} }
func TXFEMPT_(p *Periph) mmio.RM32[FIFO]    { return mmio.RM32[FIFO]{&p.FIFO, TXFEMPT} }

type WATER uint32

func TXWATER_(p *Periph) mmio.RM32[WATER] { return mmio.RM32[WATER]{&p.WATER, TXWATER} }
func TXCOUNT_(p *Periph) mmio.RM32[WATER] { return mmio.RM32[WATER]{&p.WATER, TXCOUNT} }
func RXWATER_(p *Periph) mmio.RM32[WATER] { return mmio.RM32[WATER]{&p.WATER, RXWATER} }
func RXCOUNT_(p *Periph) mmio.RM32[WATER] { return mmio.RM32[WATER]{&p.WATER, RXCOUNT} }
