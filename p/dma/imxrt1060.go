// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build imxrt1060

// Package dma provides access to the registers of the DMA peripheral.
//
// Instances:
//
//	DMA0  DMA0_BASE  -  DMA0_DMA16*,DMA1_DMA17*,DMA2_DMA18*,DMA3_DMA19*,DMA4_DMA20*,DMA5_DMA21*,DMA6_DMA22*,DMA7_DMA23*,DMA8_DMA24*,DMA9_DMA25*,DMA10_DMA26*,DMA11_DMA27*,DMA12_DMA28*,DMA13_DMA29*,DMA14_DMA30*,DMA15_DMA31*,DMA_ERROR*
//
// Registers:
//
//	0x000  32  CR                                                                                              Control Register
//	0x004  32  ES                                                                                              Error Status Register
//	0x00C  32  ERQ                                                                                             Enable Request Register
//	0x014  32  EEI                                                                                             Enable Error Interrupt Register
//	0x018   8  CEEI(CTRL)                                                                                      Clear Enable Error Interrupt Register
//	0x019   8  SEEI(CTRL)                                                                                      Set Enable Error Interrupt Register
//	0x01A   8  CERQ(CTRL)                                                                                      Clear Enable Request Register
//	0x01B   8  SERQ(CTRL)                                                                                      Set Enable Request Register
//	0x01C   8  CDNE(CTRL)                                                                                      Clear DONE Status Bit Register
//	0x01D   8  SSRT(CTRL)                                                                                      Set START Bit Register
//	0x01E   8  CERR(CTRL)                                                                                      Clear Error Register
//	0x01F   8  CINT(CTRL)                                                                                      Clear Interrupt Request Register
//	0x024  32  INT                                                                                             Interrupt Request Register
//	0x02C  32  ERR                                                                                             Error Register
//	0x034  32  HRS                                                                                             Hardware Request Status Register
//	0x044  32  EARS                                                                                            Enable Asynchronous Request in Stop Register
//	0x100   8  DCHPRI3(DCHPR)                                                                                  Channel n Priority Register
//	0x101   8  DCHPRI2(DCHPR)                                                                                  Channel n Priority Register
//	0x102   8  DCHPRI1(DCHPR)                                                                                  Channel n Priority Register
//	0x103   8  DCHPRI0(DCHPR)                                                                                  Channel n Priority Register
//	0x104   8  DCHPRI7(DCHPR)                                                                                  Channel n Priority Register
//	0x105   8  DCHPRI6(DCHPR)                                                                                  Channel n Priority Register
//	0x106   8  DCHPRI5(DCHPR)                                                                                  Channel n Priority Register
//	0x107   8  DCHPRI4(DCHPR)                                                                                  Channel n Priority Register
//	0x108   8  DCHPRI11(DCHPR)                                                                                 Channel n Priority Register
//	0x109   8  DCHPRI10(DCHPR)                                                                                 Channel n Priority Register
//	0x10A   8  DCHPRI9(DCHPR)                                                                                  Channel n Priority Register
//	0x10B   8  DCHPRI8(DCHPR)                                                                                  Channel n Priority Register
//	0x10C   8  DCHPRI15(DCHPR)                                                                                 Channel n Priority Register
//	0x10D   8  DCHPRI14(DCHPR)                                                                                 Channel n Priority Register
//	0x10E   8  DCHPRI13(DCHPR)                                                                                 Channel n Priority Register
//	0x10F   8  DCHPRI12(DCHPR)                                                                                 Channel n Priority Register
//	0x110   8  DCHPRI19(DCHPR)                                                                                 Channel n Priority Register
//	0x111   8  DCHPRI18(DCHPR)                                                                                 Channel n Priority Register
//	0x112   8  DCHPRI17(DCHPR)                                                                                 Channel n Priority Register
//	0x113   8  DCHPRI16(DCHPR)                                                                                 Channel n Priority Register
//	0x114   8  DCHPRI23(DCHPR)                                                                                 Channel n Priority Register
//	0x115   8  DCHPRI22(DCHPR)                                                                                 Channel n Priority Register
//	0x116   8  DCHPRI21(DCHPR)                                                                                 Channel n Priority Register
//	0x117   8  DCHPRI20(DCHPR)                                                                                 Channel n Priority Register
//	0x118   8  DCHPRI27(DCHPR)                                                                                 Channel n Priority Register
//	0x119   8  DCHPRI26(DCHPR)                                                                                 Channel n Priority Register
//	0x11A   8  DCHPRI25(DCHPR)                                                                                 Channel n Priority Register
//	0x11B   8  DCHPRI24(DCHPR)                                                                                 Channel n Priority Register
//	0x11C   8  DCHPRI31(DCHPR)                                                                                 Channel n Priority Register
//	0x11D   8  DCHPRI30(DCHPR)                                                                                 Channel n Priority Register
//	0x11E   8  DCHPRI29(DCHPR)                                                                                 Channel n Priority Register
//	0x11F   8  DCHPRI28(DCHPR)                                                                                 Channel n Priority Register
//	0x1000 32  TCD{SADDR,ATTR_SOFF,NBYTES_MLNO,ML_NBYTES,DADDR,ELINK_CITER_DOFF,DLASTSGA,ELINK_BITER_CSR}[32]  Transfer Control Descriptors
//
// Import:
//
//	github.com/embeddedgo/imxrt/p/mmap
package dma

const (
	EDBG    CR = 0x01 << 1  //+ Enable Debug
	ERCA    CR = 0x01 << 2  //+ Enable Round Robin Channel Arbitration
	ERGA    CR = 0x01 << 3  //+ Enable Round Robin Group Arbitration
	HOE     CR = 0x01 << 4  //+ Halt On Error
	HALT    CR = 0x01 << 5  //+ Halt DMA Operations
	CLM     CR = 0x01 << 6  //+ Continuous Link Mode
	EMLM    CR = 0x01 << 7  //+ Enable Minor Loop Mapping
	GRP0PRI CR = 0x01 << 8  //+ Channel Group 0 Priority
	GRP1PRI CR = 0x01 << 10 //+ Channel Group 1 Priority
	ECX     CR = 0x01 << 16 //+ Error Cancel Transfer
	CX      CR = 0x01 << 17 //+ Cancel Transfer
	ACT     CR = 0x01 << 31 //+ DMA Active Status
)

const (
	EDBGn    = 1
	ERCAn    = 2
	ERGAn    = 3
	HOEn     = 4
	HALTn    = 5
	CLMn     = 6
	EMLMn    = 7
	GRP0PRIn = 8
	GRP1PRIn = 10
	ECXn     = 16
	CXn      = 17
	ACTn     = 31
)

const (
	DBE ES = 0x01 << 0  //+ Destination Bus Error
	SBE ES = 0x01 << 1  //+ Source Bus Error
	SGE ES = 0x01 << 2  //+ Scatter/Gather Configuration Error
	NCE ES = 0x01 << 3  //+ NBYTES/CITER Configuration Error
	DOE ES = 0x01 << 4  //+ Destination Offset Error
	DAE ES = 0x01 << 5  //+ Destination Address Error
	SOE ES = 0x01 << 6  //+ Source Offset Error
	SAE ES = 0x01 << 7  //+ Source Address Error
	CNE ES = 0x1F << 8  //+ Error Channel Number or Canceled Channel Number
	CPE ES = 0x01 << 14 //+ Channel Priority Error
	GPE ES = 0x01 << 15 //+ Group Priority Error
	CXE ES = 0x01 << 16 //+ Transfer Canceled
	VLD ES = 0x01 << 31 //+ VLD
)

const (
	DBEn = 0
	SBEn = 1
	SGEn = 2
	NCEn = 3
	DOEn = 4
	DAEn = 5
	SOEn = 6
	SAEn = 7
	CNEn = 8
	CPEn = 14
	GPEn = 15
	CXEn = 16
	VLDn = 31
)

const (
	ERQ0  ERQ = 0x01 << 0  //+ Enable DMA Request 0
	ERQ1  ERQ = 0x01 << 1  //+ Enable DMA Request 1
	ERQ2  ERQ = 0x01 << 2  //+ Enable DMA Request 2
	ERQ3  ERQ = 0x01 << 3  //+ Enable DMA Request 3
	ERQ4  ERQ = 0x01 << 4  //+ Enable DMA Request 4
	ERQ5  ERQ = 0x01 << 5  //+ Enable DMA Request 5
	ERQ6  ERQ = 0x01 << 6  //+ Enable DMA Request 6
	ERQ7  ERQ = 0x01 << 7  //+ Enable DMA Request 7
	ERQ8  ERQ = 0x01 << 8  //+ Enable DMA Request 8
	ERQ9  ERQ = 0x01 << 9  //+ Enable DMA Request 9
	ERQ10 ERQ = 0x01 << 10 //+ Enable DMA Request 10
	ERQ11 ERQ = 0x01 << 11 //+ Enable DMA Request 11
	ERQ12 ERQ = 0x01 << 12 //+ Enable DMA Request 12
	ERQ13 ERQ = 0x01 << 13 //+ Enable DMA Request 13
	ERQ14 ERQ = 0x01 << 14 //+ Enable DMA Request 14
	ERQ15 ERQ = 0x01 << 15 //+ Enable DMA Request 15
	ERQ16 ERQ = 0x01 << 16 //+ Enable DMA Request 16
	ERQ17 ERQ = 0x01 << 17 //+ Enable DMA Request 17
	ERQ18 ERQ = 0x01 << 18 //+ Enable DMA Request 18
	ERQ19 ERQ = 0x01 << 19 //+ Enable DMA Request 19
	ERQ20 ERQ = 0x01 << 20 //+ Enable DMA Request 20
	ERQ21 ERQ = 0x01 << 21 //+ Enable DMA Request 21
	ERQ22 ERQ = 0x01 << 22 //+ Enable DMA Request 22
	ERQ23 ERQ = 0x01 << 23 //+ Enable DMA Request 23
	ERQ24 ERQ = 0x01 << 24 //+ Enable DMA Request 24
	ERQ25 ERQ = 0x01 << 25 //+ Enable DMA Request 25
	ERQ26 ERQ = 0x01 << 26 //+ Enable DMA Request 26
	ERQ27 ERQ = 0x01 << 27 //+ Enable DMA Request 27
	ERQ28 ERQ = 0x01 << 28 //+ Enable DMA Request 28
	ERQ29 ERQ = 0x01 << 29 //+ Enable DMA Request 29
	ERQ30 ERQ = 0x01 << 30 //+ Enable DMA Request 30
	ERQ31 ERQ = 0x01 << 31 //+ Enable DMA Request 31
)

const (
	ERQ0n  = 0
	ERQ1n  = 1
	ERQ2n  = 2
	ERQ3n  = 3
	ERQ4n  = 4
	ERQ5n  = 5
	ERQ6n  = 6
	ERQ7n  = 7
	ERQ8n  = 8
	ERQ9n  = 9
	ERQ10n = 10
	ERQ11n = 11
	ERQ12n = 12
	ERQ13n = 13
	ERQ14n = 14
	ERQ15n = 15
	ERQ16n = 16
	ERQ17n = 17
	ERQ18n = 18
	ERQ19n = 19
	ERQ20n = 20
	ERQ21n = 21
	ERQ22n = 22
	ERQ23n = 23
	ERQ24n = 24
	ERQ25n = 25
	ERQ26n = 26
	ERQ27n = 27
	ERQ28n = 28
	ERQ29n = 29
	ERQ30n = 30
	ERQ31n = 31
)

const (
	EEI0  EEI = 0x01 << 0  //+ Enable Error Interrupt 0
	EEI1  EEI = 0x01 << 1  //+ Enable Error Interrupt 1
	EEI2  EEI = 0x01 << 2  //+ Enable Error Interrupt 2
	EEI3  EEI = 0x01 << 3  //+ Enable Error Interrupt 3
	EEI4  EEI = 0x01 << 4  //+ Enable Error Interrupt 4
	EEI5  EEI = 0x01 << 5  //+ Enable Error Interrupt 5
	EEI6  EEI = 0x01 << 6  //+ Enable Error Interrupt 6
	EEI7  EEI = 0x01 << 7  //+ Enable Error Interrupt 7
	EEI8  EEI = 0x01 << 8  //+ Enable Error Interrupt 8
	EEI9  EEI = 0x01 << 9  //+ Enable Error Interrupt 9
	EEI10 EEI = 0x01 << 10 //+ Enable Error Interrupt 10
	EEI11 EEI = 0x01 << 11 //+ Enable Error Interrupt 11
	EEI12 EEI = 0x01 << 12 //+ Enable Error Interrupt 12
	EEI13 EEI = 0x01 << 13 //+ Enable Error Interrupt 13
	EEI14 EEI = 0x01 << 14 //+ Enable Error Interrupt 14
	EEI15 EEI = 0x01 << 15 //+ Enable Error Interrupt 15
	EEI16 EEI = 0x01 << 16 //+ Enable Error Interrupt 16
	EEI17 EEI = 0x01 << 17 //+ Enable Error Interrupt 17
	EEI18 EEI = 0x01 << 18 //+ Enable Error Interrupt 18
	EEI19 EEI = 0x01 << 19 //+ Enable Error Interrupt 19
	EEI20 EEI = 0x01 << 20 //+ Enable Error Interrupt 20
	EEI21 EEI = 0x01 << 21 //+ Enable Error Interrupt 21
	EEI22 EEI = 0x01 << 22 //+ Enable Error Interrupt 22
	EEI23 EEI = 0x01 << 23 //+ Enable Error Interrupt 23
	EEI24 EEI = 0x01 << 24 //+ Enable Error Interrupt 24
	EEI25 EEI = 0x01 << 25 //+ Enable Error Interrupt 25
	EEI26 EEI = 0x01 << 26 //+ Enable Error Interrupt 26
	EEI27 EEI = 0x01 << 27 //+ Enable Error Interrupt 27
	EEI28 EEI = 0x01 << 28 //+ Enable Error Interrupt 28
	EEI29 EEI = 0x01 << 29 //+ Enable Error Interrupt 29
	EEI30 EEI = 0x01 << 30 //+ Enable Error Interrupt 30
	EEI31 EEI = 0x01 << 31 //+ Enable Error Interrupt 31
)

const (
	EEI0n  = 0
	EEI1n  = 1
	EEI2n  = 2
	EEI3n  = 3
	EEI4n  = 4
	EEI5n  = 5
	EEI6n  = 6
	EEI7n  = 7
	EEI8n  = 8
	EEI9n  = 9
	EEI10n = 10
	EEI11n = 11
	EEI12n = 12
	EEI13n = 13
	EEI14n = 14
	EEI15n = 15
	EEI16n = 16
	EEI17n = 17
	EEI18n = 18
	EEI19n = 19
	EEI20n = 20
	EEI21n = 21
	EEI22n = 22
	EEI23n = 23
	EEI24n = 24
	EEI25n = 25
	EEI26n = 26
	EEI27n = 27
	EEI28n = 28
	EEI29n = 29
	EEI30n = 30
	EEI31n = 31
)

const (
	CMASK CTRL = 0x1F << 0 //+ Affect the specified channels
	CALL  CTRL = 0x01 << 6 //+ Affect all channels
	NOP   CTRL = 0x01 << 7 //+ Allows 32-bit write to selected CTRL registers
)

const (
	CMASKn = 0
	CALLn  = 6
	NOPn   = 7
)

const (
	INT0  INT = 0x01 << 0  //+ Interrupt Request 0
	INT1  INT = 0x01 << 1  //+ Interrupt Request 1
	INT2  INT = 0x01 << 2  //+ Interrupt Request 2
	INT3  INT = 0x01 << 3  //+ Interrupt Request 3
	INT4  INT = 0x01 << 4  //+ Interrupt Request 4
	INT5  INT = 0x01 << 5  //+ Interrupt Request 5
	INT6  INT = 0x01 << 6  //+ Interrupt Request 6
	INT7  INT = 0x01 << 7  //+ Interrupt Request 7
	INT8  INT = 0x01 << 8  //+ Interrupt Request 8
	INT9  INT = 0x01 << 9  //+ Interrupt Request 9
	INT10 INT = 0x01 << 10 //+ Interrupt Request 10
	INT11 INT = 0x01 << 11 //+ Interrupt Request 11
	INT12 INT = 0x01 << 12 //+ Interrupt Request 12
	INT13 INT = 0x01 << 13 //+ Interrupt Request 13
	INT14 INT = 0x01 << 14 //+ Interrupt Request 14
	INT15 INT = 0x01 << 15 //+ Interrupt Request 15
	INT16 INT = 0x01 << 16 //+ Interrupt Request 16
	INT17 INT = 0x01 << 17 //+ Interrupt Request 17
	INT18 INT = 0x01 << 18 //+ Interrupt Request 18
	INT19 INT = 0x01 << 19 //+ Interrupt Request 19
	INT20 INT = 0x01 << 20 //+ Interrupt Request 20
	INT21 INT = 0x01 << 21 //+ Interrupt Request 21
	INT22 INT = 0x01 << 22 //+ Interrupt Request 22
	INT23 INT = 0x01 << 23 //+ Interrupt Request 23
	INT24 INT = 0x01 << 24 //+ Interrupt Request 24
	INT25 INT = 0x01 << 25 //+ Interrupt Request 25
	INT26 INT = 0x01 << 26 //+ Interrupt Request 26
	INT27 INT = 0x01 << 27 //+ Interrupt Request 27
	INT28 INT = 0x01 << 28 //+ Interrupt Request 28
	INT29 INT = 0x01 << 29 //+ Interrupt Request 29
	INT30 INT = 0x01 << 30 //+ Interrupt Request 30
	INT31 INT = 0x01 << 31 //+ Interrupt Request 31
)

const (
	INT0n  = 0
	INT1n  = 1
	INT2n  = 2
	INT3n  = 3
	INT4n  = 4
	INT5n  = 5
	INT6n  = 6
	INT7n  = 7
	INT8n  = 8
	INT9n  = 9
	INT10n = 10
	INT11n = 11
	INT12n = 12
	INT13n = 13
	INT14n = 14
	INT15n = 15
	INT16n = 16
	INT17n = 17
	INT18n = 18
	INT19n = 19
	INT20n = 20
	INT21n = 21
	INT22n = 22
	INT23n = 23
	INT24n = 24
	INT25n = 25
	INT26n = 26
	INT27n = 27
	INT28n = 28
	INT29n = 29
	INT30n = 30
	INT31n = 31
)

const (
	ERR0  ERR = 0x01 << 0  //+ Error In Channel 0
	ERR1  ERR = 0x01 << 1  //+ Error In Channel 1
	ERR2  ERR = 0x01 << 2  //+ Error In Channel 2
	ERR3  ERR = 0x01 << 3  //+ Error In Channel 3
	ERR4  ERR = 0x01 << 4  //+ Error In Channel 4
	ERR5  ERR = 0x01 << 5  //+ Error In Channel 5
	ERR6  ERR = 0x01 << 6  //+ Error In Channel 6
	ERR7  ERR = 0x01 << 7  //+ Error In Channel 7
	ERR8  ERR = 0x01 << 8  //+ Error In Channel 8
	ERR9  ERR = 0x01 << 9  //+ Error In Channel 9
	ERR10 ERR = 0x01 << 10 //+ Error In Channel 10
	ERR11 ERR = 0x01 << 11 //+ Error In Channel 11
	ERR12 ERR = 0x01 << 12 //+ Error In Channel 12
	ERR13 ERR = 0x01 << 13 //+ Error In Channel 13
	ERR14 ERR = 0x01 << 14 //+ Error In Channel 14
	ERR15 ERR = 0x01 << 15 //+ Error In Channel 15
	ERR16 ERR = 0x01 << 16 //+ Error In Channel 16
	ERR17 ERR = 0x01 << 17 //+ Error In Channel 17
	ERR18 ERR = 0x01 << 18 //+ Error In Channel 18
	ERR19 ERR = 0x01 << 19 //+ Error In Channel 19
	ERR20 ERR = 0x01 << 20 //+ Error In Channel 20
	ERR21 ERR = 0x01 << 21 //+ Error In Channel 21
	ERR22 ERR = 0x01 << 22 //+ Error In Channel 22
	ERR23 ERR = 0x01 << 23 //+ Error In Channel 23
	ERR24 ERR = 0x01 << 24 //+ Error In Channel 24
	ERR25 ERR = 0x01 << 25 //+ Error In Channel 25
	ERR26 ERR = 0x01 << 26 //+ Error In Channel 26
	ERR27 ERR = 0x01 << 27 //+ Error In Channel 27
	ERR28 ERR = 0x01 << 28 //+ Error In Channel 28
	ERR29 ERR = 0x01 << 29 //+ Error In Channel 29
	ERR30 ERR = 0x01 << 30 //+ Error In Channel 30
	ERR31 ERR = 0x01 << 31 //+ Error In Channel 31
)

const (
	ERR0n  = 0
	ERR1n  = 1
	ERR2n  = 2
	ERR3n  = 3
	ERR4n  = 4
	ERR5n  = 5
	ERR6n  = 6
	ERR7n  = 7
	ERR8n  = 8
	ERR9n  = 9
	ERR10n = 10
	ERR11n = 11
	ERR12n = 12
	ERR13n = 13
	ERR14n = 14
	ERR15n = 15
	ERR16n = 16
	ERR17n = 17
	ERR18n = 18
	ERR19n = 19
	ERR20n = 20
	ERR21n = 21
	ERR22n = 22
	ERR23n = 23
	ERR24n = 24
	ERR25n = 25
	ERR26n = 26
	ERR27n = 27
	ERR28n = 28
	ERR29n = 29
	ERR30n = 30
	ERR31n = 31
)

const (
	HRS0  HRS = 0x01 << 0  //+ Hardware Request Status Channel 0
	HRS1  HRS = 0x01 << 1  //+ Hardware Request Status Channel 1
	HRS2  HRS = 0x01 << 2  //+ Hardware Request Status Channel 2
	HRS3  HRS = 0x01 << 3  //+ Hardware Request Status Channel 3
	HRS4  HRS = 0x01 << 4  //+ Hardware Request Status Channel 4
	HRS5  HRS = 0x01 << 5  //+ Hardware Request Status Channel 5
	HRS6  HRS = 0x01 << 6  //+ Hardware Request Status Channel 6
	HRS7  HRS = 0x01 << 7  //+ Hardware Request Status Channel 7
	HRS8  HRS = 0x01 << 8  //+ Hardware Request Status Channel 8
	HRS9  HRS = 0x01 << 9  //+ Hardware Request Status Channel 9
	HRS10 HRS = 0x01 << 10 //+ Hardware Request Status Channel 10
	HRS11 HRS = 0x01 << 11 //+ Hardware Request Status Channel 11
	HRS12 HRS = 0x01 << 12 //+ Hardware Request Status Channel 12
	HRS13 HRS = 0x01 << 13 //+ Hardware Request Status Channel 13
	HRS14 HRS = 0x01 << 14 //+ Hardware Request Status Channel 14
	HRS15 HRS = 0x01 << 15 //+ Hardware Request Status Channel 15
	HRS16 HRS = 0x01 << 16 //+ Hardware Request Status Channel 16
	HRS17 HRS = 0x01 << 17 //+ Hardware Request Status Channel 17
	HRS18 HRS = 0x01 << 18 //+ Hardware Request Status Channel 18
	HRS19 HRS = 0x01 << 19 //+ Hardware Request Status Channel 19
	HRS20 HRS = 0x01 << 20 //+ Hardware Request Status Channel 20
	HRS21 HRS = 0x01 << 21 //+ Hardware Request Status Channel 21
	HRS22 HRS = 0x01 << 22 //+ Hardware Request Status Channel 22
	HRS23 HRS = 0x01 << 23 //+ Hardware Request Status Channel 23
	HRS24 HRS = 0x01 << 24 //+ Hardware Request Status Channel 24
	HRS25 HRS = 0x01 << 25 //+ Hardware Request Status Channel 25
	HRS26 HRS = 0x01 << 26 //+ Hardware Request Status Channel 26
	HRS27 HRS = 0x01 << 27 //+ Hardware Request Status Channel 27
	HRS28 HRS = 0x01 << 28 //+ Hardware Request Status Channel 28
	HRS29 HRS = 0x01 << 29 //+ Hardware Request Status Channel 29
	HRS30 HRS = 0x01 << 30 //+ Hardware Request Status Channel 30
	HRS31 HRS = 0x01 << 31 //+ Hardware Request Status Channel 31
)

const (
	HRS0n  = 0
	HRS1n  = 1
	HRS2n  = 2
	HRS3n  = 3
	HRS4n  = 4
	HRS5n  = 5
	HRS6n  = 6
	HRS7n  = 7
	HRS8n  = 8
	HRS9n  = 9
	HRS10n = 10
	HRS11n = 11
	HRS12n = 12
	HRS13n = 13
	HRS14n = 14
	HRS15n = 15
	HRS16n = 16
	HRS17n = 17
	HRS18n = 18
	HRS19n = 19
	HRS20n = 20
	HRS21n = 21
	HRS22n = 22
	HRS23n = 23
	HRS24n = 24
	HRS25n = 25
	HRS26n = 26
	HRS27n = 27
	HRS28n = 28
	HRS29n = 29
	HRS30n = 30
	HRS31n = 31
)

const (
	EDREQ_0  EARS = 0x01 << 0  //+ Enable asynchronous DMA request in stop mode for channel 0.
	EDREQ_1  EARS = 0x01 << 1  //+ Enable asynchronous DMA request in stop mode for channel 1.
	EDREQ_2  EARS = 0x01 << 2  //+ Enable asynchronous DMA request in stop mode for channel 2.
	EDREQ_3  EARS = 0x01 << 3  //+ Enable asynchronous DMA request in stop mode for channel 3.
	EDREQ_4  EARS = 0x01 << 4  //+ Enable asynchronous DMA request in stop mode for channel 4
	EDREQ_5  EARS = 0x01 << 5  //+ Enable asynchronous DMA request in stop mode for channel 5
	EDREQ_6  EARS = 0x01 << 6  //+ Enable asynchronous DMA request in stop mode for channel 6
	EDREQ_7  EARS = 0x01 << 7  //+ Enable asynchronous DMA request in stop mode for channel 7
	EDREQ_8  EARS = 0x01 << 8  //+ Enable asynchronous DMA request in stop mode for channel 8
	EDREQ_9  EARS = 0x01 << 9  //+ Enable asynchronous DMA request in stop mode for channel 9
	EDREQ_10 EARS = 0x01 << 10 //+ Enable asynchronous DMA request in stop mode for channel 10
	EDREQ_11 EARS = 0x01 << 11 //+ Enable asynchronous DMA request in stop mode for channel 11
	EDREQ_12 EARS = 0x01 << 12 //+ Enable asynchronous DMA request in stop mode for channel 12
	EDREQ_13 EARS = 0x01 << 13 //+ Enable asynchronous DMA request in stop mode for channel 13
	EDREQ_14 EARS = 0x01 << 14 //+ Enable asynchronous DMA request in stop mode for channel 14
	EDREQ_15 EARS = 0x01 << 15 //+ Enable asynchronous DMA request in stop mode for channel 15
	EDREQ_16 EARS = 0x01 << 16 //+ Enable asynchronous DMA request in stop mode for channel 16
	EDREQ_17 EARS = 0x01 << 17 //+ Enable asynchronous DMA request in stop mode for channel 17
	EDREQ_18 EARS = 0x01 << 18 //+ Enable asynchronous DMA request in stop mode for channel 18
	EDREQ_19 EARS = 0x01 << 19 //+ Enable asynchronous DMA request in stop mode for channel 19
	EDREQ_20 EARS = 0x01 << 20 //+ Enable asynchronous DMA request in stop mode for channel 20
	EDREQ_21 EARS = 0x01 << 21 //+ Enable asynchronous DMA request in stop mode for channel 21
	EDREQ_22 EARS = 0x01 << 22 //+ Enable asynchronous DMA request in stop mode for channel 22
	EDREQ_23 EARS = 0x01 << 23 //+ Enable asynchronous DMA request in stop mode for channel 23
	EDREQ_24 EARS = 0x01 << 24 //+ Enable asynchronous DMA request in stop mode for channel 24
	EDREQ_25 EARS = 0x01 << 25 //+ Enable asynchronous DMA request in stop mode for channel 25
	EDREQ_26 EARS = 0x01 << 26 //+ Enable asynchronous DMA request in stop mode for channel 26
	EDREQ_27 EARS = 0x01 << 27 //+ Enable asynchronous DMA request in stop mode for channel 27
	EDREQ_28 EARS = 0x01 << 28 //+ Enable asynchronous DMA request in stop mode for channel 28
	EDREQ_29 EARS = 0x01 << 29 //+ Enable asynchronous DMA request in stop mode for channel 29
	EDREQ_30 EARS = 0x01 << 30 //+ Enable asynchronous DMA request in stop mode for channel 30
	EDREQ_31 EARS = 0x01 << 31 //+ Enable asynchronous DMA request in stop mode for channel 31
)

const (
	EDREQ_0n  = 0
	EDREQ_1n  = 1
	EDREQ_2n  = 2
	EDREQ_3n  = 3
	EDREQ_4n  = 4
	EDREQ_5n  = 5
	EDREQ_6n  = 6
	EDREQ_7n  = 7
	EDREQ_8n  = 8
	EDREQ_9n  = 9
	EDREQ_10n = 10
	EDREQ_11n = 11
	EDREQ_12n = 12
	EDREQ_13n = 13
	EDREQ_14n = 14
	EDREQ_15n = 15
	EDREQ_16n = 16
	EDREQ_17n = 17
	EDREQ_18n = 18
	EDREQ_19n = 19
	EDREQ_20n = 20
	EDREQ_21n = 21
	EDREQ_22n = 22
	EDREQ_23n = 23
	EDREQ_24n = 24
	EDREQ_25n = 25
	EDREQ_26n = 26
	EDREQ_27n = 27
	EDREQ_28n = 28
	EDREQ_29n = 29
	EDREQ_30n = 30
	EDREQ_31n = 31
)

const (
	CHPRI  DCHPR = 0x0F << 0 //+ Channel n Arbitration Priority
	GRPPRI DCHPR = 0x03 << 4 //+ Channel n Current Group Priority
	DPA    DCHPR = 0x01 << 6 //+ Disable Preempt Ability. This field resets to 0.
	ECP    DCHPR = 0x01 << 7 //+ Enable Channel Preemption. This field resets to 0.
)

const (
	CHPRIn  = 0
	GRPPRIn = 4
	DPAn    = 6
	ECPn    = 7
)

const (
	SOFF    ATTR_SOFF = 0xFFFF << 0 //+ Source address signed offset
	DSIZE   ATTR_SOFF = 0x07 << 16  //+ Destination data transfer size
	DMOD    ATTR_SOFF = 0x1F << 19  //+ Destination Address Modulo
	SSIZE   ATTR_SOFF = 0x07 << 24  //+ Source data transfer size
	SSIZE_0 ATTR_SOFF = 0x00 << 24  //  8-bit
	SSIZE_1 ATTR_SOFF = 0x01 << 24  //  16-bit
	SSIZE_2 ATTR_SOFF = 0x02 << 24  //  32-bit
	SSIZE_3 ATTR_SOFF = 0x03 << 24  //  64-bit
	SSIZE_5 ATTR_SOFF = 0x05 << 24  //  32-byte burst (4 beats of 64 bits)
	SMOD    ATTR_SOFF = 0x1F << 27  //+ Source Address Modulo
	SMOD_0  ATTR_SOFF = 0x00 << 27  //  Source address modulo feature is disabled
	SMOD_1  ATTR_SOFF = 0x01 << 27  //  This value defines a specific address range specified to be the value after SADDR + SOFF calculation is performed on the original register value. Setting this field provides the ability to implement a circular data queue easily. For data queues requiring power-of-2 size bytes, the queue should start at a 0-modulo-size address and the SMOD field should be set to the appropriate value for the queue, freezing the desired number of upper address bits. The value programmed into this field specifies the number of lower address bits allowed to change. For a circular queue application, the SOFF is typically set to the transfer size to implement post-increment addressing with the SMOD function constraining the addresses to a 0-modulo-size range.
	SMOD_2  ATTR_SOFF = 0x02 << 27  //  This value defines a specific address range specified to be the value after SADDR + SOFF calculation is performed on the original register value. Setting this field provides the ability to implement a circular data queue easily. For data queues requiring power-of-2 size bytes, the queue should start at a 0-modulo-size address and the SMOD field should be set to the appropriate value for the queue, freezing the desired number of upper address bits. The value programmed into this field specifies the number of lower address bits allowed to change. For a circular queue application, the SOFF is typically set to the transfer size to implement post-increment addressing with the SMOD function constraining the addresses to a 0-modulo-size range.
	SMOD_3  ATTR_SOFF = 0x03 << 27  //  This value defines a specific address range specified to be the value after SADDR + SOFF calculation is performed on the original register value. Setting this field provides the ability to implement a circular data queue easily. For data queues requiring power-of-2 size bytes, the queue should start at a 0-modulo-size address and the SMOD field should be set to the appropriate value for the queue, freezing the desired number of upper address bits. The value programmed into this field specifies the number of lower address bits allowed to change. For a circular queue application, the SOFF is typically set to the transfer size to implement post-increment addressing with the SMOD function constraining the addresses to a 0-modulo-size range.
	SMOD_4  ATTR_SOFF = 0x04 << 27  //  This value defines a specific address range specified to be the value after SADDR + SOFF calculation is performed on the original register value. Setting this field provides the ability to implement a circular data queue easily. For data queues requiring power-of-2 size bytes, the queue should start at a 0-modulo-size address and the SMOD field should be set to the appropriate value for the queue, freezing the desired number of upper address bits. The value programmed into this field specifies the number of lower address bits allowed to change. For a circular queue application, the SOFF is typically set to the transfer size to implement post-increment addressing with the SMOD function constraining the addresses to a 0-modulo-size range.
	SMOD_5  ATTR_SOFF = 0x05 << 27  //  This value defines a specific address range specified to be the value after SADDR + SOFF calculation is performed on the original register value. Setting this field provides the ability to implement a circular data queue easily. For data queues requiring power-of-2 size bytes, the queue should start at a 0-modulo-size address and the SMOD field should be set to the appropriate value for the queue, freezing the desired number of upper address bits. The value programmed into this field specifies the number of lower address bits allowed to change. For a circular queue application, the SOFF is typically set to the transfer size to implement post-increment addressing with the SMOD function constraining the addresses to a 0-modulo-size range.
	SMOD_6  ATTR_SOFF = 0x06 << 27  //  This value defines a specific address range specified to be the value after SADDR + SOFF calculation is performed on the original register value. Setting this field provides the ability to implement a circular data queue easily. For data queues requiring power-of-2 size bytes, the queue should start at a 0-modulo-size address and the SMOD field should be set to the appropriate value for the queue, freezing the desired number of upper address bits. The value programmed into this field specifies the number of lower address bits allowed to change. For a circular queue application, the SOFF is typically set to the transfer size to implement post-increment addressing with the SMOD function constraining the addresses to a 0-modulo-size range.
	SMOD_7  ATTR_SOFF = 0x07 << 27  //  This value defines a specific address range specified to be the value after SADDR + SOFF calculation is performed on the original register value. Setting this field provides the ability to implement a circular data queue easily. For data queues requiring power-of-2 size bytes, the queue should start at a 0-modulo-size address and the SMOD field should be set to the appropriate value for the queue, freezing the desired number of upper address bits. The value programmed into this field specifies the number of lower address bits allowed to change. For a circular queue application, the SOFF is typically set to the transfer size to implement post-increment addressing with the SMOD function constraining the addresses to a 0-modulo-size range.
	SMOD_8  ATTR_SOFF = 0x08 << 27  //  This value defines a specific address range specified to be the value after SADDR + SOFF calculation is performed on the original register value. Setting this field provides the ability to implement a circular data queue easily. For data queues requiring power-of-2 size bytes, the queue should start at a 0-modulo-size address and the SMOD field should be set to the appropriate value for the queue, freezing the desired number of upper address bits. The value programmed into this field specifies the number of lower address bits allowed to change. For a circular queue application, the SOFF is typically set to the transfer size to implement post-increment addressing with the SMOD function constraining the addresses to a 0-modulo-size range.
	SMOD_9  ATTR_SOFF = 0x09 << 27  //  This value defines a specific address range specified to be the value after SADDR + SOFF calculation is performed on the original register value. Setting this field provides the ability to implement a circular data queue easily. For data queues requiring power-of-2 size bytes, the queue should start at a 0-modulo-size address and the SMOD field should be set to the appropriate value for the queue, freezing the desired number of upper address bits. The value programmed into this field specifies the number of lower address bits allowed to change. For a circular queue application, the SOFF is typically set to the transfer size to implement post-increment addressing with the SMOD function constraining the addresses to a 0-modulo-size range.
)

const (
	SOFFn  = 0
	DSIZEn = 16
	DMODn  = 19
	SSIZEn = 24
	SMODn  = 27
)

const (
	NBYTES NBYTES_MLNO = 0xFFFFFFFF << 0 //+ Minor Byte Transfer Count
)

const (
	NBYTESn = 0
)

const (
	DOFF        ELINK_CITER_DOFF = 0xFFFF << 0  //+ Destination Address Signed Offset
	ELINK_CITER ELINK_CITER_DOFF = 0xFFFF << 16 //+ Current Minor Loop Link, Major Loop Count, Channel Linking
)

const (
	DOFFn        = 0
	ELINK_CITERn = 16
)

const (
	START       ELINK_BITER_CSR = 0x01 << 0    //+ Channel Start
	INTMAJOR    ELINK_BITER_CSR = 0x01 << 1    //+ Enable an interrupt when major iteration count completes.
	INTHALF     ELINK_BITER_CSR = 0x01 << 2    //+ Enable an interrupt when major counter is half complete.
	DREQ        ELINK_BITER_CSR = 0x01 << 3    //+ Disable Request
	ESG         ELINK_BITER_CSR = 0x01 << 4    //+ Enable Scatter/Gather Processing
	MAJORELINK  ELINK_BITER_CSR = 0x01 << 5    //+ Enable channel-to-channel linking on major loop complete
	ACTIVE      ELINK_BITER_CSR = 0x01 << 6    //+ Channel Active
	DONE        ELINK_BITER_CSR = 0x01 << 7    //+ Channel Done
	MAJORLINKCH ELINK_BITER_CSR = 0x1F << 8    //+ Major Loop Link Channel Number
	BWC         ELINK_BITER_CSR = 0x03 << 14   //+ Bandwidth Control
	BWC_0       ELINK_BITER_CSR = 0x00 << 14   //  No eDMA engine stalls.
	BWC_2       ELINK_BITER_CSR = 0x02 << 14   //  eDMA engine stalls for 4 cycles after each R/W.
	BWC_3       ELINK_BITER_CSR = 0x03 << 14   //  eDMA engine stalls for 8 cycles after each R/W.
	ELINK_BITER ELINK_BITER_CSR = 0xFFFF << 16 //+ Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled
)

const (
	STARTn       = 0
	INTMAJORn    = 1
	INTHALFn     = 2
	DREQn        = 3
	ESGn         = 4
	MAJORELINKn  = 5
	ACTIVEn      = 6
	DONEn        = 7
	MAJORLINKCHn = 8
	BWCn         = 14
	ELINK_BITERn = 16
)
