// Code generated by svdxgen; DO NOT EDIT.

//go:build imxrt1060

// Package ocotp provides access to the registers of the OCOTP peripheral.
//
// Instances:
//
//	OCOTP  OCOTP_BASE  -  -
//
// Registers:
//
//	0x000 32  CTRL            OTP Controller Control Register
//	0x004 32  CTRL_SET(CTRL)  OTP Controller Control Register
//	0x008 32  CTRL_CLR(CTRL)  OTP Controller Control Register
//	0x00C 32  CTRL_TOG(CTRL)  OTP Controller Control Register
//	0x010 32  TIMING          OTP Controller Timing Register
//	0x020 32  DATA            OTP Controller Write Data Register
//	0x030 32  READ_CTRL       OTP Controller Write Data Register
//	0x040 32  READ_FUSE_DATA  OTP Controller Read Data Register
//	0x050 32  SW_STICKY       Sticky bit Register
//	0x060 32  SCS             Software Controllable Signals Register
//	0x064 32  SCS_SET(SCS)    Software Controllable Signals Register
//	0x068 32  SCS_CLR(SCS)    Software Controllable Signals Register
//	0x06C 32  SCS_TOG(SCS)    Software Controllable Signals Register
//	0x070 32  CRC_ADDR        OTP Controller CRC test address
//	0x080 32  CRC_VALUE       OTP Controller CRC Value Register
//	0x090 32  VERSION         OTP Controller Version Register
//	0x100 32  TIMING2         OTP Controller Timing Register
//	0x400 32  LOCK            Value of OTP Bank0 Word0 (Lock controls)
//	0x410 32  CFG[7]          Value of OTP Bank0 Word1 (Configuration and Manufacturing Info.)
//	0x480 32  MEM[5]          Value of OTP Bank1 Word0 (Memory Related Info.)
//	0x4D0 32  ANA[3]          Value of OTP Bank1 Word5 (Memory Related Info.)
//	0x500 32  OTPMK[8]        Value of OTP Bank2 Word0 (OTPMK Key)
//	0x580 32  SRK[8]          Shadow Register for OTP Bank3 Word0 (SRK Hash)
//	0x600 32  SJC_RESP[2]     Value of OTP Bank4 Word0 (Secure JTAG Response Field)
//	0x620 32  MAC[3]          Value of OTP Bank4 Word2 (MAC Address)
//	0x650 32  OTPMK_CRC32     Value of OTP Bank4 Word5 (CRC Key)
//	0x660 32  GP1             Value of OTP Bank4 Word6 (General Purpose Customer Defined Info)
//	0x670 32  GP2             Value of OTP Bank4 Word7 (General Purpose Customer Defined Info)
//	0x680 32  SW_GP1          Value of OTP Bank5 Word0 (SW GP1)
//	0x690 32  SW_GP2[4]       Value of OTP Bank5 Word1 (SW GP2)
//	0x6D0 32  MISC_CONF[2]    Value of OTP Bank5 Word5 (Misc Conf)
//	0x6F0 32  SRK_REVOKE      Value of OTP Bank5 Word7 (SRK Revoke)
//	0x800 32  ROM_PATCH[8]    Value of OTP Bank6 Word0 (ROM Patch)
//	0x880 32  GP3[4]          Value of OTP Bank7 Word0 (GP3)
//	0x8C0 32  GP4[4]          Value of OTP Bank7 Word4 (GP4)
//
// Import:
//
//	github.com/embeddedgo/imxrt/p/mmap
package ocotp

const (
	ADDR           CTRL = 0x3F << 0    //+ ADDR
	_              CTRL = 0x03 << 6    //+ RSVD0
	BUSY           CTRL = 0x01 << 8    //+ BUSY
	ERROR          CTRL = 0x01 << 9    //+ ERROR
	RELOAD_SHADOWS CTRL = 0x01 << 10   //+ RELOAD_SHADOWS
	CRC_TEST       CTRL = 0x01 << 11   //+ CRC_TEST
	CRC_FAIL       CTRL = 0x01 << 12   //+ CRC_FAIL
	_              CTRL = 0x07 << 13   //+ RSVD1
	WR_UNLOCK      CTRL = 0xFFFF << 16 //+ WR_UNLOCK
	KEY            CTRL = 0x3E77 << 16 //  Key needed to unlock HW_OCOTP_DATA register.
)

const (
	ADDRn           = 0
	BUSYn           = 8
	ERRORn          = 9
	RELOAD_SHADOWSn = 10
	CRC_TESTn       = 11
	CRC_FAILn       = 12
	WR_UNLOCKn      = 16
)

const (
	STROBE_PROG TIMING = 0xFFF << 0 //+ STROBE_PROG
	RELAX       TIMING = 0x0F << 12 //+ RELAX
	STROBE_READ TIMING = 0x3F << 16 //+ STROBE_READ
	WAIT        TIMING = 0x3F << 22 //+ WAIT
	_           TIMING = 0x0F << 28 //+ RSRVD0
)

const (
	STROBE_PROGn = 0
	RELAXn       = 12
	STROBE_READn = 16
	WAITn        = 22
)

const (
	READ_FUSE READ_CTRL = 0x01 << 0       //+ READ_FUSE
	_         READ_CTRL = 0x7FFFFFFF << 1 //+ RSVD0
)

const (
	READ_FUSEn = 0
)

const (
	BLOCK_DTCP_KEY     SW_STICKY = 0x01 << 0      //+ BLOCK_DTCP_KEY
	SRK_REVOKE_LOCK    SW_STICKY = 0x01 << 1      //+ SRK_REVOKE_LOCK
	FIELD_RETURN_LOCK  SW_STICKY = 0x01 << 2      //+ FIELD_RETURN_LOCK
	BLOCK_ROM_PART     SW_STICKY = 0x01 << 3      //+ BLOCK_ROM_PART
	JTAG_BLOCK_RELEASE SW_STICKY = 0x01 << 4      //+ JTAG_BLOCK_RELEASE
	_                  SW_STICKY = 0x7FFFFFF << 5 //+ RSVD0
)

const (
	BLOCK_DTCP_KEYn     = 0
	SRK_REVOKE_LOCKn    = 1
	FIELD_RETURN_LOCKn  = 2
	BLOCK_ROM_PARTn     = 3
	JTAG_BLOCK_RELEASEn = 4
)

const (
	HAB_JDE SCS = 0x01 << 0       //+ HAB_JDE
	SPARE   SCS = 0x3FFFFFFF << 1 //+ SPARE
	LCK     SCS = 0x01 << 31      //+ LOCK
)

const (
	HAB_JDEn = 0
	SPAREn   = 1
	LCKn     = 31
)

const (
	DATA_START_ADDR CRC_ADDR = 0xFF << 0  //+ DATA_START_ADDR
	DATA_END_ADDR   CRC_ADDR = 0xFF << 8  //+ DATA_END_ADDR
	ADDR_CRC        CRC_ADDR = 0xFF << 16 //+ CRC_ADDR
	OTPMK_CRC       CRC_ADDR = 0x01 << 24 //+ OTPMK_CRC
	_               CRC_ADDR = 0x7F << 25 //+ RSVD0
)

const (
	DATA_START_ADDRn = 0
	DATA_END_ADDRn   = 8
	ADDR_CRCn        = 16
	OTPMK_CRCn       = 24
)

const (
	STEP  VERSION = 0xFFFF << 0 //+ STEP
	MINOR VERSION = 0xFF << 16  //+ MINOR
	MAJOR VERSION = 0xFF << 24  //+ MAJOR
)

const (
	STEPn  = 0
	MINORn = 16
	MAJORn = 24
)

const (
	RELAX_PROG TIMING2 = 0xFFF << 0  //+ RELAX_PROG
	_          TIMING2 = 0x0F << 12  //+ RSRVD0
	RELAX_READ TIMING2 = 0x3F << 16  //+ RELAX_READ
	_          TIMING2 = 0x3FF << 22 //+ RSRVD0
)

const (
	RELAX_PROGn = 0
	RELAX_READn = 16
)

const (
	TESTER_LCK       LOCK = 0x03 << 0  //+ TESTER
	BOOT_CFG_LCK     LOCK = 0x03 << 2  //+ BOOT_CFG
	MEM_TRIM_LCK     LOCK = 0x03 << 4  //+ MEM_TRIM
	SJC_RESP_LCK     LOCK = 0x01 << 6  //+ SJC_RESP
	GP4_R_LCK        LOCK = 0x01 << 7  //+ GP4_RLOCK
	MAC_ADDR_LCK     LOCK = 0x03 << 8  //+ MAC_ADDR
	GP1_LCK          LOCK = 0x03 << 10 //+ GP1
	GP2_LCK          LOCK = 0x03 << 12 //+ GP2
	ROM_PATCH_LCK    LOCK = 0x01 << 15 //+ ROM_PATCH
	SW_GP1_LCK       LOCK = 0x01 << 16 //+ SW_GP1
	OTPMK_LCK        LOCK = 0x01 << 17 //+ OTPMK
	ANALOG_LCK       LOCK = 0x03 << 18 //+ ANALOG
	OTPMK_CRC_LCK    LOCK = 0x01 << 20 //+ OTPMK_CRC
	SW_GP2__LCK      LOCK = 0x01 << 21 //+ SW_GP2_LOCK
	MISC_CONF_LCK    LOCK = 0x01 << 22 //+ MISC_CONF
	SW_GP2_R_LCK     LOCK = 0x01 << 23 //+ SW_GP2_RLOCK
	GP4_LCK          LOCK = 0x03 << 24 //+ GP4
	GP3_LCK          LOCK = 0x03 << 26 //+ GP3
	FIELD_RETURN_LCK LOCK = 0x0F << 28 //+ FIELD_RETURN
)

const (
	TESTER_LCKn       = 0
	BOOT_CFG_LCKn     = 2
	MEM_TRIM_LCKn     = 4
	SJC_RESP_LCKn     = 6
	GP4_R_LCKn        = 7
	MAC_ADDR_LCKn     = 8
	GP1_LCKn          = 10
	GP2_LCKn          = 12
	ROM_PATCH_LCKn    = 15
	SW_GP1_LCKn       = 16
	OTPMK_LCKn        = 17
	ANALOG_LCKn       = 18
	OTPMK_CRC_LCKn    = 20
	SW_GP2__LCKn      = 21
	MISC_CONF_LCKn    = 22
	SW_GP2_R_LCKn     = 23
	GP4_LCKn          = 24
	GP3_LCKn          = 26
	FIELD_RETURN_LCKn = 28
)
