// DO NOT EDIT THIS FILE. GENERATED BY xgen.

package ccm

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	CCR    RCCR
	_      uint32
	CSR    RCSR
	CCSR   RCCSR
	CACRR  RCACRR
	CBCDR  RCBCDR
	CBCMR  RCBCMR
	CSCMR1 RCSCMR1
	CSCMR2 RCSCMR2
	CSCDR1 RCSCDR1
	CS1CDR RCS1CDR
	CS2CDR RCS2CDR
	CDCDR  RCDCDR
	_      uint32
	CSCDR2 RCSCDR2
	CSCDR3 RCSCDR3
	_      [2]uint32
	CDHIPR RCDHIPR
	_      [2]uint32
	CLPCR  RCLPCR
	CISR   RCIR
	CIMR   RCIR
	CCOSR  RCCOSR
	CGPR   RCGPR
	CCGR0  RCCGR0
	CCGR1  RCCGR1
	CCGR2  RCCGR2
	CCGR3  RCCGR3
	CCGR4  RCCGR4
	CCGR5  RCCGR5
	CCGR6  RCCGR6
	CCGR7  RCCGR7
	CMEOR  RCMEOR
}

func CCM() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.CCM_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CCR uint32

type RCCR struct{ mmio.U32 }

func (r *RCCR) LoadBits(mask CCR) CCR { return CCR(r.U32.LoadBits(uint32(mask))) }
func (r *RCCR) StoreBits(mask, b CCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCR) SetBits(mask CCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCCR) ClearBits(mask CCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCCR) Load() CCR             { return CCR(r.U32.Load()) }
func (r *RCCR) Store(b CCR)           { r.U32.Store(uint32(b)) }

type RMCCR struct{ mmio.UM32 }

func (rm RMCCR) Load() CCR   { return CCR(rm.UM32.Load()) }
func (rm RMCCR) Store(b CCR) { rm.UM32.Store(uint32(b)) }

func OSCNT_(p *Periph) RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(OSCNT)}}
}

func COSC_EN_(p *Periph) RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(COSC_EN)}}
}

func REG_BYPASS_COUNT_(p *Periph) RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(REG_BYPASS_COUNT)}}
}

func RBC_EN_(p *Periph) RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(RBC_EN)}}
}

type CSR uint32

type RCSR struct{ mmio.U32 }

func (r *RCSR) LoadBits(mask CSR) CSR { return CSR(r.U32.LoadBits(uint32(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U32.Load()) }
func (r *RCSR) Store(b CSR)           { r.U32.Store(uint32(b)) }

type RMCSR struct{ mmio.UM32 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM32.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM32.Store(uint32(b)) }

func REF_EN_B_(p *Periph) RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(REF_EN_B)}}
}

func CAMP2_READY_(p *Periph) RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CAMP2_READY)}}
}

func COSC_READY_(p *Periph) RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(COSC_READY)}}
}

type CCSR uint32

type RCCSR struct{ mmio.U32 }

func (r *RCCSR) LoadBits(mask CCSR) CCSR { return CCSR(r.U32.LoadBits(uint32(mask))) }
func (r *RCCSR) StoreBits(mask, b CCSR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCSR) SetBits(mask CCSR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCCSR) ClearBits(mask CCSR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCCSR) Load() CCSR              { return CCSR(r.U32.Load()) }
func (r *RCCSR) Store(b CCSR)            { r.U32.Store(uint32(b)) }

type RMCCSR struct{ mmio.UM32 }

func (rm RMCCSR) Load() CCSR   { return CCSR(rm.UM32.Load()) }
func (rm RMCCSR) Store(b CCSR) { rm.UM32.Store(uint32(b)) }

func PLL3_SW_CLK_SEL_(p *Periph) RMCCSR {
	return RMCCSR{mmio.UM32{&p.CCSR.U32, uint32(PLL3_SW_CLK_SEL)}}
}

type CACRR uint32

type RCACRR struct{ mmio.U32 }

func (r *RCACRR) LoadBits(mask CACRR) CACRR { return CACRR(r.U32.LoadBits(uint32(mask))) }
func (r *RCACRR) StoreBits(mask, b CACRR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCACRR) SetBits(mask CACRR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCACRR) ClearBits(mask CACRR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCACRR) Load() CACRR               { return CACRR(r.U32.Load()) }
func (r *RCACRR) Store(b CACRR)             { r.U32.Store(uint32(b)) }

type RMCACRR struct{ mmio.UM32 }

func (rm RMCACRR) Load() CACRR   { return CACRR(rm.UM32.Load()) }
func (rm RMCACRR) Store(b CACRR) { rm.UM32.Store(uint32(b)) }

func ARM_PODF_(p *Periph) RMCACRR {
	return RMCACRR{mmio.UM32{&p.CACRR.U32, uint32(ARM_PODF)}}
}

type CBCDR uint32

type RCBCDR struct{ mmio.U32 }

func (r *RCBCDR) LoadBits(mask CBCDR) CBCDR { return CBCDR(r.U32.LoadBits(uint32(mask))) }
func (r *RCBCDR) StoreBits(mask, b CBCDR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCBCDR) SetBits(mask CBCDR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCBCDR) ClearBits(mask CBCDR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCBCDR) Load() CBCDR               { return CBCDR(r.U32.Load()) }
func (r *RCBCDR) Store(b CBCDR)             { r.U32.Store(uint32(b)) }

type RMCBCDR struct{ mmio.UM32 }

func (rm RMCBCDR) Load() CBCDR   { return CBCDR(rm.UM32.Load()) }
func (rm RMCBCDR) Store(b CBCDR) { rm.UM32.Store(uint32(b)) }

func SEMC_CLK_SEL_(p *Periph) RMCBCDR {
	return RMCBCDR{mmio.UM32{&p.CBCDR.U32, uint32(SEMC_CLK_SEL)}}
}

func SEMC_ALT_CLK_SEL_(p *Periph) RMCBCDR {
	return RMCBCDR{mmio.UM32{&p.CBCDR.U32, uint32(SEMC_ALT_CLK_SEL)}}
}

func IPG_PODF_(p *Periph) RMCBCDR {
	return RMCBCDR{mmio.UM32{&p.CBCDR.U32, uint32(IPG_PODF)}}
}

func AHB_PODF_(p *Periph) RMCBCDR {
	return RMCBCDR{mmio.UM32{&p.CBCDR.U32, uint32(AHB_PODF)}}
}

func SEMC_PODF_(p *Periph) RMCBCDR {
	return RMCBCDR{mmio.UM32{&p.CBCDR.U32, uint32(SEMC_PODF)}}
}

func PERIPH_CLK_SEL_(p *Periph) RMCBCDR {
	return RMCBCDR{mmio.UM32{&p.CBCDR.U32, uint32(PERIPH_CLK_SEL)}}
}

func PERIPH_CLK2_PODF_(p *Periph) RMCBCDR {
	return RMCBCDR{mmio.UM32{&p.CBCDR.U32, uint32(PERIPH_CLK2_PODF)}}
}

type CBCMR uint32

type RCBCMR struct{ mmio.U32 }

func (r *RCBCMR) LoadBits(mask CBCMR) CBCMR { return CBCMR(r.U32.LoadBits(uint32(mask))) }
func (r *RCBCMR) StoreBits(mask, b CBCMR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCBCMR) SetBits(mask CBCMR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCBCMR) ClearBits(mask CBCMR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCBCMR) Load() CBCMR               { return CBCMR(r.U32.Load()) }
func (r *RCBCMR) Store(b CBCMR)             { r.U32.Store(uint32(b)) }

type RMCBCMR struct{ mmio.UM32 }

func (rm RMCBCMR) Load() CBCMR   { return CBCMR(rm.UM32.Load()) }
func (rm RMCBCMR) Store(b CBCMR) { rm.UM32.Store(uint32(b)) }

func LPSPI_CLK_SEL_(p *Periph) RMCBCMR {
	return RMCBCMR{mmio.UM32{&p.CBCMR.U32, uint32(LPSPI_CLK_SEL)}}
}

func FLEXSPI2_CLK_SEL_(p *Periph) RMCBCMR {
	return RMCBCMR{mmio.UM32{&p.CBCMR.U32, uint32(FLEXSPI2_CLK_SEL)}}
}

func PERIPH_CLK2_SEL_(p *Periph) RMCBCMR {
	return RMCBCMR{mmio.UM32{&p.CBCMR.U32, uint32(PERIPH_CLK2_SEL)}}
}

func TRACE_CLK_SEL_(p *Periph) RMCBCMR {
	return RMCBCMR{mmio.UM32{&p.CBCMR.U32, uint32(TRACE_CLK_SEL)}}
}

func PRE_PERIPH_CLK_SEL_(p *Periph) RMCBCMR {
	return RMCBCMR{mmio.UM32{&p.CBCMR.U32, uint32(PRE_PERIPH_CLK_SEL)}}
}

func LCDIF_PODF_(p *Periph) RMCBCMR {
	return RMCBCMR{mmio.UM32{&p.CBCMR.U32, uint32(LCDIF_PODF)}}
}

func LPSPI_PODF_(p *Periph) RMCBCMR {
	return RMCBCMR{mmio.UM32{&p.CBCMR.U32, uint32(LPSPI_PODF)}}
}

func FLEXSPI2_PODF_(p *Periph) RMCBCMR {
	return RMCBCMR{mmio.UM32{&p.CBCMR.U32, uint32(FLEXSPI2_PODF)}}
}

type CSCMR1 uint32

type RCSCMR1 struct{ mmio.U32 }

func (r *RCSCMR1) LoadBits(mask CSCMR1) CSCMR1 { return CSCMR1(r.U32.LoadBits(uint32(mask))) }
func (r *RCSCMR1) StoreBits(mask, b CSCMR1)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSCMR1) SetBits(mask CSCMR1)         { r.U32.SetBits(uint32(mask)) }
func (r *RCSCMR1) ClearBits(mask CSCMR1)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCSCMR1) Load() CSCMR1                { return CSCMR1(r.U32.Load()) }
func (r *RCSCMR1) Store(b CSCMR1)              { r.U32.Store(uint32(b)) }

type RMCSCMR1 struct{ mmio.UM32 }

func (rm RMCSCMR1) Load() CSCMR1   { return CSCMR1(rm.UM32.Load()) }
func (rm RMCSCMR1) Store(b CSCMR1) { rm.UM32.Store(uint32(b)) }

func PERCLK_PODF_(p *Periph) RMCSCMR1 {
	return RMCSCMR1{mmio.UM32{&p.CSCMR1.U32, uint32(PERCLK_PODF)}}
}

func PERCLK_CLK_SEL_(p *Periph) RMCSCMR1 {
	return RMCSCMR1{mmio.UM32{&p.CSCMR1.U32, uint32(PERCLK_CLK_SEL)}}
}

func SAI1_CLK_SEL_(p *Periph) RMCSCMR1 {
	return RMCSCMR1{mmio.UM32{&p.CSCMR1.U32, uint32(SAI1_CLK_SEL)}}
}

func SAI2_CLK_SEL_(p *Periph) RMCSCMR1 {
	return RMCSCMR1{mmio.UM32{&p.CSCMR1.U32, uint32(SAI2_CLK_SEL)}}
}

func SAI3_CLK_SEL_(p *Periph) RMCSCMR1 {
	return RMCSCMR1{mmio.UM32{&p.CSCMR1.U32, uint32(SAI3_CLK_SEL)}}
}

func USDHC1_CLK_SEL_(p *Periph) RMCSCMR1 {
	return RMCSCMR1{mmio.UM32{&p.CSCMR1.U32, uint32(USDHC1_CLK_SEL)}}
}

func USDHC2_CLK_SEL_(p *Periph) RMCSCMR1 {
	return RMCSCMR1{mmio.UM32{&p.CSCMR1.U32, uint32(USDHC2_CLK_SEL)}}
}

func FLEXSPI_PODF_(p *Periph) RMCSCMR1 {
	return RMCSCMR1{mmio.UM32{&p.CSCMR1.U32, uint32(FLEXSPI_PODF)}}
}

func FLEXSPI_CLK_SEL_(p *Periph) RMCSCMR1 {
	return RMCSCMR1{mmio.UM32{&p.CSCMR1.U32, uint32(FLEXSPI_CLK_SEL)}}
}

type CSCMR2 uint32

type RCSCMR2 struct{ mmio.U32 }

func (r *RCSCMR2) LoadBits(mask CSCMR2) CSCMR2 { return CSCMR2(r.U32.LoadBits(uint32(mask))) }
func (r *RCSCMR2) StoreBits(mask, b CSCMR2)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSCMR2) SetBits(mask CSCMR2)         { r.U32.SetBits(uint32(mask)) }
func (r *RCSCMR2) ClearBits(mask CSCMR2)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCSCMR2) Load() CSCMR2                { return CSCMR2(r.U32.Load()) }
func (r *RCSCMR2) Store(b CSCMR2)              { r.U32.Store(uint32(b)) }

type RMCSCMR2 struct{ mmio.UM32 }

func (rm RMCSCMR2) Load() CSCMR2   { return CSCMR2(rm.UM32.Load()) }
func (rm RMCSCMR2) Store(b CSCMR2) { rm.UM32.Store(uint32(b)) }

func CAN_CLK_PODF_(p *Periph) RMCSCMR2 {
	return RMCSCMR2{mmio.UM32{&p.CSCMR2.U32, uint32(CAN_CLK_PODF)}}
}

func CAN_CLK_SEL_(p *Periph) RMCSCMR2 {
	return RMCSCMR2{mmio.UM32{&p.CSCMR2.U32, uint32(CAN_CLK_SEL)}}
}

func FLEXIO2_CLK_SEL_(p *Periph) RMCSCMR2 {
	return RMCSCMR2{mmio.UM32{&p.CSCMR2.U32, uint32(FLEXIO2_CLK_SEL)}}
}

type CSCDR1 uint32

type RCSCDR1 struct{ mmio.U32 }

func (r *RCSCDR1) LoadBits(mask CSCDR1) CSCDR1 { return CSCDR1(r.U32.LoadBits(uint32(mask))) }
func (r *RCSCDR1) StoreBits(mask, b CSCDR1)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSCDR1) SetBits(mask CSCDR1)         { r.U32.SetBits(uint32(mask)) }
func (r *RCSCDR1) ClearBits(mask CSCDR1)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCSCDR1) Load() CSCDR1                { return CSCDR1(r.U32.Load()) }
func (r *RCSCDR1) Store(b CSCDR1)              { r.U32.Store(uint32(b)) }

type RMCSCDR1 struct{ mmio.UM32 }

func (rm RMCSCDR1) Load() CSCDR1   { return CSCDR1(rm.UM32.Load()) }
func (rm RMCSCDR1) Store(b CSCDR1) { rm.UM32.Store(uint32(b)) }

func UART_CLK_PODF_(p *Periph) RMCSCDR1 {
	return RMCSCDR1{mmio.UM32{&p.CSCDR1.U32, uint32(UART_CLK_PODF)}}
}

func UART_CLK_SEL_(p *Periph) RMCSCDR1 {
	return RMCSCDR1{mmio.UM32{&p.CSCDR1.U32, uint32(UART_CLK_SEL)}}
}

func USDHC1_PODF_(p *Periph) RMCSCDR1 {
	return RMCSCDR1{mmio.UM32{&p.CSCDR1.U32, uint32(USDHC1_PODF)}}
}

func USDHC2_PODF_(p *Periph) RMCSCDR1 {
	return RMCSCDR1{mmio.UM32{&p.CSCDR1.U32, uint32(USDHC2_PODF)}}
}

func TRACE_PODF_(p *Periph) RMCSCDR1 {
	return RMCSCDR1{mmio.UM32{&p.CSCDR1.U32, uint32(TRACE_PODF)}}
}

type CS1CDR uint32

type RCS1CDR struct{ mmio.U32 }

func (r *RCS1CDR) LoadBits(mask CS1CDR) CS1CDR { return CS1CDR(r.U32.LoadBits(uint32(mask))) }
func (r *RCS1CDR) StoreBits(mask, b CS1CDR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCS1CDR) SetBits(mask CS1CDR)         { r.U32.SetBits(uint32(mask)) }
func (r *RCS1CDR) ClearBits(mask CS1CDR)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCS1CDR) Load() CS1CDR                { return CS1CDR(r.U32.Load()) }
func (r *RCS1CDR) Store(b CS1CDR)              { r.U32.Store(uint32(b)) }

type RMCS1CDR struct{ mmio.UM32 }

func (rm RMCS1CDR) Load() CS1CDR   { return CS1CDR(rm.UM32.Load()) }
func (rm RMCS1CDR) Store(b CS1CDR) { rm.UM32.Store(uint32(b)) }

func SAI1_CLK_PODF_(p *Periph) RMCS1CDR {
	return RMCS1CDR{mmio.UM32{&p.CS1CDR.U32, uint32(SAI1_CLK_PODF)}}
}

func SAI1_CLK_PRED_(p *Periph) RMCS1CDR {
	return RMCS1CDR{mmio.UM32{&p.CS1CDR.U32, uint32(SAI1_CLK_PRED)}}
}

func FLEXIO2_CLK_PRED_(p *Periph) RMCS1CDR {
	return RMCS1CDR{mmio.UM32{&p.CS1CDR.U32, uint32(FLEXIO2_CLK_PRED)}}
}

func SAI3_CLK_PODF_(p *Periph) RMCS1CDR {
	return RMCS1CDR{mmio.UM32{&p.CS1CDR.U32, uint32(SAI3_CLK_PODF)}}
}

func SAI3_CLK_PRED_(p *Periph) RMCS1CDR {
	return RMCS1CDR{mmio.UM32{&p.CS1CDR.U32, uint32(SAI3_CLK_PRED)}}
}

func FLEXIO2_CLK_PODF_(p *Periph) RMCS1CDR {
	return RMCS1CDR{mmio.UM32{&p.CS1CDR.U32, uint32(FLEXIO2_CLK_PODF)}}
}

type CS2CDR uint32

type RCS2CDR struct{ mmio.U32 }

func (r *RCS2CDR) LoadBits(mask CS2CDR) CS2CDR { return CS2CDR(r.U32.LoadBits(uint32(mask))) }
func (r *RCS2CDR) StoreBits(mask, b CS2CDR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCS2CDR) SetBits(mask CS2CDR)         { r.U32.SetBits(uint32(mask)) }
func (r *RCS2CDR) ClearBits(mask CS2CDR)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCS2CDR) Load() CS2CDR                { return CS2CDR(r.U32.Load()) }
func (r *RCS2CDR) Store(b CS2CDR)              { r.U32.Store(uint32(b)) }

type RMCS2CDR struct{ mmio.UM32 }

func (rm RMCS2CDR) Load() CS2CDR   { return CS2CDR(rm.UM32.Load()) }
func (rm RMCS2CDR) Store(b CS2CDR) { rm.UM32.Store(uint32(b)) }

func SAI2_CLK_PODF_(p *Periph) RMCS2CDR {
	return RMCS2CDR{mmio.UM32{&p.CS2CDR.U32, uint32(SAI2_CLK_PODF)}}
}

func SAI2_CLK_PRED_(p *Periph) RMCS2CDR {
	return RMCS2CDR{mmio.UM32{&p.CS2CDR.U32, uint32(SAI2_CLK_PRED)}}
}

type CDCDR uint32

type RCDCDR struct{ mmio.U32 }

func (r *RCDCDR) LoadBits(mask CDCDR) CDCDR { return CDCDR(r.U32.LoadBits(uint32(mask))) }
func (r *RCDCDR) StoreBits(mask, b CDCDR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCDCDR) SetBits(mask CDCDR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCDCDR) ClearBits(mask CDCDR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCDCDR) Load() CDCDR               { return CDCDR(r.U32.Load()) }
func (r *RCDCDR) Store(b CDCDR)             { r.U32.Store(uint32(b)) }

type RMCDCDR struct{ mmio.UM32 }

func (rm RMCDCDR) Load() CDCDR   { return CDCDR(rm.UM32.Load()) }
func (rm RMCDCDR) Store(b CDCDR) { rm.UM32.Store(uint32(b)) }

func FLEXIO1_CLK_SEL_(p *Periph) RMCDCDR {
	return RMCDCDR{mmio.UM32{&p.CDCDR.U32, uint32(FLEXIO1_CLK_SEL)}}
}

func FLEXIO1_CLK_PODF_(p *Periph) RMCDCDR {
	return RMCDCDR{mmio.UM32{&p.CDCDR.U32, uint32(FLEXIO1_CLK_PODF)}}
}

func FLEXIO1_CLK_PRED_(p *Periph) RMCDCDR {
	return RMCDCDR{mmio.UM32{&p.CDCDR.U32, uint32(FLEXIO1_CLK_PRED)}}
}

func SPDIF0_CLK_SEL_(p *Periph) RMCDCDR {
	return RMCDCDR{mmio.UM32{&p.CDCDR.U32, uint32(SPDIF0_CLK_SEL)}}
}

func SPDIF0_CLK_PODF_(p *Periph) RMCDCDR {
	return RMCDCDR{mmio.UM32{&p.CDCDR.U32, uint32(SPDIF0_CLK_PODF)}}
}

func SPDIF0_CLK_PRED_(p *Periph) RMCDCDR {
	return RMCDCDR{mmio.UM32{&p.CDCDR.U32, uint32(SPDIF0_CLK_PRED)}}
}

type CSCDR2 uint32

type RCSCDR2 struct{ mmio.U32 }

func (r *RCSCDR2) LoadBits(mask CSCDR2) CSCDR2 { return CSCDR2(r.U32.LoadBits(uint32(mask))) }
func (r *RCSCDR2) StoreBits(mask, b CSCDR2)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSCDR2) SetBits(mask CSCDR2)         { r.U32.SetBits(uint32(mask)) }
func (r *RCSCDR2) ClearBits(mask CSCDR2)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCSCDR2) Load() CSCDR2                { return CSCDR2(r.U32.Load()) }
func (r *RCSCDR2) Store(b CSCDR2)              { r.U32.Store(uint32(b)) }

type RMCSCDR2 struct{ mmio.UM32 }

func (rm RMCSCDR2) Load() CSCDR2   { return CSCDR2(rm.UM32.Load()) }
func (rm RMCSCDR2) Store(b CSCDR2) { rm.UM32.Store(uint32(b)) }

func LCDIF_PRED_(p *Periph) RMCSCDR2 {
	return RMCSCDR2{mmio.UM32{&p.CSCDR2.U32, uint32(LCDIF_PRED)}}
}

func LCDIF_PRE_CLK_SEL_(p *Periph) RMCSCDR2 {
	return RMCSCDR2{mmio.UM32{&p.CSCDR2.U32, uint32(LCDIF_PRE_CLK_SEL)}}
}

func LPI2C_CLK_SEL_(p *Periph) RMCSCDR2 {
	return RMCSCDR2{mmio.UM32{&p.CSCDR2.U32, uint32(LPI2C_CLK_SEL)}}
}

func LPI2C_CLK_PODF_(p *Periph) RMCSCDR2 {
	return RMCSCDR2{mmio.UM32{&p.CSCDR2.U32, uint32(LPI2C_CLK_PODF)}}
}

type CSCDR3 uint32

type RCSCDR3 struct{ mmio.U32 }

func (r *RCSCDR3) LoadBits(mask CSCDR3) CSCDR3 { return CSCDR3(r.U32.LoadBits(uint32(mask))) }
func (r *RCSCDR3) StoreBits(mask, b CSCDR3)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSCDR3) SetBits(mask CSCDR3)         { r.U32.SetBits(uint32(mask)) }
func (r *RCSCDR3) ClearBits(mask CSCDR3)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCSCDR3) Load() CSCDR3                { return CSCDR3(r.U32.Load()) }
func (r *RCSCDR3) Store(b CSCDR3)              { r.U32.Store(uint32(b)) }

type RMCSCDR3 struct{ mmio.UM32 }

func (rm RMCSCDR3) Load() CSCDR3   { return CSCDR3(rm.UM32.Load()) }
func (rm RMCSCDR3) Store(b CSCDR3) { rm.UM32.Store(uint32(b)) }

func CSI_CLK_SEL_(p *Periph) RMCSCDR3 {
	return RMCSCDR3{mmio.UM32{&p.CSCDR3.U32, uint32(CSI_CLK_SEL)}}
}

func CSI_PODF_(p *Periph) RMCSCDR3 {
	return RMCSCDR3{mmio.UM32{&p.CSCDR3.U32, uint32(CSI_PODF)}}
}

type CDHIPR uint32

type RCDHIPR struct{ mmio.U32 }

func (r *RCDHIPR) LoadBits(mask CDHIPR) CDHIPR { return CDHIPR(r.U32.LoadBits(uint32(mask))) }
func (r *RCDHIPR) StoreBits(mask, b CDHIPR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCDHIPR) SetBits(mask CDHIPR)         { r.U32.SetBits(uint32(mask)) }
func (r *RCDHIPR) ClearBits(mask CDHIPR)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCDHIPR) Load() CDHIPR                { return CDHIPR(r.U32.Load()) }
func (r *RCDHIPR) Store(b CDHIPR)              { r.U32.Store(uint32(b)) }

type RMCDHIPR struct{ mmio.UM32 }

func (rm RMCDHIPR) Load() CDHIPR   { return CDHIPR(rm.UM32.Load()) }
func (rm RMCDHIPR) Store(b CDHIPR) { rm.UM32.Store(uint32(b)) }

func SEMC_PODF_BUSY_(p *Periph) RMCDHIPR {
	return RMCDHIPR{mmio.UM32{&p.CDHIPR.U32, uint32(SEMC_PODF_BUSY)}}
}

func AHB_PODF_BUSY_(p *Periph) RMCDHIPR {
	return RMCDHIPR{mmio.UM32{&p.CDHIPR.U32, uint32(AHB_PODF_BUSY)}}
}

func PERIPH2_CLK_SEL_BUSY_(p *Periph) RMCDHIPR {
	return RMCDHIPR{mmio.UM32{&p.CDHIPR.U32, uint32(PERIPH2_CLK_SEL_BUSY)}}
}

func PERIPH_CLK_SEL_BUSY_(p *Periph) RMCDHIPR {
	return RMCDHIPR{mmio.UM32{&p.CDHIPR.U32, uint32(PERIPH_CLK_SEL_BUSY)}}
}

func ARM_PODF_BUSY_(p *Periph) RMCDHIPR {
	return RMCDHIPR{mmio.UM32{&p.CDHIPR.U32, uint32(ARM_PODF_BUSY)}}
}

type CLPCR uint32

type RCLPCR struct{ mmio.U32 }

func (r *RCLPCR) LoadBits(mask CLPCR) CLPCR { return CLPCR(r.U32.LoadBits(uint32(mask))) }
func (r *RCLPCR) StoreBits(mask, b CLPCR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLPCR) SetBits(mask CLPCR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCLPCR) ClearBits(mask CLPCR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCLPCR) Load() CLPCR               { return CLPCR(r.U32.Load()) }
func (r *RCLPCR) Store(b CLPCR)             { r.U32.Store(uint32(b)) }

type RMCLPCR struct{ mmio.UM32 }

func (rm RMCLPCR) Load() CLPCR   { return CLPCR(rm.UM32.Load()) }
func (rm RMCLPCR) Store(b CLPCR) { rm.UM32.Store(uint32(b)) }

func LPM_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(LPM)}}
}

func ARM_CLK_DIS_ON_LPM_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(ARM_CLK_DIS_ON_LPM)}}
}

func SBYOS_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(SBYOS)}}
}

func DIS_REF_OSC_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(DIS_REF_OSC)}}
}

func VSTBY_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(VSTBY)}}
}

func STBY_COUNT_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(STBY_COUNT)}}
}

func COSC_PWRDOWN_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(COSC_PWRDOWN)}}
}

func BYPASS_LPM_HS1_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(BYPASS_LPM_HS1)}}
}

func BYPASS_LPM_HS0_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(BYPASS_LPM_HS0)}}
}

func MASK_CORE0_WFI_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(MASK_CORE0_WFI)}}
}

func MASK_SCU_IDLE_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(MASK_SCU_IDLE)}}
}

func MASK_L2CC_IDLE_(p *Periph) RMCLPCR {
	return RMCLPCR{mmio.UM32{&p.CLPCR.U32, uint32(MASK_L2CC_IDLE)}}
}

type CIR uint32

type RCIR struct{ mmio.U32 }

func (r *RCIR) LoadBits(mask CIR) CIR { return CIR(r.U32.LoadBits(uint32(mask))) }
func (r *RCIR) StoreBits(mask, b CIR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCIR) SetBits(mask CIR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCIR) ClearBits(mask CIR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCIR) Load() CIR             { return CIR(r.U32.Load()) }
func (r *RCIR) Store(b CIR)           { r.U32.Store(uint32(b)) }

type RMCIR struct{ mmio.UM32 }

func (rm RMCIR) Load() CIR   { return CIR(rm.UM32.Load()) }
func (rm RMCIR) Store(b CIR) { rm.UM32.Store(uint32(b)) }

type CCOSR uint32

type RCCOSR struct{ mmio.U32 }

func (r *RCCOSR) LoadBits(mask CCOSR) CCOSR { return CCOSR(r.U32.LoadBits(uint32(mask))) }
func (r *RCCOSR) StoreBits(mask, b CCOSR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCOSR) SetBits(mask CCOSR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCCOSR) ClearBits(mask CCOSR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCCOSR) Load() CCOSR               { return CCOSR(r.U32.Load()) }
func (r *RCCOSR) Store(b CCOSR)             { r.U32.Store(uint32(b)) }

type RMCCOSR struct{ mmio.UM32 }

func (rm RMCCOSR) Load() CCOSR   { return CCOSR(rm.UM32.Load()) }
func (rm RMCCOSR) Store(b CCOSR) { rm.UM32.Store(uint32(b)) }

func CLKO1_SEL_(p *Periph) RMCCOSR {
	return RMCCOSR{mmio.UM32{&p.CCOSR.U32, uint32(CLKO1_SEL)}}
}

func CLKO1_DIV_(p *Periph) RMCCOSR {
	return RMCCOSR{mmio.UM32{&p.CCOSR.U32, uint32(CLKO1_DIV)}}
}

func CLKO1_EN_(p *Periph) RMCCOSR {
	return RMCCOSR{mmio.UM32{&p.CCOSR.U32, uint32(CLKO1_EN)}}
}

func CLK_OUT_SEL_(p *Periph) RMCCOSR {
	return RMCCOSR{mmio.UM32{&p.CCOSR.U32, uint32(CLK_OUT_SEL)}}
}

func CLKO2_SEL_(p *Periph) RMCCOSR {
	return RMCCOSR{mmio.UM32{&p.CCOSR.U32, uint32(CLKO2_SEL)}}
}

func CLKO2_DIV_(p *Periph) RMCCOSR {
	return RMCCOSR{mmio.UM32{&p.CCOSR.U32, uint32(CLKO2_DIV)}}
}

func CLKO2_EN_(p *Periph) RMCCOSR {
	return RMCCOSR{mmio.UM32{&p.CCOSR.U32, uint32(CLKO2_EN)}}
}

type CGPR uint32

type RCGPR struct{ mmio.U32 }

func (r *RCGPR) LoadBits(mask CGPR) CGPR { return CGPR(r.U32.LoadBits(uint32(mask))) }
func (r *RCGPR) StoreBits(mask, b CGPR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCGPR) SetBits(mask CGPR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCGPR) ClearBits(mask CGPR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCGPR) Load() CGPR              { return CGPR(r.U32.Load()) }
func (r *RCGPR) Store(b CGPR)            { r.U32.Store(uint32(b)) }

type RMCGPR struct{ mmio.UM32 }

func (rm RMCGPR) Load() CGPR   { return CGPR(rm.UM32.Load()) }
func (rm RMCGPR) Store(b CGPR) { rm.UM32.Store(uint32(b)) }

func PMIC_DELAY_SCALER_(p *Periph) RMCGPR {
	return RMCGPR{mmio.UM32{&p.CGPR.U32, uint32(PMIC_DELAY_SCALER)}}
}

func EFUSE_PROG_SUPPLY_GATE_(p *Periph) RMCGPR {
	return RMCGPR{mmio.UM32{&p.CGPR.U32, uint32(EFUSE_PROG_SUPPLY_GATE)}}
}

func SYS_MEM_DS_CTRL_(p *Periph) RMCGPR {
	return RMCGPR{mmio.UM32{&p.CGPR.U32, uint32(SYS_MEM_DS_CTRL)}}
}

func FPL_(p *Periph) RMCGPR {
	return RMCGPR{mmio.UM32{&p.CGPR.U32, uint32(FPL)}}
}

func INT_MEM_CLK_LPM_(p *Periph) RMCGPR {
	return RMCGPR{mmio.UM32{&p.CGPR.U32, uint32(INT_MEM_CLK_LPM)}}
}

type CCGR0 uint32

type RCCGR0 struct{ mmio.U32 }

func (r *RCCGR0) LoadBits(mask CCGR0) CCGR0 { return CCGR0(r.U32.LoadBits(uint32(mask))) }
func (r *RCCGR0) StoreBits(mask, b CCGR0)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCGR0) SetBits(mask CCGR0)        { r.U32.SetBits(uint32(mask)) }
func (r *RCCGR0) ClearBits(mask CCGR0)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCCGR0) Load() CCGR0               { return CCGR0(r.U32.Load()) }
func (r *RCCGR0) Store(b CCGR0)             { r.U32.Store(uint32(b)) }

type RMCCGR0 struct{ mmio.UM32 }

func (rm RMCCGR0) Load() CCGR0   { return CCGR0(rm.UM32.Load()) }
func (rm RMCCGR0) Store(b CCGR0) { rm.UM32.Store(uint32(b)) }

func CG0_0_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_0)}}
}

func CG0_1_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_1)}}
}

func CG0_2_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_2)}}
}

func CG0_3_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_3)}}
}

func CG0_4_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_4)}}
}

func CG0_5_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_5)}}
}

func CG0_6_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_6)}}
}

func CG0_7_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_7)}}
}

func CG0_8_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_8)}}
}

func CG0_9_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_9)}}
}

func CG0_10_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_10)}}
}

func CG0_11_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_11)}}
}

func CG0_12_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_12)}}
}

func CG0_13_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_13)}}
}

func CG0_14_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_14)}}
}

func CG0_15_(p *Periph) RMCCGR0 {
	return RMCCGR0{mmio.UM32{&p.CCGR0.U32, uint32(CG0_15)}}
}

type CCGR1 uint32

type RCCGR1 struct{ mmio.U32 }

func (r *RCCGR1) LoadBits(mask CCGR1) CCGR1 { return CCGR1(r.U32.LoadBits(uint32(mask))) }
func (r *RCCGR1) StoreBits(mask, b CCGR1)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCGR1) SetBits(mask CCGR1)        { r.U32.SetBits(uint32(mask)) }
func (r *RCCGR1) ClearBits(mask CCGR1)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCCGR1) Load() CCGR1               { return CCGR1(r.U32.Load()) }
func (r *RCCGR1) Store(b CCGR1)             { r.U32.Store(uint32(b)) }

type RMCCGR1 struct{ mmio.UM32 }

func (rm RMCCGR1) Load() CCGR1   { return CCGR1(rm.UM32.Load()) }
func (rm RMCCGR1) Store(b CCGR1) { rm.UM32.Store(uint32(b)) }

func CG1_0_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_0)}}
}

func CG1_1_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_1)}}
}

func CG1_2_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_2)}}
}

func CG1_3_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_3)}}
}

func CG1_4_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_4)}}
}

func CG1_5_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_5)}}
}

func CG1_6_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_6)}}
}

func CG1_7_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_7)}}
}

func CG1_8_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_8)}}
}

func CG1_9_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_9)}}
}

func CG1_10_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_10)}}
}

func CG1_11_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_11)}}
}

func CG1_12_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_12)}}
}

func CG1_13_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_13)}}
}

func CG1_14_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_14)}}
}

func CG1_15_(p *Periph) RMCCGR1 {
	return RMCCGR1{mmio.UM32{&p.CCGR1.U32, uint32(CG1_15)}}
}

type CCGR2 uint32

type RCCGR2 struct{ mmio.U32 }

func (r *RCCGR2) LoadBits(mask CCGR2) CCGR2 { return CCGR2(r.U32.LoadBits(uint32(mask))) }
func (r *RCCGR2) StoreBits(mask, b CCGR2)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCGR2) SetBits(mask CCGR2)        { r.U32.SetBits(uint32(mask)) }
func (r *RCCGR2) ClearBits(mask CCGR2)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCCGR2) Load() CCGR2               { return CCGR2(r.U32.Load()) }
func (r *RCCGR2) Store(b CCGR2)             { r.U32.Store(uint32(b)) }

type RMCCGR2 struct{ mmio.UM32 }

func (rm RMCCGR2) Load() CCGR2   { return CCGR2(rm.UM32.Load()) }
func (rm RMCCGR2) Store(b CCGR2) { rm.UM32.Store(uint32(b)) }

func CG2_0_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_0)}}
}

func CG2_1_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_1)}}
}

func CG2_2_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_2)}}
}

func CG2_3_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_3)}}
}

func CG2_4_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_4)}}
}

func CG2_5_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_5)}}
}

func CG2_6_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_6)}}
}

func CG2_7_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_7)}}
}

func CG2_8_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_8)}}
}

func CG2_9_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_9)}}
}

func CG2_10_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_10)}}
}

func CG2_11_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_11)}}
}

func CG2_12_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_12)}}
}

func CG2_13_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_13)}}
}

func CG2_14_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_14)}}
}

func CG2_15_(p *Periph) RMCCGR2 {
	return RMCCGR2{mmio.UM32{&p.CCGR2.U32, uint32(CG2_15)}}
}

type CCGR3 uint32

type RCCGR3 struct{ mmio.U32 }

func (r *RCCGR3) LoadBits(mask CCGR3) CCGR3 { return CCGR3(r.U32.LoadBits(uint32(mask))) }
func (r *RCCGR3) StoreBits(mask, b CCGR3)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCGR3) SetBits(mask CCGR3)        { r.U32.SetBits(uint32(mask)) }
func (r *RCCGR3) ClearBits(mask CCGR3)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCCGR3) Load() CCGR3               { return CCGR3(r.U32.Load()) }
func (r *RCCGR3) Store(b CCGR3)             { r.U32.Store(uint32(b)) }

type RMCCGR3 struct{ mmio.UM32 }

func (rm RMCCGR3) Load() CCGR3   { return CCGR3(rm.UM32.Load()) }
func (rm RMCCGR3) Store(b CCGR3) { rm.UM32.Store(uint32(b)) }

func CG3_0_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_0)}}
}

func CG3_1_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_1)}}
}

func CG3_2_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_2)}}
}

func CG3_3_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_3)}}
}

func CG3_4_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_4)}}
}

func CG3_5_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_5)}}
}

func CG3_6_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_6)}}
}

func CG3_7_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_7)}}
}

func CG3_8_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_8)}}
}

func CG3_9_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_9)}}
}

func CG3_10_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_10)}}
}

func CG3_11_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_11)}}
}

func CG3_12_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_12)}}
}

func CG3_13_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_13)}}
}

func CG3_14_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_14)}}
}

func CG3_15_(p *Periph) RMCCGR3 {
	return RMCCGR3{mmio.UM32{&p.CCGR3.U32, uint32(CG3_15)}}
}

type CCGR4 uint32

type RCCGR4 struct{ mmio.U32 }

func (r *RCCGR4) LoadBits(mask CCGR4) CCGR4 { return CCGR4(r.U32.LoadBits(uint32(mask))) }
func (r *RCCGR4) StoreBits(mask, b CCGR4)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCGR4) SetBits(mask CCGR4)        { r.U32.SetBits(uint32(mask)) }
func (r *RCCGR4) ClearBits(mask CCGR4)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCCGR4) Load() CCGR4               { return CCGR4(r.U32.Load()) }
func (r *RCCGR4) Store(b CCGR4)             { r.U32.Store(uint32(b)) }

type RMCCGR4 struct{ mmio.UM32 }

func (rm RMCCGR4) Load() CCGR4   { return CCGR4(rm.UM32.Load()) }
func (rm RMCCGR4) Store(b CCGR4) { rm.UM32.Store(uint32(b)) }

func CG4_0_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_0)}}
}

func CG4_1_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_1)}}
}

func CG4_2_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_2)}}
}

func CG4_3_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_3)}}
}

func CG4_4_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_4)}}
}

func CG4_5_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_5)}}
}

func CG4_6_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_6)}}
}

func CG4_7_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_7)}}
}

func CG4_8_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_8)}}
}

func CG4_9_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_9)}}
}

func CG4_10_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_10)}}
}

func CG4_11_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_11)}}
}

func CG4_12_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_12)}}
}

func CG4_13_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_13)}}
}

func CG4_14_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_14)}}
}

func CG4_15_(p *Periph) RMCCGR4 {
	return RMCCGR4{mmio.UM32{&p.CCGR4.U32, uint32(CG4_15)}}
}

type CCGR5 uint32

type RCCGR5 struct{ mmio.U32 }

func (r *RCCGR5) LoadBits(mask CCGR5) CCGR5 { return CCGR5(r.U32.LoadBits(uint32(mask))) }
func (r *RCCGR5) StoreBits(mask, b CCGR5)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCGR5) SetBits(mask CCGR5)        { r.U32.SetBits(uint32(mask)) }
func (r *RCCGR5) ClearBits(mask CCGR5)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCCGR5) Load() CCGR5               { return CCGR5(r.U32.Load()) }
func (r *RCCGR5) Store(b CCGR5)             { r.U32.Store(uint32(b)) }

type RMCCGR5 struct{ mmio.UM32 }

func (rm RMCCGR5) Load() CCGR5   { return CCGR5(rm.UM32.Load()) }
func (rm RMCCGR5) Store(b CCGR5) { rm.UM32.Store(uint32(b)) }

func CG5_0_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_0)}}
}

func CG5_1_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_1)}}
}

func CG5_2_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_2)}}
}

func CG5_3_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_3)}}
}

func CG5_4_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_4)}}
}

func CG5_5_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_5)}}
}

func CG5_6_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_6)}}
}

func CG5_7_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_7)}}
}

func CG5_8_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_8)}}
}

func CG5_9_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_9)}}
}

func CG5_10_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_10)}}
}

func CG5_11_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_11)}}
}

func CG5_12_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_12)}}
}

func CG5_13_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_13)}}
}

func CG5_14_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_14)}}
}

func CG5_15_(p *Periph) RMCCGR5 {
	return RMCCGR5{mmio.UM32{&p.CCGR5.U32, uint32(CG5_15)}}
}

type CCGR6 uint32

type RCCGR6 struct{ mmio.U32 }

func (r *RCCGR6) LoadBits(mask CCGR6) CCGR6 { return CCGR6(r.U32.LoadBits(uint32(mask))) }
func (r *RCCGR6) StoreBits(mask, b CCGR6)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCGR6) SetBits(mask CCGR6)        { r.U32.SetBits(uint32(mask)) }
func (r *RCCGR6) ClearBits(mask CCGR6)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCCGR6) Load() CCGR6               { return CCGR6(r.U32.Load()) }
func (r *RCCGR6) Store(b CCGR6)             { r.U32.Store(uint32(b)) }

type RMCCGR6 struct{ mmio.UM32 }

func (rm RMCCGR6) Load() CCGR6   { return CCGR6(rm.UM32.Load()) }
func (rm RMCCGR6) Store(b CCGR6) { rm.UM32.Store(uint32(b)) }

func CG6_0_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_0)}}
}

func CG6_1_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_1)}}
}

func CG6_2_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_2)}}
}

func CG6_3_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_3)}}
}

func CG6_4_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_4)}}
}

func CG6_5_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_5)}}
}

func CG6_6_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_6)}}
}

func CG6_7_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_7)}}
}

func CG6_8_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_8)}}
}

func CG6_9_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_9)}}
}

func CG6_10_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_10)}}
}

func CG6_11_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_11)}}
}

func CG6_12_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_12)}}
}

func CG6_13_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_13)}}
}

func CG6_14_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_14)}}
}

func CG6_15_(p *Periph) RMCCGR6 {
	return RMCCGR6{mmio.UM32{&p.CCGR6.U32, uint32(CG6_15)}}
}

type CCGR7 uint32

type RCCGR7 struct{ mmio.U32 }

func (r *RCCGR7) LoadBits(mask CCGR7) CCGR7 { return CCGR7(r.U32.LoadBits(uint32(mask))) }
func (r *RCCGR7) StoreBits(mask, b CCGR7)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCGR7) SetBits(mask CCGR7)        { r.U32.SetBits(uint32(mask)) }
func (r *RCCGR7) ClearBits(mask CCGR7)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCCGR7) Load() CCGR7               { return CCGR7(r.U32.Load()) }
func (r *RCCGR7) Store(b CCGR7)             { r.U32.Store(uint32(b)) }

type RMCCGR7 struct{ mmio.UM32 }

func (rm RMCCGR7) Load() CCGR7   { return CCGR7(rm.UM32.Load()) }
func (rm RMCCGR7) Store(b CCGR7) { rm.UM32.Store(uint32(b)) }

func CG7_0_(p *Periph) RMCCGR7 {
	return RMCCGR7{mmio.UM32{&p.CCGR7.U32, uint32(CG7_0)}}
}

func CG7_1_(p *Periph) RMCCGR7 {
	return RMCCGR7{mmio.UM32{&p.CCGR7.U32, uint32(CG7_1)}}
}

func CG7_2_(p *Periph) RMCCGR7 {
	return RMCCGR7{mmio.UM32{&p.CCGR7.U32, uint32(CG7_2)}}
}

func CG7_3_(p *Periph) RMCCGR7 {
	return RMCCGR7{mmio.UM32{&p.CCGR7.U32, uint32(CG7_3)}}
}

func CG7_4_(p *Periph) RMCCGR7 {
	return RMCCGR7{mmio.UM32{&p.CCGR7.U32, uint32(CG7_4)}}
}

func CG7_5_(p *Periph) RMCCGR7 {
	return RMCCGR7{mmio.UM32{&p.CCGR7.U32, uint32(CG7_5)}}
}

func CG7_6_(p *Periph) RMCCGR7 {
	return RMCCGR7{mmio.UM32{&p.CCGR7.U32, uint32(CG7_6)}}
}

type CMEOR uint32

type RCMEOR struct{ mmio.U32 }

func (r *RCMEOR) LoadBits(mask CMEOR) CMEOR { return CMEOR(r.U32.LoadBits(uint32(mask))) }
func (r *RCMEOR) StoreBits(mask, b CMEOR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCMEOR) SetBits(mask CMEOR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCMEOR) ClearBits(mask CMEOR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCMEOR) Load() CMEOR               { return CMEOR(r.U32.Load()) }
func (r *RCMEOR) Store(b CMEOR)             { r.U32.Store(uint32(b)) }

type RMCMEOR struct{ mmio.UM32 }

func (rm RMCMEOR) Load() CMEOR   { return CMEOR(rm.UM32.Load()) }
func (rm RMCMEOR) Store(b CMEOR) { rm.UM32.Store(uint32(b)) }

func MOD_EN_OV_GPT_(p *Periph) RMCMEOR {
	return RMCMEOR{mmio.UM32{&p.CMEOR.U32, uint32(MOD_EN_OV_GPT)}}
}

func MOD_EN_OV_PIT_(p *Periph) RMCMEOR {
	return RMCMEOR{mmio.UM32{&p.CMEOR.U32, uint32(MOD_EN_OV_PIT)}}
}

func MOD_EN_USDHC_(p *Periph) RMCMEOR {
	return RMCMEOR{mmio.UM32{&p.CMEOR.U32, uint32(MOD_EN_USDHC)}}
}

func MOD_EN_OV_TRNG_(p *Periph) RMCMEOR {
	return RMCMEOR{mmio.UM32{&p.CMEOR.U32, uint32(MOD_EN_OV_TRNG)}}
}

func MOD_EN_OV_CANFD_CPI_(p *Periph) RMCMEOR {
	return RMCMEOR{mmio.UM32{&p.CMEOR.U32, uint32(MOD_EN_OV_CANFD_CPI)}}
}

func MOD_EN_OV_CAN2_CPI_(p *Periph) RMCMEOR {
	return RMCMEOR{mmio.UM32{&p.CMEOR.U32, uint32(MOD_EN_OV_CAN2_CPI)}}
}

func MOD_EN_OV_CAN1_CPI_(p *Periph) RMCMEOR {
	return RMCMEOR{mmio.UM32{&p.CMEOR.U32, uint32(MOD_EN_OV_CAN1_CPI)}}
}
