// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build imxrt1060

// Package lpspi provides access to the registers of the LPSPI peripheral.
//
// Instances:
//  LPSPI1  LPSPI1_BASE  -  LPSPI1*
//  LPSPI2  LPSPI2_BASE  -  LPSPI2*
//  LPSPI3  LPSPI3_BASE  -  LPSPI3*
//  LPSPI4  LPSPI4_BASE  -  LPSPI4*
// Registers:
//  0x000 32  VERID  Version ID Register
//  0x004 32  PARAM  Parameter Register
//  0x010 32  CR     Control Register
//  0x014 32  SR     Status Register
//  0x018 32  IER    Interrupt Enable Register
//  0x01C 32  DER    DMA Enable Register
//  0x020 32  CFGR0  Configuration Register 0
//  0x024 32  CFGR1  Configuration Register 1
//  0x030 32  DMR0   Data Match Register 0
//  0x034 32  DMR1   Data Match Register 1
//  0x040 32  CCR    Clock Configuration Register
//  0x058 32  FCR    FIFO Control Register
//  0x05C 32  FSR    FIFO Status Register
//  0x060 32  TCR    Transmit Command Register
//  0x064 32  TDR    Transmit Data Register
//  0x070 32  RSR    Receive Status Register
//  0x074 32  RDR    Receive Data Register
// Import:
//  github.com/embeddedgo/imxrt/p/mmap
package lpspi

const (
	FEATURE   VERID = 0xFFFF << 0 //+ Module Identification Number
	FEATURE_4 VERID = 0x04 << 0   //  Standard feature set supporting a 32-bit shift register.
	MINOR     VERID = 0xFF << 16  //+ Minor Version Number
	MAJOR     VERID = 0xFF << 24  //+ Major Version Number
)

const (
	FEATUREn = 0
	MINORn   = 16
	MAJORn   = 24
)

const (
	TXFIFO PARAM = 0xFF << 0  //+ Transmit FIFO Size
	RXFIFO PARAM = 0xFF << 8  //+ Receive FIFO Size
	PCSNUM PARAM = 0xFF << 16 //+ PCS Number
)

const (
	TXFIFOn = 0
	RXFIFOn = 8
	PCSNUMn = 16
)

const (
	MEN     CR = 0x01 << 0 //+ Module Enable
	MEN_0   CR = 0x00 << 0 //  Module is disabled
	MEN_1   CR = 0x01 << 0 //  Module is enabled
	RST     CR = 0x01 << 1 //+ Software Reset
	RST_0   CR = 0x00 << 1 //  Module is not reset
	RST_1   CR = 0x01 << 1 //  Module is reset
	DOZEN   CR = 0x01 << 2 //+ Doze mode enable
	DOZEN_0 CR = 0x00 << 2 //  Module is enabled in Doze mode
	DOZEN_1 CR = 0x01 << 2 //  Module is disabled in Doze mode
	DBGEN   CR = 0x01 << 3 //+ Debug Enable
	DBGEN_0 CR = 0x00 << 3 //  Module is disabled in debug mode
	DBGEN_1 CR = 0x01 << 3 //  Module is enabled in debug mode
	RTF     CR = 0x01 << 8 //+ Reset Transmit FIFO
	RTF_0   CR = 0x00 << 8 //  No effect
	RTF_1   CR = 0x01 << 8 //  Transmit FIFO is reset
	RRF     CR = 0x01 << 9 //+ Reset Receive FIFO
	RRF_0   CR = 0x00 << 9 //  No effect
	RRF_1   CR = 0x01 << 9 //  Receive FIFO is reset
)

const (
	MENn   = 0
	RSTn   = 1
	DOZENn = 2
	DBGENn = 3
	RTFn   = 8
	RRFn   = 9
)

const (
	TDF   SR = 0x01 << 0  //+ Transmit Data Flag
	TDF_0 SR = 0x00 << 0  //  Transmit data not requested
	TDF_1 SR = 0x01 << 0  //  Transmit data is requested
	RDF   SR = 0x01 << 1  //+ Receive Data Flag
	RDF_0 SR = 0x00 << 1  //  Receive Data is not ready
	RDF_1 SR = 0x01 << 1  //  Receive data is ready
	WCF   SR = 0x01 << 8  //+ Word Complete Flag
	WCF_0 SR = 0x00 << 8  //  Transfer of a received word has not yet completed
	WCF_1 SR = 0x01 << 8  //  Transfer of a received word has completed
	FCF   SR = 0x01 << 9  //+ Frame Complete Flag
	FCF_0 SR = 0x00 << 9  //  Frame transfer has not completed
	FCF_1 SR = 0x01 << 9  //  Frame transfer has completed
	TCF   SR = 0x01 << 10 //+ Transfer Complete Flag
	TCF_0 SR = 0x00 << 10 //  All transfers have not completed
	TCF_1 SR = 0x01 << 10 //  All transfers have completed
	TEF   SR = 0x01 << 11 //+ Transmit Error Flag
	TEF_0 SR = 0x00 << 11 //  Transmit FIFO underrun has not occurred
	TEF_1 SR = 0x01 << 11 //  Transmit FIFO underrun has occurred
	REF   SR = 0x01 << 12 //+ Receive Error Flag
	REF_0 SR = 0x00 << 12 //  Receive FIFO has not overflowed
	REF_1 SR = 0x01 << 12 //  Receive FIFO has overflowed
	DMF   SR = 0x01 << 13 //+ Data Match Flag
	DMF_0 SR = 0x00 << 13 //  Have not received matching data
	DMF_1 SR = 0x01 << 13 //  Have received matching data
	MBF   SR = 0x01 << 24 //+ Module Busy Flag
	MBF_0 SR = 0x00 << 24 //  LPSPI is idle
	MBF_1 SR = 0x01 << 24 //  LPSPI is busy
)

const (
	TDFn = 0
	RDFn = 1
	WCFn = 8
	FCFn = 9
	TCFn = 10
	TEFn = 11
	REFn = 12
	DMFn = 13
	MBFn = 24
)

const (
	TDIE   IER = 0x01 << 0  //+ Transmit Data Interrupt Enable
	TDIE_0 IER = 0x00 << 0  //  Disabled
	TDIE_1 IER = 0x01 << 0  //  Enabled
	RDIE   IER = 0x01 << 1  //+ Receive Data Interrupt Enable
	RDIE_0 IER = 0x00 << 1  //  Disabled
	RDIE_1 IER = 0x01 << 1  //  Enabled
	WCIE   IER = 0x01 << 8  //+ Word Complete Interrupt Enable
	WCIE_0 IER = 0x00 << 8  //  Disabled
	WCIE_1 IER = 0x01 << 8  //  Enabled
	FCIE   IER = 0x01 << 9  //+ Frame Complete Interrupt Enable
	FCIE_0 IER = 0x00 << 9  //  Disabled
	FCIE_1 IER = 0x01 << 9  //  Enabled
	TCIE   IER = 0x01 << 10 //+ Transfer Complete Interrupt Enable
	TCIE_0 IER = 0x00 << 10 //  Disabled
	TCIE_1 IER = 0x01 << 10 //  Enabled
	TEIE   IER = 0x01 << 11 //+ Transmit Error Interrupt Enable
	TEIE_0 IER = 0x00 << 11 //  Disabled
	TEIE_1 IER = 0x01 << 11 //  Enabled
	REIE   IER = 0x01 << 12 //+ Receive Error Interrupt Enable
	REIE_0 IER = 0x00 << 12 //  Disabled
	REIE_1 IER = 0x01 << 12 //  Enabled
	DMIE   IER = 0x01 << 13 //+ Data Match Interrupt Enable
	DMIE_0 IER = 0x00 << 13 //  Disabled
	DMIE_1 IER = 0x01 << 13 //  Enabled
)

const (
	TDIEn = 0
	RDIEn = 1
	WCIEn = 8
	FCIEn = 9
	TCIEn = 10
	TEIEn = 11
	REIEn = 12
	DMIEn = 13
)

const (
	TDDE   DER = 0x01 << 0 //+ Transmit Data DMA Enable
	TDDE_0 DER = 0x00 << 0 //  DMA request is disabled
	TDDE_1 DER = 0x01 << 0 //  DMA request is enabled
	RDDE   DER = 0x01 << 1 //+ Receive Data DMA Enable
	RDDE_0 DER = 0x00 << 1 //  DMA request is disabled
	RDDE_1 DER = 0x01 << 1 //  DMA request is enabled
)

const (
	TDDEn = 0
	RDDEn = 1
)

const (
	HREN      CFGR0 = 0x01 << 0 //+ Host Request Enable
	HREN_0    CFGR0 = 0x00 << 0 //  Host request is disabled
	HREN_1    CFGR0 = 0x01 << 0 //  Host request is enabled
	HRPOL     CFGR0 = 0x01 << 1 //+ Host Request Polarity
	HRPOL_0   CFGR0 = 0x00 << 1 //  Active low
	HRPOL_1   CFGR0 = 0x01 << 1 //  Active high
	HRSEL     CFGR0 = 0x01 << 2 //+ Host Request Select
	HRSEL_0   CFGR0 = 0x00 << 2 //  Host request input is the LPSPI_HREQ pin
	HRSEL_1   CFGR0 = 0x01 << 2 //  Host request input is the input trigger
	CIRFIFO   CFGR0 = 0x01 << 8 //+ Circular FIFO Enable
	CIRFIFO_0 CFGR0 = 0x00 << 8 //  Circular FIFO is disabled
	CIRFIFO_1 CFGR0 = 0x01 << 8 //  Circular FIFO is enabled
	RDMO      CFGR0 = 0x01 << 9 //+ Receive Data Match Only
	RDMO_0    CFGR0 = 0x00 << 9 //  Received data is stored in the receive FIFO as in normal operations
	RDMO_1    CFGR0 = 0x01 << 9 //  Received data is discarded unless the Data Match Flag (DMF) is set
)

const (
	HRENn    = 0
	HRPOLn   = 1
	HRSELn   = 2
	CIRFIFOn = 8
	RDMOn    = 9
)

const (
	MASTER    CFGR1 = 0x01 << 0  //+ Master Mode
	MASTER_0  CFGR1 = 0x00 << 0  //  Slave mode
	MASTER_1  CFGR1 = 0x01 << 0  //  Master mode
	SAMPLE    CFGR1 = 0x01 << 1  //+ Sample Point
	SAMPLE_0  CFGR1 = 0x00 << 1  //  Input data is sampled on SCK edge
	SAMPLE_1  CFGR1 = 0x01 << 1  //  Input data is sampled on delayed SCK edge
	AUTOPCS   CFGR1 = 0x01 << 2  //+ Automatic PCS
	AUTOPCS_0 CFGR1 = 0x00 << 2  //  Automatic PCS generation is disabled
	AUTOPCS_1 CFGR1 = 0x01 << 2  //  Automatic PCS generation is enabled
	NOSTALL   CFGR1 = 0x01 << 3  //+ No Stall
	NOSTALL_0 CFGR1 = 0x00 << 3  //  Transfers will stall when the transmit FIFO is empty or the receive FIFO is full
	NOSTALL_1 CFGR1 = 0x01 << 3  //  Transfers will not stall, allowing transmit FIFO underruns or receive FIFO overruns to occur
	PCSPOL    CFGR1 = 0x0F << 8  //+ Peripheral Chip Select Polarity
	PCSPOL_0  CFGR1 = 0x00 << 8  //  The Peripheral Chip Select pin PCSx is active low
	PCSPOL_1  CFGR1 = 0x01 << 8  //  The Peripheral Chip Select pin PCSx is active high
	MATCFG    CFGR1 = 0x07 << 16 //+ Match Configuration
	MATCFG_0  CFGR1 = 0x00 << 16 //  Match is disabled
	MATCFG_2  CFGR1 = 0x02 << 16 //  010b - Match is enabled, if 1st data word equals MATCH0 OR MATCH1, i.e., (1st data word = MATCH0 + MATCH1)
	MATCFG_3  CFGR1 = 0x03 << 16 //  011b - Match is enabled, if any data word equals MATCH0 OR MATCH1, i.e., (any data word = MATCH0 + MATCH1)
	MATCFG_4  CFGR1 = 0x04 << 16 //  100b - Match is enabled, if 1st data word equals MATCH0 AND 2nd data word equals MATCH1, i.e., [(1st data word = MATCH0) * (2nd data word = MATCH1)]
	MATCFG_5  CFGR1 = 0x05 << 16 //  101b - Match is enabled, if any data word equals MATCH0 AND the next data word equals MATCH1, i.e., [(any data word = MATCH0) * (next data word = MATCH1)]
	MATCFG_6  CFGR1 = 0x06 << 16 //  110b - Match is enabled, if (1st data word AND MATCH1) equals (MATCH0 AND MATCH1), i.e., [(1st data word * MATCH1) = (MATCH0 * MATCH1)]
	MATCFG_7  CFGR1 = 0x07 << 16 //  111b - Match is enabled, if (any data word AND MATCH1) equals (MATCH0 AND MATCH1), i.e., [(any data word * MATCH1) = (MATCH0 * MATCH1)]
	PINCFG    CFGR1 = 0x03 << 24 //+ Pin Configuration
	PINCFG_0  CFGR1 = 0x00 << 24 //  SIN is used for input data and SOUT is used for output data
	PINCFG_1  CFGR1 = 0x01 << 24 //  SIN is used for both input and output data
	PINCFG_2  CFGR1 = 0x02 << 24 //  SOUT is used for both input and output data
	PINCFG_3  CFGR1 = 0x03 << 24 //  SOUT is used for input data and SIN is used for output data
	OUTCFG    CFGR1 = 0x01 << 26 //+ Output Config
	OUTCFG_0  CFGR1 = 0x00 << 26 //  Output data retains last value when chip select is negated
	OUTCFG_1  CFGR1 = 0x01 << 26 //  Output data is tristated when chip select is negated
	PCSCFG    CFGR1 = 0x01 << 27 //+ Peripheral Chip Select Configuration
	PCSCFG_0  CFGR1 = 0x00 << 27 //  PCS[3:2] are enabled
	PCSCFG_1  CFGR1 = 0x01 << 27 //  PCS[3:2] are disabled
)

const (
	MASTERn  = 0
	SAMPLEn  = 1
	AUTOPCSn = 2
	NOSTALLn = 3
	PCSPOLn  = 8
	MATCFGn  = 16
	PINCFGn  = 24
	OUTCFGn  = 26
	PCSCFGn  = 27
)

const (
	MATCH0 DMR0 = 0xFFFFFFFF << 0 //+ Match 0 Value
)

const (
	MATCH0n = 0
)

const (
	MATCH1 DMR1 = 0xFFFFFFFF << 0 //+ Match 1 Value
)

const (
	MATCH1n = 0
)

const (
	SCKDIV CCR = 0xFF << 0  //+ SCK Divider
	DBT    CCR = 0xFF << 8  //+ Delay Between Transfers
	PCSSCK CCR = 0xFF << 16 //+ PCS-to-SCK Delay
	SCKPCS CCR = 0xFF << 24 //+ SCK-to-PCS Delay
)

const (
	SCKDIVn = 0
	DBTn    = 8
	PCSSCKn = 16
	SCKPCSn = 24
)

const (
	TXWATER FCR = 0x0F << 0  //+ Transmit FIFO Watermark
	RXWATER FCR = 0x0F << 16 //+ Receive FIFO Watermark
)

const (
	TXWATERn = 0
	RXWATERn = 16
)

const (
	TXCOUNT FSR = 0x1F << 0  //+ Transmit FIFO Count
	RXCOUNT FSR = 0x1F << 16 //+ Receive FIFO Count
)

const (
	TXCOUNTn = 0
	RXCOUNTn = 16
)

const (
	FRAMESZ    TCR = 0xFFF << 0 //+ Frame Size
	WIDTH      TCR = 0x03 << 16 //+ Transfer Width
	WIDTH_0    TCR = 0x00 << 16 //  1 bit transfer
	WIDTH_1    TCR = 0x01 << 16 //  2 bit transfer
	WIDTH_2    TCR = 0x02 << 16 //  4 bit transfer
	TXMSK      TCR = 0x01 << 18 //+ Transmit Data Mask
	TXMSK_0    TCR = 0x00 << 18 //  Normal transfer
	TXMSK_1    TCR = 0x01 << 18 //  Mask transmit data
	RXMSK      TCR = 0x01 << 19 //+ Receive Data Mask
	RXMSK_0    TCR = 0x00 << 19 //  Normal transfer
	RXMSK_1    TCR = 0x01 << 19 //  Receive data is masked
	CONTC      TCR = 0x01 << 20 //+ Continuing Command
	CONTC_0    TCR = 0x00 << 20 //  Command word for start of new transfer
	CONTC_1    TCR = 0x01 << 20 //  Command word for continuing transfer
	CONT       TCR = 0x01 << 21 //+ Continuous Transfer
	CONT_0     TCR = 0x00 << 21 //  Continuous transfer is disabled
	CONT_1     TCR = 0x01 << 21 //  Continuous transfer is enabled
	BYSW       TCR = 0x01 << 22 //+ Byte Swap
	BYSW_0     TCR = 0x00 << 22 //  Byte swap is disabled
	BYSW_1     TCR = 0x01 << 22 //  Byte swap is enabled
	LSBF       TCR = 0x01 << 23 //+ LSB First
	LSBF_0     TCR = 0x00 << 23 //  Data is transferred MSB first
	LSBF_1     TCR = 0x01 << 23 //  Data is transferred LSB first
	PCS        TCR = 0x03 << 24 //+ Peripheral Chip Select
	PCS_0      TCR = 0x00 << 24 //  Transfer using LPSPI_PCS[0]
	PCS_1      TCR = 0x01 << 24 //  Transfer using LPSPI_PCS[1]
	PCS_2      TCR = 0x02 << 24 //  Transfer using LPSPI_PCS[2]
	PCS_3      TCR = 0x03 << 24 //  Transfer using LPSPI_PCS[3]
	PRESCALE   TCR = 0x07 << 27 //+ Prescaler Value
	PRESCALE_0 TCR = 0x00 << 27 //  Divide by 1
	PRESCALE_1 TCR = 0x01 << 27 //  Divide by 2
	PRESCALE_2 TCR = 0x02 << 27 //  Divide by 4
	PRESCALE_3 TCR = 0x03 << 27 //  Divide by 8
	PRESCALE_4 TCR = 0x04 << 27 //  Divide by 16
	PRESCALE_5 TCR = 0x05 << 27 //  Divide by 32
	PRESCALE_6 TCR = 0x06 << 27 //  Divide by 64
	PRESCALE_7 TCR = 0x07 << 27 //  Divide by 128
	CPHA       TCR = 0x01 << 30 //+ Clock Phase
	CPHA_0     TCR = 0x00 << 30 //  Data is captured on the leading edge of SCK and changed on the following edge of SCK
	CPHA_1     TCR = 0x01 << 30 //  Data is changed on the leading edge of SCK and captured on the following edge of SCK
	CPOL       TCR = 0x01 << 31 //+ Clock Polarity
	CPOL_0     TCR = 0x00 << 31 //  The inactive state value of SCK is low
	CPOL_1     TCR = 0x01 << 31 //  The inactive state value of SCK is high
)

const (
	FRAMESZn  = 0
	WIDTHn    = 16
	TXMSKn    = 18
	RXMSKn    = 19
	CONTCn    = 20
	CONTn     = 21
	BYSWn     = 22
	LSBFn     = 23
	PCSn      = 24
	PRESCALEn = 27
	CPHAn     = 30
	CPOLn     = 31
)

const (
	DATA TDR = 0xFFFFFFFF << 0 //+ Transmit Data
)

const (
	DATAn = 0
)

const (
	SOF       RSR = 0x01 << 0 //+ Start Of Frame
	SOF_0     RSR = 0x00 << 0 //  Subsequent data word received after LPSPI_PCS assertion
	SOF_1     RSR = 0x01 << 0 //  First data word received after LPSPI_PCS assertion
	RXEMPTY   RSR = 0x01 << 1 //+ RX FIFO Empty
	RXEMPTY_0 RSR = 0x00 << 1 //  RX FIFO is not empty
	RXEMPTY_1 RSR = 0x01 << 1 //  RX FIFO is empty
)

const (
	SOFn     = 0
	RXEMPTYn = 1
)

const (
	DATA RDR = 0xFFFFFFFF << 0 //+ Receive Data
)

const (
	DATAn = 0
)
