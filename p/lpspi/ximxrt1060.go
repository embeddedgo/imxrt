// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build imxrt1060

package lpspi

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	VERID mmio.R32[VERID]
	PARAM mmio.R32[PARAM]
	_     [2]uint32
	CR    mmio.R32[CR]
	SR    mmio.R32[SR]
	IER   mmio.R32[IER]
	DER   mmio.R32[DER]
	CFGR0 mmio.R32[CFGR0]
	CFGR1 mmio.R32[CFGR1]
	_     [2]uint32
	DMR0  mmio.R32[uint32]
	DMR1  mmio.R32[uint32]
	_     [2]uint32
	CCR   mmio.R32[CCR]
	_     [5]uint32
	FCR   mmio.R32[FCR]
	FSR   mmio.R32[FSR]
	TCR   mmio.R32[TCR]
	TDR   mmio.R32[uint32]
	_     [2]uint32
	RSR   mmio.R32[RSR]
	RDR   mmio.R32[uint32]
}

func LPSPI1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPSPI1_BASE))) }
func LPSPI2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPSPI2_BASE))) }
func LPSPI3() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPSPI3_BASE))) }
func LPSPI4() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.LPSPI4_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type VERID uint32

func FEATURE_(p *Periph) mmio.RM32[VERID] { return mmio.RM32[VERID]{&p.VERID, FEATURE} }
func MINOR_(p *Periph) mmio.RM32[VERID]   { return mmio.RM32[VERID]{&p.VERID, MINOR} }
func MAJOR_(p *Periph) mmio.RM32[VERID]   { return mmio.RM32[VERID]{&p.VERID, MAJOR} }

type PARAM uint32

func TXFIFO_(p *Periph) mmio.RM32[PARAM] { return mmio.RM32[PARAM]{&p.PARAM, TXFIFO} }
func RXFIFO_(p *Periph) mmio.RM32[PARAM] { return mmio.RM32[PARAM]{&p.PARAM, RXFIFO} }
func PCSNUM_(p *Periph) mmio.RM32[PARAM] { return mmio.RM32[PARAM]{&p.PARAM, PCSNUM} }

type CR uint32

func MEN_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, MEN} }
func RST_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, RST} }
func DOZEN_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, DOZEN} }
func DBGEN_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, DBGEN} }
func RTF_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, RTF} }
func RRF_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, RRF} }

type SR uint32

func TDF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{&p.SR, TDF} }
func RDF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{&p.SR, RDF} }
func WCF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{&p.SR, WCF} }
func FCF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{&p.SR, FCF} }
func TCF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{&p.SR, TCF} }
func TEF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{&p.SR, TEF} }
func REF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{&p.SR, REF} }
func DMF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{&p.SR, DMF} }
func MBF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{&p.SR, MBF} }

type IER uint32

func TDIE_(p *Periph) mmio.RM32[IER] { return mmio.RM32[IER]{&p.IER, TDIE} }
func RDIE_(p *Periph) mmio.RM32[IER] { return mmio.RM32[IER]{&p.IER, RDIE} }
func WCIE_(p *Periph) mmio.RM32[IER] { return mmio.RM32[IER]{&p.IER, WCIE} }
func FCIE_(p *Periph) mmio.RM32[IER] { return mmio.RM32[IER]{&p.IER, FCIE} }
func TCIE_(p *Periph) mmio.RM32[IER] { return mmio.RM32[IER]{&p.IER, TCIE} }
func TEIE_(p *Periph) mmio.RM32[IER] { return mmio.RM32[IER]{&p.IER, TEIE} }
func REIE_(p *Periph) mmio.RM32[IER] { return mmio.RM32[IER]{&p.IER, REIE} }
func DMIE_(p *Periph) mmio.RM32[IER] { return mmio.RM32[IER]{&p.IER, DMIE} }

type DER uint32

func TDDE_(p *Periph) mmio.RM32[DER] { return mmio.RM32[DER]{&p.DER, TDDE} }
func RDDE_(p *Periph) mmio.RM32[DER] { return mmio.RM32[DER]{&p.DER, RDDE} }

type CFGR0 uint32

func HREN_(p *Periph) mmio.RM32[CFGR0]    { return mmio.RM32[CFGR0]{&p.CFGR0, HREN} }
func HRPOL_(p *Periph) mmio.RM32[CFGR0]   { return mmio.RM32[CFGR0]{&p.CFGR0, HRPOL} }
func HRSEL_(p *Periph) mmio.RM32[CFGR0]   { return mmio.RM32[CFGR0]{&p.CFGR0, HRSEL} }
func CIRFIFO_(p *Periph) mmio.RM32[CFGR0] { return mmio.RM32[CFGR0]{&p.CFGR0, CIRFIFO} }
func RDMO_(p *Periph) mmio.RM32[CFGR0]    { return mmio.RM32[CFGR0]{&p.CFGR0, RDMO} }

type CFGR1 uint32

func MASTER_(p *Periph) mmio.RM32[CFGR1]  { return mmio.RM32[CFGR1]{&p.CFGR1, MASTER} }
func SAMPLE_(p *Periph) mmio.RM32[CFGR1]  { return mmio.RM32[CFGR1]{&p.CFGR1, SAMPLE} }
func AUTOPCS_(p *Periph) mmio.RM32[CFGR1] { return mmio.RM32[CFGR1]{&p.CFGR1, AUTOPCS} }
func NOSTALL_(p *Periph) mmio.RM32[CFGR1] { return mmio.RM32[CFGR1]{&p.CFGR1, NOSTALL} }
func PCSPOL_(p *Periph) mmio.RM32[CFGR1]  { return mmio.RM32[CFGR1]{&p.CFGR1, PCSPOL} }
func MATCFG_(p *Periph) mmio.RM32[CFGR1]  { return mmio.RM32[CFGR1]{&p.CFGR1, MATCFG} }
func PINCFG_(p *Periph) mmio.RM32[CFGR1]  { return mmio.RM32[CFGR1]{&p.CFGR1, PINCFG} }
func OUTCFG_(p *Periph) mmio.RM32[CFGR1]  { return mmio.RM32[CFGR1]{&p.CFGR1, OUTCFG} }
func PCSCFG_(p *Periph) mmio.RM32[CFGR1]  { return mmio.RM32[CFGR1]{&p.CFGR1, PCSCFG} }

type CCR uint32

func SCKDIV_(p *Periph) mmio.RM32[CCR] { return mmio.RM32[CCR]{&p.CCR, SCKDIV} }
func DBT_(p *Periph) mmio.RM32[CCR]    { return mmio.RM32[CCR]{&p.CCR, DBT} }
func PCSSCK_(p *Periph) mmio.RM32[CCR] { return mmio.RM32[CCR]{&p.CCR, PCSSCK} }
func SCKPCS_(p *Periph) mmio.RM32[CCR] { return mmio.RM32[CCR]{&p.CCR, SCKPCS} }

type FCR uint32

func TXWATER_(p *Periph) mmio.RM32[FCR] { return mmio.RM32[FCR]{&p.FCR, TXWATER} }
func RXWATER_(p *Periph) mmio.RM32[FCR] { return mmio.RM32[FCR]{&p.FCR, RXWATER} }

type FSR uint32

func TXCOUNT_(p *Periph) mmio.RM32[FSR] { return mmio.RM32[FSR]{&p.FSR, TXCOUNT} }
func RXCOUNT_(p *Periph) mmio.RM32[FSR] { return mmio.RM32[FSR]{&p.FSR, RXCOUNT} }

type TCR uint32

func FRAMESZ_(p *Periph) mmio.RM32[TCR]  { return mmio.RM32[TCR]{&p.TCR, FRAMESZ} }
func WIDTH_(p *Periph) mmio.RM32[TCR]    { return mmio.RM32[TCR]{&p.TCR, WIDTH} }
func TXMSK_(p *Periph) mmio.RM32[TCR]    { return mmio.RM32[TCR]{&p.TCR, TXMSK} }
func RXMSK_(p *Periph) mmio.RM32[TCR]    { return mmio.RM32[TCR]{&p.TCR, RXMSK} }
func CONTC_(p *Periph) mmio.RM32[TCR]    { return mmio.RM32[TCR]{&p.TCR, CONTC} }
func CONT_(p *Periph) mmio.RM32[TCR]     { return mmio.RM32[TCR]{&p.TCR, CONT} }
func BYSW_(p *Periph) mmio.RM32[TCR]     { return mmio.RM32[TCR]{&p.TCR, BYSW} }
func LSBF_(p *Periph) mmio.RM32[TCR]     { return mmio.RM32[TCR]{&p.TCR, LSBF} }
func PCS_(p *Periph) mmio.RM32[TCR]      { return mmio.RM32[TCR]{&p.TCR, PCS} }
func PRESCALE_(p *Periph) mmio.RM32[TCR] { return mmio.RM32[TCR]{&p.TCR, PRESCALE} }
func CPHA_(p *Periph) mmio.RM32[TCR]     { return mmio.RM32[TCR]{&p.TCR, CPHA} }
func CPOL_(p *Periph) mmio.RM32[TCR]     { return mmio.RM32[TCR]{&p.TCR, CPOL} }

type RSR uint32

func SOF_(p *Periph) mmio.RM32[RSR]     { return mmio.RM32[RSR]{&p.RSR, SOF} }
func RXEMPTY_(p *Periph) mmio.RM32[RSR] { return mmio.RM32[RSR]{&p.RSR, RXEMPTY} }
