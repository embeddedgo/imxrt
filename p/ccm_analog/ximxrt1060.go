// DO NOT EDIT THIS FILE. GENERATED BY xgen.

package ccm_analog

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	PLL_ARM         RPLL_ARM
	PLL_ARM_SET     RPLL_ARM
	PLL_ARM_CLR     RPLL_ARM
	PLL_ARM_TOG     RPLL_ARM
	PLL_USB1        RPLL_USB
	PLL_USB1_SET    RPLL_USB
	PLL_USB1_CLR    RPLL_USB
	PLL_USB1_TOG    RPLL_USB
	PLL_USB2        RPLL_USB
	PLL_USB2_SET    RPLL_USB
	PLL_USB2_CLR    RPLL_USB
	PLL_USB2_TOG    RPLL_USB
	PLL_SYS         RPLL_SYS
	PLL_SYS_SET     RPLL_SYS
	PLL_SYS_CLR     RPLL_SYS
	PLL_SYS_TOG     RPLL_SYS
	PLL_SYS_SS      RPLL_SYS_SS
	_               [3]uint32
	PLL_SYS_NUM     RPLL_SYS_NUM
	_               [3]uint32
	PLL_SYS_DENOM   RPLL_SYS_DENOM
	_               [3]uint32
	PLL_AUDIO       RPLL_AV
	PLL_AUDIO_SET   RPLL_AV
	PLL_AUDIO_CLR   RPLL_AV
	PLL_AUDIO_TOG   RPLL_AV
	PLL_AUDIO_NUM   RPLL_AV
	_               [3]uint32
	PLL_AUDIO_DENOM RPLL_AV
	_               [3]uint32
	PLL_VIDEO       RPLL_AV
	PLL_VIDEO_SET   RPLL_AV
	PLL_VIDEO_CLR   RPLL_AV
	PLL_VIDEO_TOG   RPLL_AV
	PLL_VIDEO_NUM   RPLL_AV
	_               [3]uint32
	PLL_VIDEO_DENOM RPLL_AV
	_               [7]uint32
	PLL_ENET        RPLL_ENET
	PLL_ENET_SET    RPLL_ENET
	PLL_ENET_CLR    RPLL_ENET
	PLL_ENET_TOG    RPLL_ENET
	PFD_480         RPFD
	PFD_480_SET     RPFD
	PFD_480_CLR     RPFD
	PFD_480_TOG     RPFD
	PFD_528         RPFD
	PFD_528_SET     RPFD
	PFD_528_CLR     RPFD
	PFD_528_TOG     RPFD
	_               [16]uint32
	MISC0           RMISC0
	MISC0_SET       RMISC0
	MISC0_CLR       RMISC0
	MISC0_TOG       RMISC0
	MISC1           RMISC1
	MISC1_SET       RMISC1
	MISC1_CLR       RMISC1
	MISC1_TOG       RMISC1
	MISC2           RMISC2
	MISC2_SET       RMISC2
	MISC2_CLR       RMISC2
	MISC2_TOG       RMISC2
}

func CCM_ANALOG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.CCM_ANALOG_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type PLL_ARM uint32

type RPLL_ARM struct{ mmio.U32 }

func (r *RPLL_ARM) LoadBits(mask PLL_ARM) PLL_ARM { return PLL_ARM(r.U32.LoadBits(uint32(mask))) }
func (r *RPLL_ARM) StoreBits(mask, b PLL_ARM)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL_ARM) SetBits(mask PLL_ARM)          { r.U32.SetBits(uint32(mask)) }
func (r *RPLL_ARM) ClearBits(mask PLL_ARM)        { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL_ARM) Load() PLL_ARM                 { return PLL_ARM(r.U32.Load()) }
func (r *RPLL_ARM) Store(b PLL_ARM)               { r.U32.Store(uint32(b)) }

type RMPLL_ARM struct{ mmio.UM32 }

func (rm RMPLL_ARM) Load() PLL_ARM   { return PLL_ARM(rm.UM32.Load()) }
func (rm RMPLL_ARM) Store(b PLL_ARM) { rm.UM32.Store(uint32(b)) }

func PLL_ARM_DIV_SELECT_(p *Periph) RMPLL_ARM {
	return RMPLL_ARM{mmio.UM32{&p.PLL_ARM.U32, uint32(PLL_ARM_DIV_SELECT)}}
}

func PLL_ARM_POWERDOWN_(p *Periph) RMPLL_ARM {
	return RMPLL_ARM{mmio.UM32{&p.PLL_ARM.U32, uint32(PLL_ARM_POWERDOWN)}}
}

func PLL_ARM_ENABLE_(p *Periph) RMPLL_ARM {
	return RMPLL_ARM{mmio.UM32{&p.PLL_ARM.U32, uint32(PLL_ARM_ENABLE)}}
}

func PLL_ARM_BYPASS_CLK_SRC_(p *Periph) RMPLL_ARM {
	return RMPLL_ARM{mmio.UM32{&p.PLL_ARM.U32, uint32(PLL_ARM_BYPASS_CLK_SRC)}}
}

func PLL_ARM_BYPASS_(p *Periph) RMPLL_ARM {
	return RMPLL_ARM{mmio.UM32{&p.PLL_ARM.U32, uint32(PLL_ARM_BYPASS)}}
}

func PLL_ARM_PLL_SEL_(p *Periph) RMPLL_ARM {
	return RMPLL_ARM{mmio.UM32{&p.PLL_ARM.U32, uint32(PLL_ARM_PLL_SEL)}}
}

func PLL_ARM_LOCK_(p *Periph) RMPLL_ARM {
	return RMPLL_ARM{mmio.UM32{&p.PLL_ARM.U32, uint32(PLL_ARM_LOCK)}}
}

type PLL_USB uint32

type RPLL_USB struct{ mmio.U32 }

func (r *RPLL_USB) LoadBits(mask PLL_USB) PLL_USB { return PLL_USB(r.U32.LoadBits(uint32(mask))) }
func (r *RPLL_USB) StoreBits(mask, b PLL_USB)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL_USB) SetBits(mask PLL_USB)          { r.U32.SetBits(uint32(mask)) }
func (r *RPLL_USB) ClearBits(mask PLL_USB)        { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL_USB) Load() PLL_USB                 { return PLL_USB(r.U32.Load()) }
func (r *RPLL_USB) Store(b PLL_USB)               { r.U32.Store(uint32(b)) }

type RMPLL_USB struct{ mmio.UM32 }

func (rm RMPLL_USB) Load() PLL_USB   { return PLL_USB(rm.UM32.Load()) }
func (rm RMPLL_USB) Store(b PLL_USB) { rm.UM32.Store(uint32(b)) }

type PLL_SYS uint32

type RPLL_SYS struct{ mmio.U32 }

func (r *RPLL_SYS) LoadBits(mask PLL_SYS) PLL_SYS { return PLL_SYS(r.U32.LoadBits(uint32(mask))) }
func (r *RPLL_SYS) StoreBits(mask, b PLL_SYS)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL_SYS) SetBits(mask PLL_SYS)          { r.U32.SetBits(uint32(mask)) }
func (r *RPLL_SYS) ClearBits(mask PLL_SYS)        { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL_SYS) Load() PLL_SYS                 { return PLL_SYS(r.U32.Load()) }
func (r *RPLL_SYS) Store(b PLL_SYS)               { r.U32.Store(uint32(b)) }

type RMPLL_SYS struct{ mmio.UM32 }

func (rm RMPLL_SYS) Load() PLL_SYS   { return PLL_SYS(rm.UM32.Load()) }
func (rm RMPLL_SYS) Store(b PLL_SYS) { rm.UM32.Store(uint32(b)) }

func PLL_SYS_DIV_SELECT_(p *Periph) RMPLL_SYS {
	return RMPLL_SYS{mmio.UM32{&p.PLL_SYS.U32, uint32(PLL_SYS_DIV_SELECT)}}
}

func PLL_SYS_POWERDOWN_(p *Periph) RMPLL_SYS {
	return RMPLL_SYS{mmio.UM32{&p.PLL_SYS.U32, uint32(PLL_SYS_POWERDOWN)}}
}

func PLL_SYS_ENABLE_(p *Periph) RMPLL_SYS {
	return RMPLL_SYS{mmio.UM32{&p.PLL_SYS.U32, uint32(PLL_SYS_ENABLE)}}
}

func PLL_SYS_BYPASS_CLK_SRC_(p *Periph) RMPLL_SYS {
	return RMPLL_SYS{mmio.UM32{&p.PLL_SYS.U32, uint32(PLL_SYS_BYPASS_CLK_SRC)}}
}

func PLL_SYS_BYPASS_(p *Periph) RMPLL_SYS {
	return RMPLL_SYS{mmio.UM32{&p.PLL_SYS.U32, uint32(PLL_SYS_BYPASS)}}
}

func PLL_SYS_LOCK_(p *Periph) RMPLL_SYS {
	return RMPLL_SYS{mmio.UM32{&p.PLL_SYS.U32, uint32(PLL_SYS_LOCK)}}
}

type PLL_SYS_SS uint32

type RPLL_SYS_SS struct{ mmio.U32 }

func (r *RPLL_SYS_SS) LoadBits(mask PLL_SYS_SS) PLL_SYS_SS {
	return PLL_SYS_SS(r.U32.LoadBits(uint32(mask)))
}
func (r *RPLL_SYS_SS) StoreBits(mask, b PLL_SYS_SS) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL_SYS_SS) SetBits(mask PLL_SYS_SS)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLL_SYS_SS) ClearBits(mask PLL_SYS_SS)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL_SYS_SS) Load() PLL_SYS_SS             { return PLL_SYS_SS(r.U32.Load()) }
func (r *RPLL_SYS_SS) Store(b PLL_SYS_SS)           { r.U32.Store(uint32(b)) }

type RMPLL_SYS_SS struct{ mmio.UM32 }

func (rm RMPLL_SYS_SS) Load() PLL_SYS_SS   { return PLL_SYS_SS(rm.UM32.Load()) }
func (rm RMPLL_SYS_SS) Store(b PLL_SYS_SS) { rm.UM32.Store(uint32(b)) }

func PLL_SYS_SS_STEP_(p *Periph) RMPLL_SYS_SS {
	return RMPLL_SYS_SS{mmio.UM32{&p.PLL_SYS_SS.U32, uint32(PLL_SYS_SS_STEP)}}
}

func PLL_SYS_SS_ENABLE_(p *Periph) RMPLL_SYS_SS {
	return RMPLL_SYS_SS{mmio.UM32{&p.PLL_SYS_SS.U32, uint32(PLL_SYS_SS_ENABLE)}}
}

func PLL_SYS_SS_STOP_(p *Periph) RMPLL_SYS_SS {
	return RMPLL_SYS_SS{mmio.UM32{&p.PLL_SYS_SS.U32, uint32(PLL_SYS_SS_STOP)}}
}

type PLL_SYS_NUM uint32

type RPLL_SYS_NUM struct{ mmio.U32 }

func (r *RPLL_SYS_NUM) LoadBits(mask PLL_SYS_NUM) PLL_SYS_NUM {
	return PLL_SYS_NUM(r.U32.LoadBits(uint32(mask)))
}
func (r *RPLL_SYS_NUM) StoreBits(mask, b PLL_SYS_NUM) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL_SYS_NUM) SetBits(mask PLL_SYS_NUM)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLL_SYS_NUM) ClearBits(mask PLL_SYS_NUM)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL_SYS_NUM) Load() PLL_SYS_NUM             { return PLL_SYS_NUM(r.U32.Load()) }
func (r *RPLL_SYS_NUM) Store(b PLL_SYS_NUM)           { r.U32.Store(uint32(b)) }

type RMPLL_SYS_NUM struct{ mmio.UM32 }

func (rm RMPLL_SYS_NUM) Load() PLL_SYS_NUM   { return PLL_SYS_NUM(rm.UM32.Load()) }
func (rm RMPLL_SYS_NUM) Store(b PLL_SYS_NUM) { rm.UM32.Store(uint32(b)) }

func PLL_SYS_NUM_A_(p *Periph) RMPLL_SYS_NUM {
	return RMPLL_SYS_NUM{mmio.UM32{&p.PLL_SYS_NUM.U32, uint32(PLL_SYS_NUM_A)}}
}

type PLL_SYS_DENOM uint32

type RPLL_SYS_DENOM struct{ mmio.U32 }

func (r *RPLL_SYS_DENOM) LoadBits(mask PLL_SYS_DENOM) PLL_SYS_DENOM {
	return PLL_SYS_DENOM(r.U32.LoadBits(uint32(mask)))
}
func (r *RPLL_SYS_DENOM) StoreBits(mask, b PLL_SYS_DENOM) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL_SYS_DENOM) SetBits(mask PLL_SYS_DENOM)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLL_SYS_DENOM) ClearBits(mask PLL_SYS_DENOM)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL_SYS_DENOM) Load() PLL_SYS_DENOM             { return PLL_SYS_DENOM(r.U32.Load()) }
func (r *RPLL_SYS_DENOM) Store(b PLL_SYS_DENOM)           { r.U32.Store(uint32(b)) }

type RMPLL_SYS_DENOM struct{ mmio.UM32 }

func (rm RMPLL_SYS_DENOM) Load() PLL_SYS_DENOM   { return PLL_SYS_DENOM(rm.UM32.Load()) }
func (rm RMPLL_SYS_DENOM) Store(b PLL_SYS_DENOM) { rm.UM32.Store(uint32(b)) }

func PLL_SYS_DENOM_B_(p *Periph) RMPLL_SYS_DENOM {
	return RMPLL_SYS_DENOM{mmio.UM32{&p.PLL_SYS_DENOM.U32, uint32(PLL_SYS_DENOM_B)}}
}

type PLL_AV uint32

type RPLL_AV struct{ mmio.U32 }

func (r *RPLL_AV) LoadBits(mask PLL_AV) PLL_AV { return PLL_AV(r.U32.LoadBits(uint32(mask))) }
func (r *RPLL_AV) StoreBits(mask, b PLL_AV)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL_AV) SetBits(mask PLL_AV)         { r.U32.SetBits(uint32(mask)) }
func (r *RPLL_AV) ClearBits(mask PLL_AV)       { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL_AV) Load() PLL_AV                { return PLL_AV(r.U32.Load()) }
func (r *RPLL_AV) Store(b PLL_AV)              { r.U32.Store(uint32(b)) }

type RMPLL_AV struct{ mmio.UM32 }

func (rm RMPLL_AV) Load() PLL_AV   { return PLL_AV(rm.UM32.Load()) }
func (rm RMPLL_AV) Store(b PLL_AV) { rm.UM32.Store(uint32(b)) }

type PLL_ENET uint32

type RPLL_ENET struct{ mmio.U32 }

func (r *RPLL_ENET) LoadBits(mask PLL_ENET) PLL_ENET { return PLL_ENET(r.U32.LoadBits(uint32(mask))) }
func (r *RPLL_ENET) StoreBits(mask, b PLL_ENET)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL_ENET) SetBits(mask PLL_ENET)           { r.U32.SetBits(uint32(mask)) }
func (r *RPLL_ENET) ClearBits(mask PLL_ENET)         { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL_ENET) Load() PLL_ENET                  { return PLL_ENET(r.U32.Load()) }
func (r *RPLL_ENET) Store(b PLL_ENET)                { r.U32.Store(uint32(b)) }

type RMPLL_ENET struct{ mmio.UM32 }

func (rm RMPLL_ENET) Load() PLL_ENET   { return PLL_ENET(rm.UM32.Load()) }
func (rm RMPLL_ENET) Store(b PLL_ENET) { rm.UM32.Store(uint32(b)) }

func PLL_ENET_DIV_SELECT_(p *Periph) RMPLL_ENET {
	return RMPLL_ENET{mmio.UM32{&p.PLL_ENET.U32, uint32(PLL_ENET_DIV_SELECT)}}
}

func PLL_ENET_ENET2_DIV_SELECT_(p *Periph) RMPLL_ENET {
	return RMPLL_ENET{mmio.UM32{&p.PLL_ENET.U32, uint32(PLL_ENET_ENET2_DIV_SELECT)}}
}

func PLL_ENET_POWERDOWN_(p *Periph) RMPLL_ENET {
	return RMPLL_ENET{mmio.UM32{&p.PLL_ENET.U32, uint32(PLL_ENET_POWERDOWN)}}
}

func PLL_ENET_ENABLE_(p *Periph) RMPLL_ENET {
	return RMPLL_ENET{mmio.UM32{&p.PLL_ENET.U32, uint32(PLL_ENET_ENABLE)}}
}

func PLL_ENET_BYPASS_CLK_SRC_(p *Periph) RMPLL_ENET {
	return RMPLL_ENET{mmio.UM32{&p.PLL_ENET.U32, uint32(PLL_ENET_BYPASS_CLK_SRC)}}
}

func PLL_ENET_BYPASS_(p *Periph) RMPLL_ENET {
	return RMPLL_ENET{mmio.UM32{&p.PLL_ENET.U32, uint32(PLL_ENET_BYPASS)}}
}

func PLL_ENET_ENET2_REF_EN_(p *Periph) RMPLL_ENET {
	return RMPLL_ENET{mmio.UM32{&p.PLL_ENET.U32, uint32(PLL_ENET_ENET2_REF_EN)}}
}

func PLL_ENET_ENET_25M_REF_EN_(p *Periph) RMPLL_ENET {
	return RMPLL_ENET{mmio.UM32{&p.PLL_ENET.U32, uint32(PLL_ENET_ENET_25M_REF_EN)}}
}

func PLL_ENET_LOCK_(p *Periph) RMPLL_ENET {
	return RMPLL_ENET{mmio.UM32{&p.PLL_ENET.U32, uint32(PLL_ENET_LOCK)}}
}

type PFD uint32

type RPFD struct{ mmio.U32 }

func (r *RPFD) LoadBits(mask PFD) PFD { return PFD(r.U32.LoadBits(uint32(mask))) }
func (r *RPFD) StoreBits(mask, b PFD) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPFD) SetBits(mask PFD)      { r.U32.SetBits(uint32(mask)) }
func (r *RPFD) ClearBits(mask PFD)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPFD) Load() PFD             { return PFD(r.U32.Load()) }
func (r *RPFD) Store(b PFD)           { r.U32.Store(uint32(b)) }

type RMPFD struct{ mmio.UM32 }

func (rm RMPFD) Load() PFD   { return PFD(rm.UM32.Load()) }
func (rm RMPFD) Store(b PFD) { rm.UM32.Store(uint32(b)) }

type MISC0 uint32

type RMISC0 struct{ mmio.U32 }

func (r *RMISC0) LoadBits(mask MISC0) MISC0 { return MISC0(r.U32.LoadBits(uint32(mask))) }
func (r *RMISC0) StoreBits(mask, b MISC0)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMISC0) SetBits(mask MISC0)        { r.U32.SetBits(uint32(mask)) }
func (r *RMISC0) ClearBits(mask MISC0)      { r.U32.ClearBits(uint32(mask)) }
func (r *RMISC0) Load() MISC0               { return MISC0(r.U32.Load()) }
func (r *RMISC0) Store(b MISC0)             { r.U32.Store(uint32(b)) }

type RMMISC0 struct{ mmio.UM32 }

func (rm RMMISC0) Load() MISC0   { return MISC0(rm.UM32.Load()) }
func (rm RMMISC0) Store(b MISC0) { rm.UM32.Store(uint32(b)) }

func MISC0_REFTOP_PWD_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_REFTOP_PWD)}}
}

func MISC0_REFTOP_SELFBIASOFF_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_REFTOP_SELFBIASOFF)}}
}

func MISC0_REFTOP_VBGADJ_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_REFTOP_VBGADJ)}}
}

func MISC0_REFTOP_VBGUP_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_REFTOP_VBGUP)}}
}

func MISC0_STOP_MODE_CONFIG_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_STOP_MODE_CONFIG)}}
}

func MISC0_DISCON_HIGH_SNVS_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_DISCON_HIGH_SNVS)}}
}

func MISC0_OSC_I_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_OSC_I)}}
}

func MISC0_OSC_XTALOK_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_OSC_XTALOK)}}
}

func MISC0_OSC_XTALOK_EN_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_OSC_XTALOK_EN)}}
}

func MISC0_CLKGATE_CTRL_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_CLKGATE_CTRL)}}
}

func MISC0_CLKGATE_DELAY_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_CLKGATE_DELAY)}}
}

func MISC0_RTC_XTAL_SOURCE_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_RTC_XTAL_SOURCE)}}
}

func MISC0_XTAL_24M_PWD_(p *Periph) RMMISC0 {
	return RMMISC0{mmio.UM32{&p.MISC0.U32, uint32(MISC0_XTAL_24M_PWD)}}
}

type MISC1 uint32

type RMISC1 struct{ mmio.U32 }

func (r *RMISC1) LoadBits(mask MISC1) MISC1 { return MISC1(r.U32.LoadBits(uint32(mask))) }
func (r *RMISC1) StoreBits(mask, b MISC1)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMISC1) SetBits(mask MISC1)        { r.U32.SetBits(uint32(mask)) }
func (r *RMISC1) ClearBits(mask MISC1)      { r.U32.ClearBits(uint32(mask)) }
func (r *RMISC1) Load() MISC1               { return MISC1(r.U32.Load()) }
func (r *RMISC1) Store(b MISC1)             { r.U32.Store(uint32(b)) }

type RMMISC1 struct{ mmio.UM32 }

func (rm RMMISC1) Load() MISC1   { return MISC1(rm.UM32.Load()) }
func (rm RMMISC1) Store(b MISC1) { rm.UM32.Store(uint32(b)) }

func MISC1_LVDS1_CLK_SEL_(p *Periph) RMMISC1 {
	return RMMISC1{mmio.UM32{&p.MISC1.U32, uint32(MISC1_LVDS1_CLK_SEL)}}
}

func MISC1_LVDSCLK1_OBEN_(p *Periph) RMMISC1 {
	return RMMISC1{mmio.UM32{&p.MISC1.U32, uint32(MISC1_LVDSCLK1_OBEN)}}
}

func MISC1_LVDSCLK1_IBEN_(p *Periph) RMMISC1 {
	return RMMISC1{mmio.UM32{&p.MISC1.U32, uint32(MISC1_LVDSCLK1_IBEN)}}
}

func MISC1_PFD_480_AUTOGATE_EN_(p *Periph) RMMISC1 {
	return RMMISC1{mmio.UM32{&p.MISC1.U32, uint32(MISC1_PFD_480_AUTOGATE_EN)}}
}

func MISC1_PFD_528_AUTOGATE_EN_(p *Periph) RMMISC1 {
	return RMMISC1{mmio.UM32{&p.MISC1.U32, uint32(MISC1_PFD_528_AUTOGATE_EN)}}
}

func MISC1_IRQ_TEMPPANIC_(p *Periph) RMMISC1 {
	return RMMISC1{mmio.UM32{&p.MISC1.U32, uint32(MISC1_IRQ_TEMPPANIC)}}
}

func MISC1_IRQ_TEMPLOW_(p *Periph) RMMISC1 {
	return RMMISC1{mmio.UM32{&p.MISC1.U32, uint32(MISC1_IRQ_TEMPLOW)}}
}

func MISC1_IRQ_TEMPHIGH_(p *Periph) RMMISC1 {
	return RMMISC1{mmio.UM32{&p.MISC1.U32, uint32(MISC1_IRQ_TEMPHIGH)}}
}

func MISC1_IRQ_ANA_BO_(p *Periph) RMMISC1 {
	return RMMISC1{mmio.UM32{&p.MISC1.U32, uint32(MISC1_IRQ_ANA_BO)}}
}

func MISC1_IRQ_DIG_BO_(p *Periph) RMMISC1 {
	return RMMISC1{mmio.UM32{&p.MISC1.U32, uint32(MISC1_IRQ_DIG_BO)}}
}

type MISC2 uint32

type RMISC2 struct{ mmio.U32 }

func (r *RMISC2) LoadBits(mask MISC2) MISC2 { return MISC2(r.U32.LoadBits(uint32(mask))) }
func (r *RMISC2) StoreBits(mask, b MISC2)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMISC2) SetBits(mask MISC2)        { r.U32.SetBits(uint32(mask)) }
func (r *RMISC2) ClearBits(mask MISC2)      { r.U32.ClearBits(uint32(mask)) }
func (r *RMISC2) Load() MISC2               { return MISC2(r.U32.Load()) }
func (r *RMISC2) Store(b MISC2)             { r.U32.Store(uint32(b)) }

type RMMISC2 struct{ mmio.UM32 }

func (rm RMMISC2) Load() MISC2   { return MISC2(rm.UM32.Load()) }
func (rm RMMISC2) Store(b MISC2) { rm.UM32.Store(uint32(b)) }

func MISC2_REG0_BO_OFFSET_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG0_BO_OFFSET)}}
}

func MISC2_REG0_BO_STATUS_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG0_BO_STATUS)}}
}

func MISC2_REG0_ENABLE_BO_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG0_ENABLE_BO)}}
}

func MISC2_REG0_OK_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG0_OK)}}
}

func MISC2_PLL3_DISABLE_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_PLL3_DISABLE)}}
}

func MISC2_REG1_BO_OFFSET_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG1_BO_OFFSET)}}
}

func MISC2_REG1_BO_STATUS_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG1_BO_STATUS)}}
}

func MISC2_REG1_ENABLE_BO_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG1_ENABLE_BO)}}
}

func MISC2_REG1_OK_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG1_OK)}}
}

func MISC2_AUDIO_DIV_LSB_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_AUDIO_DIV_LSB)}}
}

func MISC2_REG2_BO_OFFSET_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG2_BO_OFFSET)}}
}

func MISC2_REG2_BO_STATUS_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG2_BO_STATUS)}}
}

func MISC2_REG2_ENABLE_BO_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG2_ENABLE_BO)}}
}

func MISC2_REG2_OK_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG2_OK)}}
}

func MISC2_AUDIO_DIV_MSB_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_AUDIO_DIV_MSB)}}
}

func MISC2_REG0_STEP_TIME_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG0_STEP_TIME)}}
}

func MISC2_REG1_STEP_TIME_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG1_STEP_TIME)}}
}

func MISC2_REG2_STEP_TIME_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_REG2_STEP_TIME)}}
}

func MISC2_VIDEO_DIV_(p *Periph) RMMISC2 {
	return RMMISC2{mmio.UM32{&p.MISC2.U32, uint32(MISC2_VIDEO_DIV)}}
}
