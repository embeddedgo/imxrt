// Code generated by xgen -g; DO NOT EDIT.

//go:build imxrt1060

package ccm_analog

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	PLL_ARM         mmio.R32[PLL_ARM]
	PLL_ARM_SET     mmio.R32[PLL_ARM]
	PLL_ARM_CLR     mmio.R32[PLL_ARM]
	PLL_ARM_TOG     mmio.R32[PLL_ARM]
	PLL_USB1        mmio.R32[PLL_USB]
	PLL_USB1_SET    mmio.R32[PLL_USB]
	PLL_USB1_CLR    mmio.R32[PLL_USB]
	PLL_USB1_TOG    mmio.R32[PLL_USB]
	PLL_USB2        mmio.R32[PLL_USB]
	PLL_USB2_SET    mmio.R32[PLL_USB]
	PLL_USB2_CLR    mmio.R32[PLL_USB]
	PLL_USB2_TOG    mmio.R32[PLL_USB]
	PLL_SYS         mmio.R32[PLL_SYS]
	PLL_SYS_SET     mmio.R32[PLL_SYS]
	PLL_SYS_CLR     mmio.R32[PLL_SYS]
	PLL_SYS_TOG     mmio.R32[PLL_SYS]
	PLL_SYS_SS      mmio.R32[PLL_SYS_SS]
	_               [3]uint32
	PLL_SYS_NUM     mmio.R32[PLL_SYS_NUM]
	_               [3]uint32
	PLL_SYS_DENOM   mmio.R32[PLL_SYS_DENOM]
	_               [3]uint32
	PLL_AUDIO       mmio.R32[PLL_AV]
	PLL_AUDIO_SET   mmio.R32[PLL_AV]
	PLL_AUDIO_CLR   mmio.R32[PLL_AV]
	PLL_AUDIO_TOG   mmio.R32[PLL_AV]
	PLL_AUDIO_NUM   mmio.R32[PLL_AV]
	_               [3]uint32
	PLL_AUDIO_DENOM mmio.R32[PLL_AV]
	_               [3]uint32
	PLL_VIDEO       mmio.R32[PLL_AV]
	PLL_VIDEO_SET   mmio.R32[PLL_AV]
	PLL_VIDEO_CLR   mmio.R32[PLL_AV]
	PLL_VIDEO_TOG   mmio.R32[PLL_AV]
	PLL_VIDEO_NUM   mmio.R32[PLL_AV]
	_               [3]uint32
	PLL_VIDEO_DENOM mmio.R32[PLL_AV]
	_               [7]uint32
	PLL_ENET        mmio.R32[PLL_ENET]
	PLL_ENET_SET    mmio.R32[PLL_ENET]
	PLL_ENET_CLR    mmio.R32[PLL_ENET]
	PLL_ENET_TOG    mmio.R32[PLL_ENET]
	PFD_480         mmio.R32[PFD]
	PFD_480_SET     mmio.R32[PFD]
	PFD_480_CLR     mmio.R32[PFD]
	PFD_480_TOG     mmio.R32[PFD]
	PFD_528         mmio.R32[PFD]
	PFD_528_SET     mmio.R32[PFD]
	PFD_528_CLR     mmio.R32[PFD]
	PFD_528_TOG     mmio.R32[PFD]
	_               [16]uint32
	MISC0           mmio.R32[MISC0]
	MISC0_SET       mmio.R32[MISC0]
	MISC0_CLR       mmio.R32[MISC0]
	MISC0_TOG       mmio.R32[MISC0]
	MISC1           mmio.R32[MISC1]
	MISC1_SET       mmio.R32[MISC1]
	MISC1_CLR       mmio.R32[MISC1]
	MISC1_TOG       mmio.R32[MISC1]
	MISC2           mmio.R32[MISC2]
	MISC2_SET       mmio.R32[MISC2]
	MISC2_CLR       mmio.R32[MISC2]
	MISC2_TOG       mmio.R32[MISC2]
}

func CCM_ANALOG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.CCM_ANALOG_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type PLL_ARM uint32

func PLL_ARM_DIV_SELECT_(p *Periph) mmio.RM32[PLL_ARM] {
	return mmio.RM32[PLL_ARM]{R: &p.PLL_ARM, Mask: PLL_ARM_DIV_SELECT}
}
func PLL_ARM_POWERDOWN_(p *Periph) mmio.RM32[PLL_ARM] {
	return mmio.RM32[PLL_ARM]{R: &p.PLL_ARM, Mask: PLL_ARM_POWERDOWN}
}
func PLL_ARM_ENABLE_(p *Periph) mmio.RM32[PLL_ARM] {
	return mmio.RM32[PLL_ARM]{R: &p.PLL_ARM, Mask: PLL_ARM_ENABLE}
}
func PLL_ARM_BYPASS_CLK_SRC_(p *Periph) mmio.RM32[PLL_ARM] {
	return mmio.RM32[PLL_ARM]{R: &p.PLL_ARM, Mask: PLL_ARM_BYPASS_CLK_SRC}
}
func PLL_ARM_BYPASS_(p *Periph) mmio.RM32[PLL_ARM] {
	return mmio.RM32[PLL_ARM]{R: &p.PLL_ARM, Mask: PLL_ARM_BYPASS}
}
func PLL_ARM_PLL_SEL_(p *Periph) mmio.RM32[PLL_ARM] {
	return mmio.RM32[PLL_ARM]{R: &p.PLL_ARM, Mask: PLL_ARM_PLL_SEL}
}
func PLL_ARM_LOCK_(p *Periph) mmio.RM32[PLL_ARM] {
	return mmio.RM32[PLL_ARM]{R: &p.PLL_ARM, Mask: PLL_ARM_LOCK}
}

type PLL_USB uint32

type PLL_SYS uint32

func PLL_SYS_DIV_SELECT_(p *Periph) mmio.RM32[PLL_SYS] {
	return mmio.RM32[PLL_SYS]{R: &p.PLL_SYS, Mask: PLL_SYS_DIV_SELECT}
}
func PLL_SYS_POWERDOWN_(p *Periph) mmio.RM32[PLL_SYS] {
	return mmio.RM32[PLL_SYS]{R: &p.PLL_SYS, Mask: PLL_SYS_POWERDOWN}
}
func PLL_SYS_ENABLE_(p *Periph) mmio.RM32[PLL_SYS] {
	return mmio.RM32[PLL_SYS]{R: &p.PLL_SYS, Mask: PLL_SYS_ENABLE}
}
func PLL_SYS_BYPASS_CLK_SRC_(p *Periph) mmio.RM32[PLL_SYS] {
	return mmio.RM32[PLL_SYS]{R: &p.PLL_SYS, Mask: PLL_SYS_BYPASS_CLK_SRC}
}
func PLL_SYS_BYPASS_(p *Periph) mmio.RM32[PLL_SYS] {
	return mmio.RM32[PLL_SYS]{R: &p.PLL_SYS, Mask: PLL_SYS_BYPASS}
}
func PLL_SYS_LOCK_(p *Periph) mmio.RM32[PLL_SYS] {
	return mmio.RM32[PLL_SYS]{R: &p.PLL_SYS, Mask: PLL_SYS_LOCK}
}

type PLL_SYS_SS uint32

func PLL_SYS_SS_STEP_(p *Periph) mmio.RM32[PLL_SYS_SS] {
	return mmio.RM32[PLL_SYS_SS]{R: &p.PLL_SYS_SS, Mask: PLL_SYS_SS_STEP}
}
func PLL_SYS_SS_ENABLE_(p *Periph) mmio.RM32[PLL_SYS_SS] {
	return mmio.RM32[PLL_SYS_SS]{R: &p.PLL_SYS_SS, Mask: PLL_SYS_SS_ENABLE}
}
func PLL_SYS_SS_STOP_(p *Periph) mmio.RM32[PLL_SYS_SS] {
	return mmio.RM32[PLL_SYS_SS]{R: &p.PLL_SYS_SS, Mask: PLL_SYS_SS_STOP}
}

type PLL_SYS_NUM uint32

func PLL_SYS_NUM_A_(p *Periph) mmio.RM32[PLL_SYS_NUM] {
	return mmio.RM32[PLL_SYS_NUM]{R: &p.PLL_SYS_NUM, Mask: PLL_SYS_NUM_A}
}

type PLL_SYS_DENOM uint32

func PLL_SYS_DENOM_B_(p *Periph) mmio.RM32[PLL_SYS_DENOM] {
	return mmio.RM32[PLL_SYS_DENOM]{R: &p.PLL_SYS_DENOM, Mask: PLL_SYS_DENOM_B}
}

type PLL_AV uint32

type PLL_ENET uint32

func PLL_ENET_DIV_SELECT_(p *Periph) mmio.RM32[PLL_ENET] {
	return mmio.RM32[PLL_ENET]{R: &p.PLL_ENET, Mask: PLL_ENET_DIV_SELECT}
}
func PLL_ENET_ENET2_DIV_SELECT_(p *Periph) mmio.RM32[PLL_ENET] {
	return mmio.RM32[PLL_ENET]{R: &p.PLL_ENET, Mask: PLL_ENET_ENET2_DIV_SELECT}
}
func PLL_ENET_POWERDOWN_(p *Periph) mmio.RM32[PLL_ENET] {
	return mmio.RM32[PLL_ENET]{R: &p.PLL_ENET, Mask: PLL_ENET_POWERDOWN}
}
func PLL_ENET_ENABLE_(p *Periph) mmio.RM32[PLL_ENET] {
	return mmio.RM32[PLL_ENET]{R: &p.PLL_ENET, Mask: PLL_ENET_ENABLE}
}
func PLL_ENET_BYPASS_CLK_SRC_(p *Periph) mmio.RM32[PLL_ENET] {
	return mmio.RM32[PLL_ENET]{R: &p.PLL_ENET, Mask: PLL_ENET_BYPASS_CLK_SRC}
}
func PLL_ENET_BYPASS_(p *Periph) mmio.RM32[PLL_ENET] {
	return mmio.RM32[PLL_ENET]{R: &p.PLL_ENET, Mask: PLL_ENET_BYPASS}
}
func PLL_ENET_ENET2_REF_EN_(p *Periph) mmio.RM32[PLL_ENET] {
	return mmio.RM32[PLL_ENET]{R: &p.PLL_ENET, Mask: PLL_ENET_ENET2_REF_EN}
}
func PLL_ENET_ENET_25M_REF_EN_(p *Periph) mmio.RM32[PLL_ENET] {
	return mmio.RM32[PLL_ENET]{R: &p.PLL_ENET, Mask: PLL_ENET_ENET_25M_REF_EN}
}
func PLL_ENET_LOCK_(p *Periph) mmio.RM32[PLL_ENET] {
	return mmio.RM32[PLL_ENET]{R: &p.PLL_ENET, Mask: PLL_ENET_LOCK}
}

type PFD uint32

type MISC0 uint32

func MISC0_REFTOP_PWD_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_REFTOP_PWD}
}
func MISC0_REFTOP_SELFBIASOFF_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_REFTOP_SELFBIASOFF}
}
func MISC0_REFTOP_VBGADJ_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_REFTOP_VBGADJ}
}
func MISC0_REFTOP_VBGUP_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_REFTOP_VBGUP}
}
func MISC0_STOP_MODE_CONFIG_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_STOP_MODE_CONFIG}
}
func MISC0_DISCON_HIGH_SNVS_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_DISCON_HIGH_SNVS}
}
func MISC0_OSC_I_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_OSC_I}
}
func MISC0_OSC_XTALOK_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_OSC_XTALOK}
}
func MISC0_OSC_XTALOK_EN_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_OSC_XTALOK_EN}
}
func MISC0_CLKGATE_CTRL_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_CLKGATE_CTRL}
}
func MISC0_CLKGATE_DELAY_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_CLKGATE_DELAY}
}
func MISC0_RTC_XTAL_SOURCE_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_RTC_XTAL_SOURCE}
}
func MISC0_XTAL_24M_PWD_(p *Periph) mmio.RM32[MISC0] {
	return mmio.RM32[MISC0]{R: &p.MISC0, Mask: MISC0_XTAL_24M_PWD}
}

type MISC1 uint32

func MISC1_LVDS1_CLK_SEL_(p *Periph) mmio.RM32[MISC1] {
	return mmio.RM32[MISC1]{R: &p.MISC1, Mask: MISC1_LVDS1_CLK_SEL}
}
func MISC1_LVDSCLK1_OBEN_(p *Periph) mmio.RM32[MISC1] {
	return mmio.RM32[MISC1]{R: &p.MISC1, Mask: MISC1_LVDSCLK1_OBEN}
}
func MISC1_LVDSCLK1_IBEN_(p *Periph) mmio.RM32[MISC1] {
	return mmio.RM32[MISC1]{R: &p.MISC1, Mask: MISC1_LVDSCLK1_IBEN}
}
func MISC1_PFD_480_AUTOGATE_EN_(p *Periph) mmio.RM32[MISC1] {
	return mmio.RM32[MISC1]{R: &p.MISC1, Mask: MISC1_PFD_480_AUTOGATE_EN}
}
func MISC1_PFD_528_AUTOGATE_EN_(p *Periph) mmio.RM32[MISC1] {
	return mmio.RM32[MISC1]{R: &p.MISC1, Mask: MISC1_PFD_528_AUTOGATE_EN}
}
func MISC1_IRQ_TEMPPANIC_(p *Periph) mmio.RM32[MISC1] {
	return mmio.RM32[MISC1]{R: &p.MISC1, Mask: MISC1_IRQ_TEMPPANIC}
}
func MISC1_IRQ_TEMPLOW_(p *Periph) mmio.RM32[MISC1] {
	return mmio.RM32[MISC1]{R: &p.MISC1, Mask: MISC1_IRQ_TEMPLOW}
}
func MISC1_IRQ_TEMPHIGH_(p *Periph) mmio.RM32[MISC1] {
	return mmio.RM32[MISC1]{R: &p.MISC1, Mask: MISC1_IRQ_TEMPHIGH}
}
func MISC1_IRQ_ANA_BO_(p *Periph) mmio.RM32[MISC1] {
	return mmio.RM32[MISC1]{R: &p.MISC1, Mask: MISC1_IRQ_ANA_BO}
}
func MISC1_IRQ_DIG_BO_(p *Periph) mmio.RM32[MISC1] {
	return mmio.RM32[MISC1]{R: &p.MISC1, Mask: MISC1_IRQ_DIG_BO}
}

type MISC2 uint32

func MISC2_REG0_BO_OFFSET_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG0_BO_OFFSET}
}
func MISC2_REG0_BO_STATUS_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG0_BO_STATUS}
}
func MISC2_REG0_ENABLE_BO_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG0_ENABLE_BO}
}
func MISC2_REG0_OK_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG0_OK}
}
func MISC2_PLL3_DISABLE_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_PLL3_DISABLE}
}
func MISC2_REG1_BO_OFFSET_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG1_BO_OFFSET}
}
func MISC2_REG1_BO_STATUS_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG1_BO_STATUS}
}
func MISC2_REG1_ENABLE_BO_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG1_ENABLE_BO}
}
func MISC2_REG1_OK_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG1_OK}
}
func MISC2_AUDIO_DIV_LSB_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_AUDIO_DIV_LSB}
}
func MISC2_REG2_BO_OFFSET_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG2_BO_OFFSET}
}
func MISC2_REG2_BO_STATUS_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG2_BO_STATUS}
}
func MISC2_REG2_ENABLE_BO_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG2_ENABLE_BO}
}
func MISC2_REG2_OK_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG2_OK}
}
func MISC2_AUDIO_DIV_MSB_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_AUDIO_DIV_MSB}
}
func MISC2_REG0_STEP_TIME_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG0_STEP_TIME}
}
func MISC2_REG1_STEP_TIME_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG1_STEP_TIME}
}
func MISC2_REG2_STEP_TIME_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_REG2_STEP_TIME}
}
func MISC2_VIDEO_DIV_(p *Periph) mmio.RM32[MISC2] {
	return mmio.RM32[MISC2]{R: &p.MISC2, Mask: MISC2_VIDEO_DIV}
}
