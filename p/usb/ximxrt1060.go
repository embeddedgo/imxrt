// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build imxrt1060

package usb

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	ID                  mmio.R32[uint32]
	HWGENERAL           mmio.R32[HWGENERAL]
	HWHOST              mmio.R32[HWHOST]
	HWDEVICE            mmio.R32[HWDEVICE]
	HWTXBUF             mmio.R32[HWTXBUF]
	HWRXBUF             mmio.R32[HWRXBUF]
	_                   [26]uint32
	GPTIMER             [2]SGPTIMER
	SBUSCFG             mmio.R32[SBUSCFG]
	_                   [27]uint32
	CAPLENGTH           mmio.R8[uint8]
	_                   uint8
	HCIVERSION          mmio.R16[uint16]
	HCSPARAMS           mmio.R32[HCSPARAMS]
	HCCPARAMS           mmio.R32[HCCPARAMS]
	_                   [5]uint32
	DCIVERSION          mmio.R16[uint16]
	_                   uint16
	DCCPARAMS           mmio.R32[DCCPARAMS]
	_                   [6]uint32
	USBCMD              mmio.R32[USBCMD]
	USBSTS              mmio.R32[USBSTS]
	USBINTR             mmio.R32[USBINTR]
	FRINDEX             mmio.R32[uint32]
	_                   uint32
	DEVADDR_PLISTBASE   mmio.R32[uint32]
	ASYNC_ENDPTLISTADDR mmio.R32[uint32]
	_                   uint32
	BURSTSIZE           mmio.R32[BURSTSIZE]
	TXFILLTUNING        mmio.R32[TXFILLTUNING]
	_                   [4]uint32
	ENDPTNAK            mmio.R32[uint32]
	ENDPTNAKEN          mmio.R32[uint32]
	CONFIGFLAG          mmio.R32[CONFIGFLAG]
	PORTSC1             mmio.R32[PORTSC1]
	_                   [7]uint32
	OTGSC               mmio.R32[OTGSC]
	USBMODE             mmio.R32[USBMODE]
	ENDPTSETUPSTAT      mmio.R32[uint32]
	ENDPTPRIME          mmio.R32[uint32]
	ENDPTFLUSH          mmio.R32[uint32]
	ENDPTSTAT           mmio.R32[uint32]
	ENDPTCOMPLETE       mmio.R32[uint32]
	ENDPTCTRL           [8]mmio.R32[ENDPTCTRL]
}

func USB1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.USB1_BASE))) }
func USB2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.USB2_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type HWGENERAL uint32

func PHYW_(p *Periph) mmio.RM32[HWGENERAL] { return mmio.RM32[HWGENERAL]{&p.HWGENERAL, PHYW} }
func PHYM_(p *Periph) mmio.RM32[HWGENERAL] { return mmio.RM32[HWGENERAL]{&p.HWGENERAL, PHYM} }
func SM_(p *Periph) mmio.RM32[HWGENERAL]   { return mmio.RM32[HWGENERAL]{&p.HWGENERAL, SM} }

type HWHOST uint32

func HC_(p *Periph) mmio.RM32[HWHOST]    { return mmio.RM32[HWHOST]{&p.HWHOST, HC} }
func NPORT_(p *Periph) mmio.RM32[HWHOST] { return mmio.RM32[HWHOST]{&p.HWHOST, NPORT} }

type HWDEVICE uint32

func DC_(p *Periph) mmio.RM32[HWDEVICE]    { return mmio.RM32[HWDEVICE]{&p.HWDEVICE, DC} }
func DEVEP_(p *Periph) mmio.RM32[HWDEVICE] { return mmio.RM32[HWDEVICE]{&p.HWDEVICE, DEVEP} }

type HWTXBUF uint32

func TXBURST_(p *Periph) mmio.RM32[HWTXBUF]   { return mmio.RM32[HWTXBUF]{&p.HWTXBUF, TXBURST} }
func TXCHANADD_(p *Periph) mmio.RM32[HWTXBUF] { return mmio.RM32[HWTXBUF]{&p.HWTXBUF, TXCHANADD} }

type HWRXBUF uint32

func RXBURST_(p *Periph) mmio.RM32[HWRXBUF] { return mmio.RM32[HWRXBUF]{&p.HWRXBUF, RXBURST} }
func RXADD_(p *Periph) mmio.RM32[HWRXBUF]   { return mmio.RM32[HWRXBUF]{&p.HWRXBUF, RXADD} }

type SGPTIMER struct {
	LD   mmio.R32[LD]
	CTRL mmio.R32[GPTCTRL]
}

type LD uint32

type GPTCTRL uint32

type SBUSCFG uint32

func AHBBRST_(p *Periph) mmio.RM32[SBUSCFG] { return mmio.RM32[SBUSCFG]{&p.SBUSCFG, AHBBRST} }

type HCSPARAMS uint32

func N_PORTS_(p *Periph) mmio.RM32[HCSPARAMS] { return mmio.RM32[HCSPARAMS]{&p.HCSPARAMS, N_PORTS} }
func PPC_(p *Periph) mmio.RM32[HCSPARAMS]     { return mmio.RM32[HCSPARAMS]{&p.HCSPARAMS, PPC} }
func N_PCC_(p *Periph) mmio.RM32[HCSPARAMS]   { return mmio.RM32[HCSPARAMS]{&p.HCSPARAMS, N_PCC} }
func N_CC_(p *Periph) mmio.RM32[HCSPARAMS]    { return mmio.RM32[HCSPARAMS]{&p.HCSPARAMS, N_CC} }
func PI_(p *Periph) mmio.RM32[HCSPARAMS]      { return mmio.RM32[HCSPARAMS]{&p.HCSPARAMS, PI} }
func N_PTT_(p *Periph) mmio.RM32[HCSPARAMS]   { return mmio.RM32[HCSPARAMS]{&p.HCSPARAMS, N_PTT} }
func N_TT_(p *Periph) mmio.RM32[HCSPARAMS]    { return mmio.RM32[HCSPARAMS]{&p.HCSPARAMS, N_TT} }

type HCCPARAMS uint32

func HPADC_(p *Periph) mmio.RM32[HCCPARAMS]  { return mmio.RM32[HCCPARAMS]{&p.HCCPARAMS, HPADC} }
func HPPFL_(p *Periph) mmio.RM32[HCCPARAMS]  { return mmio.RM32[HCCPARAMS]{&p.HCCPARAMS, HPPFL} }
func HPASP_(p *Periph) mmio.RM32[HCCPARAMS]  { return mmio.RM32[HCCPARAMS]{&p.HCCPARAMS, HPASP} }
func HPIST_(p *Periph) mmio.RM32[HCCPARAMS]  { return mmio.RM32[HCCPARAMS]{&p.HCCPARAMS, HPIST} }
func HPEECP_(p *Periph) mmio.RM32[HCCPARAMS] { return mmio.RM32[HCCPARAMS]{&p.HCCPARAMS, HPEECP} }

type DCCPARAMS uint32

func DPDEN_(p *Periph) mmio.RM32[DCCPARAMS] { return mmio.RM32[DCCPARAMS]{&p.DCCPARAMS, DPDEN} }
func DPDC_(p *Periph) mmio.RM32[DCCPARAMS]  { return mmio.RM32[DCCPARAMS]{&p.DCCPARAMS, DPDC} }
func DPHC_(p *Periph) mmio.RM32[DCCPARAMS]  { return mmio.RM32[DCCPARAMS]{&p.DCCPARAMS, DPHC} }

type USBCMD uint32

func RS_(p *Periph) mmio.RM32[USBCMD]    { return mmio.RM32[USBCMD]{&p.USBCMD, RS} }
func RST_(p *Periph) mmio.RM32[USBCMD]   { return mmio.RM32[USBCMD]{&p.USBCMD, RST} }
func FS_1_(p *Periph) mmio.RM32[USBCMD]  { return mmio.RM32[USBCMD]{&p.USBCMD, FS_1} }
func PSE_(p *Periph) mmio.RM32[USBCMD]   { return mmio.RM32[USBCMD]{&p.USBCMD, PSE} }
func ASE_(p *Periph) mmio.RM32[USBCMD]   { return mmio.RM32[USBCMD]{&p.USBCMD, ASE} }
func IAA_(p *Periph) mmio.RM32[USBCMD]   { return mmio.RM32[USBCMD]{&p.USBCMD, IAA} }
func ASP_(p *Periph) mmio.RM32[USBCMD]   { return mmio.RM32[USBCMD]{&p.USBCMD, ASP} }
func ASPE_(p *Periph) mmio.RM32[USBCMD]  { return mmio.RM32[USBCMD]{&p.USBCMD, ASPE} }
func ATDTW_(p *Periph) mmio.RM32[USBCMD] { return mmio.RM32[USBCMD]{&p.USBCMD, ATDTW} }
func SUTW_(p *Periph) mmio.RM32[USBCMD]  { return mmio.RM32[USBCMD]{&p.USBCMD, SUTW} }
func FS_2_(p *Periph) mmio.RM32[USBCMD]  { return mmio.RM32[USBCMD]{&p.USBCMD, FS_2} }
func ITC_(p *Periph) mmio.RM32[USBCMD]   { return mmio.RM32[USBCMD]{&p.USBCMD, ITC} }

type USBSTS uint32

func UI_(p *Periph) mmio.RM32[USBSTS]    { return mmio.RM32[USBSTS]{&p.USBSTS, UI} }
func UEI_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, UEI} }
func PCI_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, PCI} }
func FRI_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, FRI} }
func SEI_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, SEI} }
func AAI_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, AAI} }
func URI_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, URI} }
func SRI_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, SRI} }
func SLI_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, SLI} }
func ULPII_(p *Periph) mmio.RM32[USBSTS] { return mmio.RM32[USBSTS]{&p.USBSTS, ULPII} }
func HCH_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, HCH} }
func RCL_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, RCL} }
func PS_(p *Periph) mmio.RM32[USBSTS]    { return mmio.RM32[USBSTS]{&p.USBSTS, PS} }
func AS_(p *Periph) mmio.RM32[USBSTS]    { return mmio.RM32[USBSTS]{&p.USBSTS, AS} }
func NAKI_(p *Periph) mmio.RM32[USBSTS]  { return mmio.RM32[USBSTS]{&p.USBSTS, NAKI} }
func TI0_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, TI0} }
func TI1_(p *Periph) mmio.RM32[USBSTS]   { return mmio.RM32[USBSTS]{&p.USBSTS, TI1} }

type USBINTR uint32

func UE_(p *Periph) mmio.RM32[USBINTR]    { return mmio.RM32[USBINTR]{&p.USBINTR, UE} }
func UEE_(p *Periph) mmio.RM32[USBINTR]   { return mmio.RM32[USBINTR]{&p.USBINTR, UEE} }
func PCE_(p *Periph) mmio.RM32[USBINTR]   { return mmio.RM32[USBINTR]{&p.USBINTR, PCE} }
func FRE_(p *Periph) mmio.RM32[USBINTR]   { return mmio.RM32[USBINTR]{&p.USBINTR, FRE} }
func SEE_(p *Periph) mmio.RM32[USBINTR]   { return mmio.RM32[USBINTR]{&p.USBINTR, SEE} }
func AAE_(p *Periph) mmio.RM32[USBINTR]   { return mmio.RM32[USBINTR]{&p.USBINTR, AAE} }
func URE_(p *Periph) mmio.RM32[USBINTR]   { return mmio.RM32[USBINTR]{&p.USBINTR, URE} }
func SRE_(p *Periph) mmio.RM32[USBINTR]   { return mmio.RM32[USBINTR]{&p.USBINTR, SRE} }
func SLE_(p *Periph) mmio.RM32[USBINTR]   { return mmio.RM32[USBINTR]{&p.USBINTR, SLE} }
func ULPIE_(p *Periph) mmio.RM32[USBINTR] { return mmio.RM32[USBINTR]{&p.USBINTR, ULPIE} }
func NAKE_(p *Periph) mmio.RM32[USBINTR]  { return mmio.RM32[USBINTR]{&p.USBINTR, NAKE} }
func UAIE_(p *Periph) mmio.RM32[USBINTR]  { return mmio.RM32[USBINTR]{&p.USBINTR, UAIE} }
func UPIE_(p *Periph) mmio.RM32[USBINTR]  { return mmio.RM32[USBINTR]{&p.USBINTR, UPIE} }
func TIE0_(p *Periph) mmio.RM32[USBINTR]  { return mmio.RM32[USBINTR]{&p.USBINTR, TIE0} }
func TIE1_(p *Periph) mmio.RM32[USBINTR]  { return mmio.RM32[USBINTR]{&p.USBINTR, TIE1} }

type BURSTSIZE uint32

func RXPBURST_(p *Periph) mmio.RM32[BURSTSIZE] { return mmio.RM32[BURSTSIZE]{&p.BURSTSIZE, RXPBURST} }
func TXPBURST_(p *Periph) mmio.RM32[BURSTSIZE] { return mmio.RM32[BURSTSIZE]{&p.BURSTSIZE, TXPBURST} }

type TXFILLTUNING uint32

func TXSCHOH_(p *Periph) mmio.RM32[TXFILLTUNING] {
	return mmio.RM32[TXFILLTUNING]{&p.TXFILLTUNING, TXSCHOH}
}
func TXSCHHEALTH_(p *Periph) mmio.RM32[TXFILLTUNING] {
	return mmio.RM32[TXFILLTUNING]{&p.TXFILLTUNING, TXSCHHEALTH}
}
func TXFIFOTHRES_(p *Periph) mmio.RM32[TXFILLTUNING] {
	return mmio.RM32[TXFILLTUNING]{&p.TXFILLTUNING, TXFIFOTHRES}
}

type CONFIGFLAG uint32

func CF_(p *Periph) mmio.RM32[CONFIGFLAG] { return mmio.RM32[CONFIGFLAG]{&p.CONFIGFLAG, CF} }

type PORTSC1 uint32

func CCS_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, CCS} }
func CSC_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, CSC} }
func PE_(p *Periph) mmio.RM32[PORTSC1]    { return mmio.RM32[PORTSC1]{&p.PORTSC1, PE} }
func PEC_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, PEC} }
func OCA_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, OCA} }
func OCC_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, OCC} }
func FPR_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, FPR} }
func SUSP_(p *Periph) mmio.RM32[PORTSC1]  { return mmio.RM32[PORTSC1]{&p.PORTSC1, SUSP} }
func PR_(p *Periph) mmio.RM32[PORTSC1]    { return mmio.RM32[PORTSC1]{&p.PORTSC1, PR} }
func HSP_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, HSP} }
func LS_(p *Periph) mmio.RM32[PORTSC1]    { return mmio.RM32[PORTSC1]{&p.PORTSC1, LS} }
func PP_(p *Periph) mmio.RM32[PORTSC1]    { return mmio.RM32[PORTSC1]{&p.PORTSC1, PP} }
func PO_(p *Periph) mmio.RM32[PORTSC1]    { return mmio.RM32[PORTSC1]{&p.PORTSC1, PO} }
func PIC_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, PIC} }
func PTC_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, PTC} }
func WKCN_(p *Periph) mmio.RM32[PORTSC1]  { return mmio.RM32[PORTSC1]{&p.PORTSC1, WKCN} }
func WKDC_(p *Periph) mmio.RM32[PORTSC1]  { return mmio.RM32[PORTSC1]{&p.PORTSC1, WKDC} }
func WKOC_(p *Periph) mmio.RM32[PORTSC1]  { return mmio.RM32[PORTSC1]{&p.PORTSC1, WKOC} }
func PHCD_(p *Periph) mmio.RM32[PORTSC1]  { return mmio.RM32[PORTSC1]{&p.PORTSC1, PHCD} }
func PFSC_(p *Periph) mmio.RM32[PORTSC1]  { return mmio.RM32[PORTSC1]{&p.PORTSC1, PFSC} }
func PTS_2_(p *Periph) mmio.RM32[PORTSC1] { return mmio.RM32[PORTSC1]{&p.PORTSC1, PTS_2} }
func PSPD_(p *Periph) mmio.RM32[PORTSC1]  { return mmio.RM32[PORTSC1]{&p.PORTSC1, PSPD} }
func PTW_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, PTW} }
func STS_(p *Periph) mmio.RM32[PORTSC1]   { return mmio.RM32[PORTSC1]{&p.PORTSC1, STS} }
func PTS_1_(p *Periph) mmio.RM32[PORTSC1] { return mmio.RM32[PORTSC1]{&p.PORTSC1, PTS_1} }

type OTGSC uint32

func VD_(p *Periph) mmio.RM32[OTGSC]         { return mmio.RM32[OTGSC]{&p.OTGSC, VD} }
func VC_(p *Periph) mmio.RM32[OTGSC]         { return mmio.RM32[OTGSC]{&p.OTGSC, VC} }
func OT_(p *Periph) mmio.RM32[OTGSC]         { return mmio.RM32[OTGSC]{&p.OTGSC, OT} }
func DP_(p *Periph) mmio.RM32[OTGSC]         { return mmio.RM32[OTGSC]{&p.OTGSC, DP} }
func IDPU_(p *Periph) mmio.RM32[OTGSC]       { return mmio.RM32[OTGSC]{&p.OTGSC, IDPU} }
func ID_(p *Periph) mmio.RM32[OTGSC]         { return mmio.RM32[OTGSC]{&p.OTGSC, ID} }
func AVV_(p *Periph) mmio.RM32[OTGSC]        { return mmio.RM32[OTGSC]{&p.OTGSC, AVV} }
func ASV_(p *Periph) mmio.RM32[OTGSC]        { return mmio.RM32[OTGSC]{&p.OTGSC, ASV} }
func BSV_(p *Periph) mmio.RM32[OTGSC]        { return mmio.RM32[OTGSC]{&p.OTGSC, BSV} }
func BSE_(p *Periph) mmio.RM32[OTGSC]        { return mmio.RM32[OTGSC]{&p.OTGSC, BSE} }
func TOG_1MS_(p *Periph) mmio.RM32[OTGSC]    { return mmio.RM32[OTGSC]{&p.OTGSC, TOG_1MS} }
func DPS_(p *Periph) mmio.RM32[OTGSC]        { return mmio.RM32[OTGSC]{&p.OTGSC, DPS} }
func IDIS_(p *Periph) mmio.RM32[OTGSC]       { return mmio.RM32[OTGSC]{&p.OTGSC, IDIS} }
func AVVIS_(p *Periph) mmio.RM32[OTGSC]      { return mmio.RM32[OTGSC]{&p.OTGSC, AVVIS} }
func ASVIS_(p *Periph) mmio.RM32[OTGSC]      { return mmio.RM32[OTGSC]{&p.OTGSC, ASVIS} }
func BSVIS_(p *Periph) mmio.RM32[OTGSC]      { return mmio.RM32[OTGSC]{&p.OTGSC, BSVIS} }
func BSEIS_(p *Periph) mmio.RM32[OTGSC]      { return mmio.RM32[OTGSC]{&p.OTGSC, BSEIS} }
func STATUS_1MS_(p *Periph) mmio.RM32[OTGSC] { return mmio.RM32[OTGSC]{&p.OTGSC, STATUS_1MS} }
func DPIS_(p *Periph) mmio.RM32[OTGSC]       { return mmio.RM32[OTGSC]{&p.OTGSC, DPIS} }
func IDIE_(p *Periph) mmio.RM32[OTGSC]       { return mmio.RM32[OTGSC]{&p.OTGSC, IDIE} }
func AVVIE_(p *Periph) mmio.RM32[OTGSC]      { return mmio.RM32[OTGSC]{&p.OTGSC, AVVIE} }
func ASVIE_(p *Periph) mmio.RM32[OTGSC]      { return mmio.RM32[OTGSC]{&p.OTGSC, ASVIE} }
func BSVIE_(p *Periph) mmio.RM32[OTGSC]      { return mmio.RM32[OTGSC]{&p.OTGSC, BSVIE} }
func BSEIE_(p *Periph) mmio.RM32[OTGSC]      { return mmio.RM32[OTGSC]{&p.OTGSC, BSEIE} }
func EN_1MS_(p *Periph) mmio.RM32[OTGSC]     { return mmio.RM32[OTGSC]{&p.OTGSC, EN_1MS} }
func DPIE_(p *Periph) mmio.RM32[OTGSC]       { return mmio.RM32[OTGSC]{&p.OTGSC, DPIE} }

type USBMODE uint32

func CM_(p *Periph) mmio.RM32[USBMODE]   { return mmio.RM32[USBMODE]{&p.USBMODE, CM} }
func ES_(p *Periph) mmio.RM32[USBMODE]   { return mmio.RM32[USBMODE]{&p.USBMODE, ES} }
func SLOM_(p *Periph) mmio.RM32[USBMODE] { return mmio.RM32[USBMODE]{&p.USBMODE, SLOM} }
func SDIS_(p *Periph) mmio.RM32[USBMODE] { return mmio.RM32[USBMODE]{&p.USBMODE, SDIS} }

type ENDPTCTRL uint32

func RXS_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], RXS} }
func RXD_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], RXD} }
func RXT_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], RXT} }
func RXI_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], RXI} }
func RXR_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], RXR} }
func RXE_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], RXE} }
func TXS_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], TXS} }
func TXD_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], TXD} }
func TXT_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], TXT} }
func TXI_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], TXI} }
func TXR_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], TXR} }
func TXE_(p *Periph, i int) mmio.RM32[ENDPTCTRL] { return mmio.RM32[ENDPTCTRL]{&p.ENDPTCTRL[i], TXE} }
