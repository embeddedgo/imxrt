// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build imxrt1060

// Package acmp provides access to the registers of the CMP peripheral.
//
// Instances:
//
//	CMP1  CMP1_BASE  -  ACMP1*  High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)
//	CMP2  CMP2_BASE  -  ACMP2*  High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)
//	CMP3  CMP3_BASE  -  ACMP3*  High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)
//	CMP4  CMP4_BASE  -  ACMP4*  High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)
//
// Registers:
//
//	0x000  8  CR0    CMP Control Register 0
//	0x001  8  CR1    CMP Control Register 1
//	0x002  8  FPR    CMP Filter Period Register
//	0x003  8  SCR    CMP Status and Control Register
//	0x004  8  DACCR  DAC Control Register
//	0x005  8  MUXCR  MUX Control Register
//
// Import:
//
//	github.com/embeddedgo/imxrt/p/mmap
package acmp

const (
	HYSTCTR      CR0 = 0x03 << 0 //+ Comparator hard block hysteresis control
	HYSTCTR_0    CR0 = 0x00 << 0 //  Level 0
	HYSTCTR_1    CR0 = 0x01 << 0 //  Level 1
	HYSTCTR_2    CR0 = 0x02 << 0 //  Level 2
	HYSTCTR_3    CR0 = 0x03 << 0 //  Level 3
	FILTER_CNT   CR0 = 0x07 << 4 //+ Filter Sample Count
	FILTER_CNT_0 CR0 = 0x00 << 4 //  Filter is disabled. If SE = 1, then COUT is a logic 0. This is not a legal state, and is not recommended. If SE = 0, COUT = COUTA.
	FILTER_CNT_1 CR0 = 0x01 << 4 //  One sample must agree. The comparator output is simply sampled.
	FILTER_CNT_2 CR0 = 0x02 << 4 //  2 consecutive samples must agree.
	FILTER_CNT_3 CR0 = 0x03 << 4 //  3 consecutive samples must agree.
	FILTER_CNT_4 CR0 = 0x04 << 4 //  4 consecutive samples must agree.
	FILTER_CNT_5 CR0 = 0x05 << 4 //  5 consecutive samples must agree.
	FILTER_CNT_6 CR0 = 0x06 << 4 //  6 consecutive samples must agree.
	FILTER_CNT_7 CR0 = 0x07 << 4 //  7 consecutive samples must agree.
)

const (
	HYSTCTRn    = 0
	FILTER_CNTn = 4
)

const (
	EN    CR1 = 0x01 << 0 //+ Comparator Module Enable
	OPE   CR1 = 0x01 << 1 //+ Comparator Output Pin Enable
	COS   CR1 = 0x01 << 2 //+ Comparator Output Select
	INV   CR1 = 0x01 << 3 //+ Comparator INVERT
	PMODE CR1 = 0x01 << 4 //+ Power Mode Select
	WE    CR1 = 0x01 << 6 //+ Windowing Enable
	SE    CR1 = 0x01 << 7 //+ Sample Enable
)

const (
	ENn    = 0
	OPEn   = 1
	COSn   = 2
	INVn   = 3
	PMODEn = 4
	WEn    = 6
	SEn    = 7
)

const (
	FILT_PER FPR = 0xFF << 0 //+ Filter Sample Period
)

const (
	FILT_PERn = 0
)

const (
	COUT  SCR = 0x01 << 0 //+ Analog Comparator Output
	CFF   SCR = 0x01 << 1 //+ Analog Comparator Flag Falling
	CFR   SCR = 0x01 << 2 //+ Analog Comparator Flag Rising
	IEF   SCR = 0x01 << 3 //+ Comparator Interrupt Enable Falling
	IER   SCR = 0x01 << 4 //+ Comparator Interrupt Enable Rising
	DMAEN SCR = 0x01 << 6 //+ DMA Enable Control
)

const (
	COUTn  = 0
	CFFn   = 1
	CFRn   = 2
	IEFn   = 3
	IERn   = 4
	DMAENn = 6
)

const (
	VOSEL DACCR = 0x3F << 0 //+ DAC Output Voltage Select
	VRSEL DACCR = 0x01 << 6 //+ Supply Voltage Reference Source Select
	DACEN DACCR = 0x01 << 7 //+ DAC Enable
)

const (
	VOSELn = 0
	VRSELn = 6
	DACENn = 7
)

const (
	MSEL   MUXCR = 0x07 << 0 //+ Minus Input Mux Control
	MSEL_0 MUXCR = 0x00 << 0 //  IN0
	MSEL_1 MUXCR = 0x01 << 0 //  IN1
	MSEL_2 MUXCR = 0x02 << 0 //  IN2
	MSEL_3 MUXCR = 0x03 << 0 //  IN3
	MSEL_4 MUXCR = 0x04 << 0 //  IN4
	MSEL_5 MUXCR = 0x05 << 0 //  IN5
	MSEL_6 MUXCR = 0x06 << 0 //  IN6
	MSEL_7 MUXCR = 0x07 << 0 //  IN7
	PSEL   MUXCR = 0x07 << 3 //+ Plus Input Mux Control
	PSEL_0 MUXCR = 0x00 << 3 //  IN0
	PSEL_1 MUXCR = 0x01 << 3 //  IN1
	PSEL_2 MUXCR = 0x02 << 3 //  IN2
	PSEL_3 MUXCR = 0x03 << 3 //  IN3
	PSEL_4 MUXCR = 0x04 << 3 //  IN4
	PSEL_5 MUXCR = 0x05 << 3 //  IN5
	PSEL_6 MUXCR = 0x06 << 3 //  IN6
	PSEL_7 MUXCR = 0x07 << 3 //  IN7
)

const (
	MSELn = 0
	PSELn = 3
)
