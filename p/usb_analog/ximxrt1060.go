// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build imxrt1060

package usb_analog

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	_                     [104]uint32
	USB1_VBUS_DETECT      mmio.R32[VBUS_DETECT]
	USB1_VBUS_DETECT_SET  mmio.R32[VBUS_DETECT]
	USB1_VBUS_DETECT_CLR  mmio.R32[VBUS_DETECT]
	USB1_VBUS_DETECT_TOG  mmio.R32[VBUS_DETECT]
	USB1_CHRG_DETECT      mmio.R32[CHRG_DETECT]
	USB1_CHRG_DETECT_SET  mmio.R32[CHRG_DETECT]
	USB1_CHRG_DETECT_CLR  mmio.R32[CHRG_DETECT]
	USB1_CHRG_DETECT_TOG  mmio.R32[CHRG_DETECT]
	USB1_VBUS_DETECT_STAT mmio.R32[VBUS_DETECT_STAT]
	_                     [3]uint32
	USB1_CHRG_DETECT_STAT mmio.R32[CHRG_DETECT_STAT]
	_                     [3]uint32
	USB1_LOOPBACK         mmio.R32[LOOPBACK]
	USB1_LOOPBACK_SET     mmio.R32[LOOPBACK]
	USB1_LOOPBACK_CLR     mmio.R32[LOOPBACK]
	USB1_LOOPBACK_TOG     mmio.R32[LOOPBACK]
	USB1_MISC             mmio.R32[MISC]
	USB1_MISC_SET         mmio.R32[MISC]
	USB1_MISC_CLR         mmio.R32[MISC]
	USB1_MISC_TOG         mmio.R32[MISC]
	USB2_VBUS_DETECT      mmio.R32[VBUS_DETECT]
	USB2_VBUS_DETECT_SET  mmio.R32[VBUS_DETECT]
	USB2_VBUS_DETECT_CLR  mmio.R32[VBUS_DETECT]
	USB2_VBUS_DETECT_TOG  mmio.R32[VBUS_DETECT]
	USB2_CHRG_DETECT      mmio.R32[CHRG_DETECT]
	USB2_CHRG_DETECT_SET  mmio.R32[CHRG_DETECT]
	USB2_CHRG_DETECT_CLR  mmio.R32[CHRG_DETECT]
	USB2_CHRG_DETECT_TOG  mmio.R32[CHRG_DETECT]
	USB2_VBUS_DETECT_STAT mmio.R32[VBUS_DETECT_STAT]
	_                     [3]uint32
	USB2_CHRG_DETECT_STAT mmio.R32[CHRG_DETECT_STAT]
	_                     [3]uint32
	USB2_LOOPBACK         mmio.R32[LOOPBACK]
	USB2_LOOPBACK_SET     mmio.R32[LOOPBACK]
	USB2_LOOPBACK_CLR     mmio.R32[LOOPBACK]
	USB2_LOOPBACK_TOG     mmio.R32[LOOPBACK]
	USB2_MISC             mmio.R32[MISC]
	USB2_MISC_SET         mmio.R32[MISC]
	USB2_MISC_CLR         mmio.R32[MISC]
	USB2_MISC_TOG         mmio.R32[MISC]
	DIGPROG               mmio.R32[DIGPROG]
}

func USB_ANALOG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.USB_ANALOG_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type VBUS_DETECT uint32

type CHRG_DETECT uint32

type VBUS_DETECT_STAT uint32

type CHRG_DETECT_STAT uint32

type LOOPBACK uint32

type MISC uint32

type DIGPROG uint32

func SILICON_REVISION_(p *Periph) mmio.RM32[DIGPROG] {
	return mmio.RM32[DIGPROG]{&p.DIGPROG, SILICON_REVISION}
}
