// DO NOT EDIT THIS FILE. GENERATED BY xgen.

package iomuxc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	_                                        [5]uint32
	SW_MUX_CTL_PAD_GPIO_EMC_00               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_01               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_02               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_03               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_04               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_05               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_06               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_07               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_08               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_09               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_10               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_11               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_12               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_13               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_14               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_15               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_16               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_17               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_18               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_19               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_20               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_21               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_22               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_23               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_24               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_25               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_26               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_27               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_28               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_29               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_30               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_31               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_32               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_33               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_34               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_35               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_36               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_37               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_38               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_39               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_40               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_EMC_41               RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_00             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_01             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_02             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_03             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_04             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_05             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_06             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_07             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_08             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_09             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_10             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_11             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_12             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_13             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_14             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B0_15             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_00             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_01             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_02             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_03             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_04             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_05             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_06             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_07             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_08             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_09             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_10             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_11             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_12             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_13             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_14             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_AD_B1_15             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_00                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_01                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_02                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_03                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_04                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_05                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_06                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_07                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_08                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_09                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_10                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_11                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_12                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_13                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_14                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B0_15                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_00                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_01                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_02                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_03                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_04                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_05                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_06                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_07                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_08                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_09                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_10                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_11                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_12                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_13                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_14                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_B1_15                RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B0_00             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B0_01             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B0_02             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B0_03             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B0_04             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B0_05             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_00             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_01             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_02             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_03             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_04             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_05             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_06             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_07             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_08             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_09             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_10             RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SD_B1_11             RSW_MUX_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_00               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_01               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_02               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_03               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_04               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_05               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_06               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_07               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_08               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_09               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_10               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_11               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_12               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_13               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_14               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_15               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_16               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_17               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_18               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_19               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_20               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_21               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_22               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_23               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_24               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_25               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_26               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_27               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_28               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_29               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_30               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_31               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_32               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_33               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_34               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_35               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_36               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_37               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_38               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_39               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_40               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_EMC_41               RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_00             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_01             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_02             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_03             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_04             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_05             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_06             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_07             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_08             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_09             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_10             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_11             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_12             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_13             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_14             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B0_15             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_00             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_01             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_02             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_03             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_04             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_05             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_06             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_07             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_08             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_09             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_10             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_11             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_12             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_13             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_14             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_AD_B1_15             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_00                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_01                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_02                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_03                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_04                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_05                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_06                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_07                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_08                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_09                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_10                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_11                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_12                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_13                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_14                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B0_15                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_00                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_01                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_02                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_03                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_04                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_05                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_06                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_07                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_08                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_09                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_10                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_11                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_12                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_13                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_14                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_B1_15                RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B0_00             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B0_01             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B0_02             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B0_03             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B0_04             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B0_05             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_00             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_01             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_02             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_03             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_04             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_05             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_06             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_07             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_08             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_09             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_10             RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SD_B1_11             RSW_PAD_CTL
	ANATOP_USB_OTG1_ID_SELECT_INPUT          RANATOP_USB_OTG1_ID_SELECT_INPUT
	ANATOP_USB_OTG2_ID_SELECT_INPUT          RANATOP_USB_OTG2_ID_SELECT_INPUT
	CCM_PMIC_READY_SELECT_INPUT              RCCM_PMIC_READY_SELECT_INPUT
	CSI_DATA02_SELECT_INPUT                  RCSI_DATA02_SELECT_INPUT
	CSI_DATA03_SELECT_INPUT                  RCSI_DATA03_SELECT_INPUT
	CSI_DATA04_SELECT_INPUT                  RCSI_DATA04_SELECT_INPUT
	CSI_DATA05_SELECT_INPUT                  RCSI_DATA05_SELECT_INPUT
	CSI_DATA06_SELECT_INPUT                  RCSI_DATA06_SELECT_INPUT
	CSI_DATA07_SELECT_INPUT                  RCSI_DATA07_SELECT_INPUT
	CSI_DATA08_SELECT_INPUT                  RCSI_DATA08_SELECT_INPUT
	CSI_DATA09_SELECT_INPUT                  RCSI_DATA09_SELECT_INPUT
	CSI_HSYNC_SELECT_INPUT                   RCSI_HSYNC_SELECT_INPUT
	CSI_PIXCLK_SELECT_INPUT                  RCSI_PIXCLK_SELECT_INPUT
	CSI_VSYNC_SELECT_INPUT                   RCSI_VSYNC_SELECT_INPUT
	ENET_IPG_CLK_RMII_SELECT_INPUT           RENET_IPG_CLK_RMII_SELECT_INPUT
	ENET_MDIO_SELECT_INPUT                   RENET_MDIO_SELECT_INPUT
	ENET0_RXDATA_SELECT_INPUT                RENET0_RXDATA_SELECT_INPUT
	ENET1_RXDATA_SELECT_INPUT                RENET1_RXDATA_SELECT_INPUT
	ENET_RXEN_SELECT_INPUT                   RENET_RXEN_SELECT_INPUT
	ENET_RXERR_SELECT_INPUT                  RENET_RXERR_SELECT_INPUT
	ENET0_TIMER_SELECT_INPUT                 RENET0_TIMER_SELECT_INPUT
	ENET_TXCLK_SELECT_INPUT                  RENET_TXCLK_SELECT_INPUT
	FLEXCAN1_RX_SELECT_INPUT                 RFLEXCAN1_RX_SELECT_INPUT
	FLEXCAN2_RX_SELECT_INPUT                 RFLEXCAN2_RX_SELECT_INPUT
	FLEXPWM1_PWMA3_SELECT_INPUT              RFLEXPWM1_PWMA3_SELECT_INPUT
	FLEXPWM1_PWMA0_SELECT_INPUT              RFLEXPWM1_PWMA0_SELECT_INPUT
	FLEXPWM1_PWMA1_SELECT_INPUT              RFLEXPWM1_PWMA1_SELECT_INPUT
	FLEXPWM1_PWMA2_SELECT_INPUT              RFLEXPWM1_PWMA2_SELECT_INPUT
	FLEXPWM1_PWMB3_SELECT_INPUT              RFLEXPWM1_PWMB3_SELECT_INPUT
	FLEXPWM1_PWMB0_SELECT_INPUT              RFLEXPWM1_PWMB0_SELECT_INPUT
	FLEXPWM1_PWMB1_SELECT_INPUT              RFLEXPWM1_PWMB1_SELECT_INPUT
	FLEXPWM1_PWMB2_SELECT_INPUT              RFLEXPWM1_PWMB2_SELECT_INPUT
	FLEXPWM2_PWMA3_SELECT_INPUT              RFLEXPWM2_PWMA3_SELECT_INPUT
	FLEXPWM2_PWMA0_SELECT_INPUT              RFLEXPWM2_PWMA0_SELECT_INPUT
	FLEXPWM2_PWMA1_SELECT_INPUT              RFLEXPWM2_PWMA1_SELECT_INPUT
	FLEXPWM2_PWMA2_SELECT_INPUT              RFLEXPWM2_PWMA2_SELECT_INPUT
	FLEXPWM2_PWMB3_SELECT_INPUT              RFLEXPWM2_PWMB3_SELECT_INPUT
	FLEXPWM2_PWMB0_SELECT_INPUT              RFLEXPWM2_PWMB0_SELECT_INPUT
	FLEXPWM2_PWMB1_SELECT_INPUT              RFLEXPWM2_PWMB1_SELECT_INPUT
	FLEXPWM2_PWMB2_SELECT_INPUT              RFLEXPWM2_PWMB2_SELECT_INPUT
	FLEXPWM4_PWMA0_SELECT_INPUT              RFLEXPWM4_PWMA0_SELECT_INPUT
	FLEXPWM4_PWMA1_SELECT_INPUT              RFLEXPWM4_PWMA1_SELECT_INPUT
	FLEXPWM4_PWMA2_SELECT_INPUT              RFLEXPWM4_PWMA2_SELECT_INPUT
	FLEXPWM4_PWMA3_SELECT_INPUT              RFLEXPWM4_PWMA3_SELECT_INPUT
	FLEXSPIA_DQS_SELECT_INPUT                RFLEXSPIA_DQS_SELECT_INPUT
	FLEXSPIA_DATA0_SELECT_INPUT              RFLEXSPIA_DATA0_SELECT_INPUT
	FLEXSPIA_DATA1_SELECT_INPUT              RFLEXSPIA_DATA1_SELECT_INPUT
	FLEXSPIA_DATA2_SELECT_INPUT              RFLEXSPIA_DATA2_SELECT_INPUT
	FLEXSPIA_DATA3_SELECT_INPUT              RFLEXSPIA_DATA3_SELECT_INPUT
	FLEXSPIB_DATA0_SELECT_INPUT              RFLEXSPIB_DATA0_SELECT_INPUT
	FLEXSPIB_DATA1_SELECT_INPUT              RFLEXSPIB_DATA1_SELECT_INPUT
	FLEXSPIB_DATA2_SELECT_INPUT              RFLEXSPIB_DATA2_SELECT_INPUT
	FLEXSPIB_DATA3_SELECT_INPUT              RFLEXSPIB_DATA3_SELECT_INPUT
	FLEXSPIA_SCK_SELECT_INPUT                RFLEXSPIA_SCK_SELECT_INPUT
	LPI2C1_SCL_SELECT_INPUT                  RLPI2C1_SCL_SELECT_INPUT
	LPI2C1_SDA_SELECT_INPUT                  RLPI2C1_SDA_SELECT_INPUT
	LPI2C2_SCL_SELECT_INPUT                  RLPI2C2_SCL_SELECT_INPUT
	LPI2C2_SDA_SELECT_INPUT                  RLPI2C2_SDA_SELECT_INPUT
	LPI2C3_SCL_SELECT_INPUT                  RLPI2C3_SCL_SELECT_INPUT
	LPI2C3_SDA_SELECT_INPUT                  RLPI2C3_SDA_SELECT_INPUT
	LPI2C4_SCL_SELECT_INPUT                  RLPI2C4_SCL_SELECT_INPUT
	LPI2C4_SDA_SELECT_INPUT                  RLPI2C4_SDA_SELECT_INPUT
	LPSPI1_PCS0_SELECT_INPUT                 RLPSPI1_PCS0_SELECT_INPUT
	LPSPI1_SCK_SELECT_INPUT                  RLPSPI1_SCK_SELECT_INPUT
	LPSPI1_SDI_SELECT_INPUT                  RLPSPI1_SDI_SELECT_INPUT
	LPSPI1_SDO_SELECT_INPUT                  RLPSPI1_SDO_SELECT_INPUT
	LPSPI2_PCS0_SELECT_INPUT                 RLPSPI2_PCS0_SELECT_INPUT
	LPSPI2_SCK_SELECT_INPUT                  RLPSPI2_SCK_SELECT_INPUT
	LPSPI2_SDI_SELECT_INPUT                  RLPSPI2_SDI_SELECT_INPUT
	LPSPI2_SDO_SELECT_INPUT                  RLPSPI2_SDO_SELECT_INPUT
	LPSPI3_PCS0_SELECT_INPUT                 RLPSPI3_PCS0_SELECT_INPUT
	LPSPI3_SCK_SELECT_INPUT                  RLPSPI3_SCK_SELECT_INPUT
	LPSPI3_SDI_SELECT_INPUT                  RLPSPI3_SDI_SELECT_INPUT
	LPSPI3_SDO_SELECT_INPUT                  RLPSPI3_SDO_SELECT_INPUT
	LPSPI4_PCS0_SELECT_INPUT                 RLPSPI4_PCS0_SELECT_INPUT
	LPSPI4_SCK_SELECT_INPUT                  RLPSPI4_SCK_SELECT_INPUT
	LPSPI4_SDI_SELECT_INPUT                  RLPSPI4_SDI_SELECT_INPUT
	LPSPI4_SDO_SELECT_INPUT                  RLPSPI4_SDO_SELECT_INPUT
	LPUART2_RX_SELECT_INPUT                  RLPUART2_RX_SELECT_INPUT
	LPUART2_TX_SELECT_INPUT                  RLPUART2_TX_SELECT_INPUT
	LPUART3_CTS_B_SELECT_INPUT               RLPUART3_CTS_B_SELECT_INPUT
	LPUART3_RX_SELECT_INPUT                  RLPUART3_RX_SELECT_INPUT
	LPUART3_TX_SELECT_INPUT                  RLPUART3_TX_SELECT_INPUT
	LPUART4_RX_SELECT_INPUT                  RLPUART4_RX_SELECT_INPUT
	LPUART4_TX_SELECT_INPUT                  RLPUART4_TX_SELECT_INPUT
	LPUART5_RX_SELECT_INPUT                  RLPUART5_RX_SELECT_INPUT
	LPUART5_TX_SELECT_INPUT                  RLPUART5_TX_SELECT_INPUT
	LPUART6_RX_SELECT_INPUT                  RLPUART6_RX_SELECT_INPUT
	LPUART6_TX_SELECT_INPUT                  RLPUART6_TX_SELECT_INPUT
	LPUART7_RX_SELECT_INPUT                  RLPUART7_RX_SELECT_INPUT
	LPUART7_TX_SELECT_INPUT                  RLPUART7_TX_SELECT_INPUT
	LPUART8_RX_SELECT_INPUT                  RLPUART8_RX_SELECT_INPUT
	LPUART8_TX_SELECT_INPUT                  RLPUART8_TX_SELECT_INPUT
	NMI_SELECT_INPUT                         RNMI_SELECT_INPUT
	QTIMER2_TIMER0_SELECT_INPUT              RQTIMER2_TIMER0_SELECT_INPUT
	QTIMER2_TIMER1_SELECT_INPUT              RQTIMER2_TIMER1_SELECT_INPUT
	QTIMER2_TIMER2_SELECT_INPUT              RQTIMER2_TIMER2_SELECT_INPUT
	QTIMER2_TIMER3_SELECT_INPUT              RQTIMER2_TIMER3_SELECT_INPUT
	QTIMER3_TIMER0_SELECT_INPUT              RQTIMER3_TIMER0_SELECT_INPUT
	QTIMER3_TIMER1_SELECT_INPUT              RQTIMER3_TIMER1_SELECT_INPUT
	QTIMER3_TIMER2_SELECT_INPUT              RQTIMER3_TIMER2_SELECT_INPUT
	QTIMER3_TIMER3_SELECT_INPUT              RQTIMER3_TIMER3_SELECT_INPUT
	SAI1_MCLK2_SELECT_INPUT                  RSAI1_MCLK2_SELECT_INPUT
	SAI1_RX_BCLK_SELECT_INPUT                RSAI1_RX_BCLK_SELECT_INPUT
	SAI1_RX_DATA0_SELECT_INPUT               RSAI1_RX_DATA0_SELECT_INPUT
	SAI1_RX_DATA1_SELECT_INPUT               RSAI1_RX_DATA1_SELECT_INPUT
	SAI1_RX_DATA2_SELECT_INPUT               RSAI1_RX_DATA2_SELECT_INPUT
	SAI1_RX_DATA3_SELECT_INPUT               RSAI1_RX_DATA3_SELECT_INPUT
	SAI1_RX_SYNC_SELECT_INPUT                RSAI1_RX_SYNC_SELECT_INPUT
	SAI1_TX_BCLK_SELECT_INPUT                RSAI1_TX_BCLK_SELECT_INPUT
	SAI1_TX_SYNC_SELECT_INPUT                RSAI1_TX_SYNC_SELECT_INPUT
	SAI2_MCLK2_SELECT_INPUT                  RSAI2_MCLK2_SELECT_INPUT
	SAI2_RX_BCLK_SELECT_INPUT                RSAI2_RX_BCLK_SELECT_INPUT
	SAI2_RX_DATA0_SELECT_INPUT               RSAI2_RX_DATA0_SELECT_INPUT
	SAI2_RX_SYNC_SELECT_INPUT                RSAI2_RX_SYNC_SELECT_INPUT
	SAI2_TX_BCLK_SELECT_INPUT                RSAI2_TX_BCLK_SELECT_INPUT
	SAI2_TX_SYNC_SELECT_INPUT                RSAI2_TX_SYNC_SELECT_INPUT
	SPDIF_IN_SELECT_INPUT                    RSPDIF_IN_SELECT_INPUT
	USB_OTG2_OC_SELECT_INPUT                 RUSB_OTG2_OC_SELECT_INPUT
	USB_OTG1_OC_SELECT_INPUT                 RUSB_OTG1_OC_SELECT_INPUT
	USDHC1_CD_B_SELECT_INPUT                 RUSDHC1_CD_B_SELECT_INPUT
	USDHC1_WP_SELECT_INPUT                   RUSDHC1_WP_SELECT_INPUT
	USDHC2_CLK_SELECT_INPUT                  RUSDHC2_CLK_SELECT_INPUT
	USDHC2_CD_B_SELECT_INPUT                 RUSDHC2_CD_B_SELECT_INPUT
	USDHC2_CMD_SELECT_INPUT                  RUSDHC2_CMD_SELECT_INPUT
	USDHC2_DATA0_SELECT_INPUT                RUSDHC2_DATA0_SELECT_INPUT
	USDHC2_DATA1_SELECT_INPUT                RUSDHC2_DATA1_SELECT_INPUT
	USDHC2_DATA2_SELECT_INPUT                RUSDHC2_DATA2_SELECT_INPUT
	USDHC2_DATA3_SELECT_INPUT                RUSDHC2_DATA3_SELECT_INPUT
	USDHC2_DATA4_SELECT_INPUT                RUSDHC2_DATA4_SELECT_INPUT
	USDHC2_DATA5_SELECT_INPUT                RUSDHC2_DATA5_SELECT_INPUT
	USDHC2_DATA6_SELECT_INPUT                RUSDHC2_DATA6_SELECT_INPUT
	USDHC2_DATA7_SELECT_INPUT                RUSDHC2_DATA7_SELECT_INPUT
	USDHC2_WP_SELECT_INPUT                   RUSDHC2_WP_SELECT_INPUT
	XBAR1_IN02_SELECT_INPUT                  RXBAR1_IN02_SELECT_INPUT
	XBAR1_IN03_SELECT_INPUT                  RXBAR1_IN03_SELECT_INPUT
	XBAR1_IN04_SELECT_INPUT                  RXBAR1_IN04_SELECT_INPUT
	XBAR1_IN05_SELECT_INPUT                  RXBAR1_IN05_SELECT_INPUT
	XBAR1_IN06_SELECT_INPUT                  RXBAR1_IN06_SELECT_INPUT
	XBAR1_IN07_SELECT_INPUT                  RXBAR1_IN07_SELECT_INPUT
	XBAR1_IN08_SELECT_INPUT                  RXBAR1_IN08_SELECT_INPUT
	XBAR1_IN09_SELECT_INPUT                  RXBAR1_IN09_SELECT_INPUT
	XBAR1_IN17_SELECT_INPUT                  RXBAR1_IN17_SELECT_INPUT
	XBAR1_IN18_SELECT_INPUT                  RXBAR1_IN18_SELECT_INPUT
	XBAR1_IN20_SELECT_INPUT                  RXBAR1_IN20_SELECT_INPUT
	XBAR1_IN22_SELECT_INPUT                  RXBAR1_IN22_SELECT_INPUT
	XBAR1_IN23_SELECT_INPUT                  RXBAR1_IN23_SELECT_INPUT
	XBAR1_IN24_SELECT_INPUT                  RXBAR1_IN24_SELECT_INPUT
	XBAR1_IN14_SELECT_INPUT                  RXBAR1_IN14_SELECT_INPUT
	XBAR1_IN15_SELECT_INPUT                  RXBAR1_IN15_SELECT_INPUT
	XBAR1_IN16_SELECT_INPUT                  RXBAR1_IN16_SELECT_INPUT
	XBAR1_IN25_SELECT_INPUT                  RXBAR1_IN25_SELECT_INPUT
	XBAR1_IN19_SELECT_INPUT                  RXBAR1_IN19_SELECT_INPUT
	XBAR1_IN21_SELECT_INPUT                  RXBAR1_IN21_SELECT_INPUT
	SW_MUX_CTL_PAD_GPIO_SPI_B0_00            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_01            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_02            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_03            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_04            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_05            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_06            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_07            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_08            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_09            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_10            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_11            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_12            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B0_13            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B1_00            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B1_01            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B1_02            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B1_03            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B1_04            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B1_05            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B1_06            RSW_MUX_CTL
	SW_MUX_CTL_PAD_GPIO_SPI_B1_07            RSW_MUX_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_00            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_01            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_02            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_03            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_04            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_05            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_06            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_07            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_08            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_09            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_10            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_11            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_12            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B0_13            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B1_00            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B1_01            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B1_02            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B1_03            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B1_04            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B1_05            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B1_06            RSW_PAD_CTL
	SW_PAD_CTL_PAD_GPIO_SPI_B1_07            RSW_PAD_CTL
	ENET2_IPG_CLK_RMII_SELECT_INPUT          RENET2_IPG_CLK_RMII_SELECT_INPUT
	ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT     RENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT
	ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0 RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0
	ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1 RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1
	ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT     RENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT
	ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT    RENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT
	ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0  RENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0
	ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT    RENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT
	FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT     RFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT
	FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT RFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT
	FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT RFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT
	FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT RFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT
	FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT RFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT
	FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT RFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT
	FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT RFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT
	FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT RFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT
	FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT RFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT
	FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT     RFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT
	FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT     RFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT
	GPT1_IPP_IND_CAPIN1_SELECT_INPUT         RGPT1_IPP_IND_CAPIN1_SELECT_INPUT
	GPT1_IPP_IND_CAPIN2_SELECT_INPUT         RGPT1_IPP_IND_CAPIN2_SELECT_INPUT
	GPT1_IPP_IND_CLKIN_SELECT_INPUT          RGPT1_IPP_IND_CLKIN_SELECT_INPUT
	GPT2_IPP_IND_CAPIN1_SELECT_INPUT         RGPT2_IPP_IND_CAPIN1_SELECT_INPUT
	GPT2_IPP_IND_CAPIN2_SELECT_INPUT         RGPT2_IPP_IND_CAPIN2_SELECT_INPUT
	GPT2_IPP_IND_CLKIN_SELECT_INPUT          RGPT2_IPP_IND_CLKIN_SELECT_INPUT
	SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2     RSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2
	SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT     RSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT
	SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0   RSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0
	SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT     RSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT
	SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT     RSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT
	SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT     RSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT
	SEMC_I_IPP_IND_DQS4_SELECT_INPUT         RSEMC_I_IPP_IND_DQS4_SELECT_INPUT
	CANFD_IPP_IND_CANRX_SELECT_INPUT         RCANFD_IPP_IND_CANRX_SELECT_INPUT
}

func IOMUXC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.IOMUXC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type SW_MUX_CTL uint32

type RSW_MUX_CTL struct{ mmio.U32 }

func (r *RSW_MUX_CTL) LoadBits(mask SW_MUX_CTL) SW_MUX_CTL {
	return SW_MUX_CTL(r.U32.LoadBits(uint32(mask)))
}
func (r *RSW_MUX_CTL) StoreBits(mask, b SW_MUX_CTL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSW_MUX_CTL) SetBits(mask SW_MUX_CTL)      { r.U32.SetBits(uint32(mask)) }
func (r *RSW_MUX_CTL) ClearBits(mask SW_MUX_CTL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSW_MUX_CTL) Load() SW_MUX_CTL             { return SW_MUX_CTL(r.U32.Load()) }
func (r *RSW_MUX_CTL) Store(b SW_MUX_CTL)           { r.U32.Store(uint32(b)) }

type RMSW_MUX_CTL struct{ mmio.UM32 }

func (rm RMSW_MUX_CTL) Load() SW_MUX_CTL   { return SW_MUX_CTL(rm.UM32.Load()) }
func (rm RMSW_MUX_CTL) Store(b SW_MUX_CTL) { rm.UM32.Store(uint32(b)) }

type SW_PAD_CTL uint32

type RSW_PAD_CTL struct{ mmio.U32 }

func (r *RSW_PAD_CTL) LoadBits(mask SW_PAD_CTL) SW_PAD_CTL {
	return SW_PAD_CTL(r.U32.LoadBits(uint32(mask)))
}
func (r *RSW_PAD_CTL) StoreBits(mask, b SW_PAD_CTL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSW_PAD_CTL) SetBits(mask SW_PAD_CTL)      { r.U32.SetBits(uint32(mask)) }
func (r *RSW_PAD_CTL) ClearBits(mask SW_PAD_CTL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSW_PAD_CTL) Load() SW_PAD_CTL             { return SW_PAD_CTL(r.U32.Load()) }
func (r *RSW_PAD_CTL) Store(b SW_PAD_CTL)           { r.U32.Store(uint32(b)) }

type RMSW_PAD_CTL struct{ mmio.UM32 }

func (rm RMSW_PAD_CTL) Load() SW_PAD_CTL   { return SW_PAD_CTL(rm.UM32.Load()) }
func (rm RMSW_PAD_CTL) Store(b SW_PAD_CTL) { rm.UM32.Store(uint32(b)) }

type ANATOP_USB_OTG1_ID_SELECT_INPUT uint32

type RANATOP_USB_OTG1_ID_SELECT_INPUT struct{ mmio.U32 }

func (r *RANATOP_USB_OTG1_ID_SELECT_INPUT) LoadBits(mask ANATOP_USB_OTG1_ID_SELECT_INPUT) ANATOP_USB_OTG1_ID_SELECT_INPUT {
	return ANATOP_USB_OTG1_ID_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RANATOP_USB_OTG1_ID_SELECT_INPUT) StoreBits(mask, b ANATOP_USB_OTG1_ID_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RANATOP_USB_OTG1_ID_SELECT_INPUT) SetBits(mask ANATOP_USB_OTG1_ID_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RANATOP_USB_OTG1_ID_SELECT_INPUT) ClearBits(mask ANATOP_USB_OTG1_ID_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RANATOP_USB_OTG1_ID_SELECT_INPUT) Load() ANATOP_USB_OTG1_ID_SELECT_INPUT {
	return ANATOP_USB_OTG1_ID_SELECT_INPUT(r.U32.Load())
}
func (r *RANATOP_USB_OTG1_ID_SELECT_INPUT) Store(b ANATOP_USB_OTG1_ID_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMANATOP_USB_OTG1_ID_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMANATOP_USB_OTG1_ID_SELECT_INPUT) Load() ANATOP_USB_OTG1_ID_SELECT_INPUT {
	return ANATOP_USB_OTG1_ID_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMANATOP_USB_OTG1_ID_SELECT_INPUT) Store(b ANATOP_USB_OTG1_ID_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func ANATOP_USB_OTG1_ID_DAISY_(p *Periph) RMANATOP_USB_OTG1_ID_SELECT_INPUT {
	return RMANATOP_USB_OTG1_ID_SELECT_INPUT{mmio.UM32{&p.ANATOP_USB_OTG1_ID_SELECT_INPUT.U32, uint32(ANATOP_USB_OTG1_ID_DAISY)}}
}

type ANATOP_USB_OTG2_ID_SELECT_INPUT uint32

type RANATOP_USB_OTG2_ID_SELECT_INPUT struct{ mmio.U32 }

func (r *RANATOP_USB_OTG2_ID_SELECT_INPUT) LoadBits(mask ANATOP_USB_OTG2_ID_SELECT_INPUT) ANATOP_USB_OTG2_ID_SELECT_INPUT {
	return ANATOP_USB_OTG2_ID_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RANATOP_USB_OTG2_ID_SELECT_INPUT) StoreBits(mask, b ANATOP_USB_OTG2_ID_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RANATOP_USB_OTG2_ID_SELECT_INPUT) SetBits(mask ANATOP_USB_OTG2_ID_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RANATOP_USB_OTG2_ID_SELECT_INPUT) ClearBits(mask ANATOP_USB_OTG2_ID_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RANATOP_USB_OTG2_ID_SELECT_INPUT) Load() ANATOP_USB_OTG2_ID_SELECT_INPUT {
	return ANATOP_USB_OTG2_ID_SELECT_INPUT(r.U32.Load())
}
func (r *RANATOP_USB_OTG2_ID_SELECT_INPUT) Store(b ANATOP_USB_OTG2_ID_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMANATOP_USB_OTG2_ID_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMANATOP_USB_OTG2_ID_SELECT_INPUT) Load() ANATOP_USB_OTG2_ID_SELECT_INPUT {
	return ANATOP_USB_OTG2_ID_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMANATOP_USB_OTG2_ID_SELECT_INPUT) Store(b ANATOP_USB_OTG2_ID_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func ANATOP_USB_OTG2_ID_DAISY_(p *Periph) RMANATOP_USB_OTG2_ID_SELECT_INPUT {
	return RMANATOP_USB_OTG2_ID_SELECT_INPUT{mmio.UM32{&p.ANATOP_USB_OTG2_ID_SELECT_INPUT.U32, uint32(ANATOP_USB_OTG2_ID_DAISY)}}
}

type CCM_PMIC_READY_SELECT_INPUT uint32

type RCCM_PMIC_READY_SELECT_INPUT struct{ mmio.U32 }

func (r *RCCM_PMIC_READY_SELECT_INPUT) LoadBits(mask CCM_PMIC_READY_SELECT_INPUT) CCM_PMIC_READY_SELECT_INPUT {
	return CCM_PMIC_READY_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCCM_PMIC_READY_SELECT_INPUT) StoreBits(mask, b CCM_PMIC_READY_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCCM_PMIC_READY_SELECT_INPUT) SetBits(mask CCM_PMIC_READY_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RCCM_PMIC_READY_SELECT_INPUT) ClearBits(mask CCM_PMIC_READY_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCCM_PMIC_READY_SELECT_INPUT) Load() CCM_PMIC_READY_SELECT_INPUT {
	return CCM_PMIC_READY_SELECT_INPUT(r.U32.Load())
}
func (r *RCCM_PMIC_READY_SELECT_INPUT) Store(b CCM_PMIC_READY_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCCM_PMIC_READY_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCCM_PMIC_READY_SELECT_INPUT) Load() CCM_PMIC_READY_SELECT_INPUT {
	return CCM_PMIC_READY_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCCM_PMIC_READY_SELECT_INPUT) Store(b CCM_PMIC_READY_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func CCM_PMIC_READY_DAISY_(p *Periph) RMCCM_PMIC_READY_SELECT_INPUT {
	return RMCCM_PMIC_READY_SELECT_INPUT{mmio.UM32{&p.CCM_PMIC_READY_SELECT_INPUT.U32, uint32(CCM_PMIC_READY_DAISY)}}
}

type CSI_DATA02_SELECT_INPUT uint32

type RCSI_DATA02_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_DATA02_SELECT_INPUT) LoadBits(mask CSI_DATA02_SELECT_INPUT) CSI_DATA02_SELECT_INPUT {
	return CSI_DATA02_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_DATA02_SELECT_INPUT) StoreBits(mask, b CSI_DATA02_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_DATA02_SELECT_INPUT) SetBits(mask CSI_DATA02_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_DATA02_SELECT_INPUT) ClearBits(mask CSI_DATA02_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_DATA02_SELECT_INPUT) Load() CSI_DATA02_SELECT_INPUT {
	return CSI_DATA02_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_DATA02_SELECT_INPUT) Store(b CSI_DATA02_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_DATA02_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_DATA02_SELECT_INPUT) Load() CSI_DATA02_SELECT_INPUT {
	return CSI_DATA02_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_DATA02_SELECT_INPUT) Store(b CSI_DATA02_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_DATA02_DAISY_(p *Periph) RMCSI_DATA02_SELECT_INPUT {
	return RMCSI_DATA02_SELECT_INPUT{mmio.UM32{&p.CSI_DATA02_SELECT_INPUT.U32, uint32(CSI_DATA02_DAISY)}}
}

type CSI_DATA03_SELECT_INPUT uint32

type RCSI_DATA03_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_DATA03_SELECT_INPUT) LoadBits(mask CSI_DATA03_SELECT_INPUT) CSI_DATA03_SELECT_INPUT {
	return CSI_DATA03_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_DATA03_SELECT_INPUT) StoreBits(mask, b CSI_DATA03_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_DATA03_SELECT_INPUT) SetBits(mask CSI_DATA03_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_DATA03_SELECT_INPUT) ClearBits(mask CSI_DATA03_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_DATA03_SELECT_INPUT) Load() CSI_DATA03_SELECT_INPUT {
	return CSI_DATA03_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_DATA03_SELECT_INPUT) Store(b CSI_DATA03_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_DATA03_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_DATA03_SELECT_INPUT) Load() CSI_DATA03_SELECT_INPUT {
	return CSI_DATA03_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_DATA03_SELECT_INPUT) Store(b CSI_DATA03_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_DATA03_DAISY_(p *Periph) RMCSI_DATA03_SELECT_INPUT {
	return RMCSI_DATA03_SELECT_INPUT{mmio.UM32{&p.CSI_DATA03_SELECT_INPUT.U32, uint32(CSI_DATA03_DAISY)}}
}

type CSI_DATA04_SELECT_INPUT uint32

type RCSI_DATA04_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_DATA04_SELECT_INPUT) LoadBits(mask CSI_DATA04_SELECT_INPUT) CSI_DATA04_SELECT_INPUT {
	return CSI_DATA04_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_DATA04_SELECT_INPUT) StoreBits(mask, b CSI_DATA04_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_DATA04_SELECT_INPUT) SetBits(mask CSI_DATA04_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_DATA04_SELECT_INPUT) ClearBits(mask CSI_DATA04_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_DATA04_SELECT_INPUT) Load() CSI_DATA04_SELECT_INPUT {
	return CSI_DATA04_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_DATA04_SELECT_INPUT) Store(b CSI_DATA04_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_DATA04_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_DATA04_SELECT_INPUT) Load() CSI_DATA04_SELECT_INPUT {
	return CSI_DATA04_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_DATA04_SELECT_INPUT) Store(b CSI_DATA04_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_DATA04_DAISY_(p *Periph) RMCSI_DATA04_SELECT_INPUT {
	return RMCSI_DATA04_SELECT_INPUT{mmio.UM32{&p.CSI_DATA04_SELECT_INPUT.U32, uint32(CSI_DATA04_DAISY)}}
}

type CSI_DATA05_SELECT_INPUT uint32

type RCSI_DATA05_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_DATA05_SELECT_INPUT) LoadBits(mask CSI_DATA05_SELECT_INPUT) CSI_DATA05_SELECT_INPUT {
	return CSI_DATA05_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_DATA05_SELECT_INPUT) StoreBits(mask, b CSI_DATA05_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_DATA05_SELECT_INPUT) SetBits(mask CSI_DATA05_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_DATA05_SELECT_INPUT) ClearBits(mask CSI_DATA05_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_DATA05_SELECT_INPUT) Load() CSI_DATA05_SELECT_INPUT {
	return CSI_DATA05_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_DATA05_SELECT_INPUT) Store(b CSI_DATA05_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_DATA05_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_DATA05_SELECT_INPUT) Load() CSI_DATA05_SELECT_INPUT {
	return CSI_DATA05_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_DATA05_SELECT_INPUT) Store(b CSI_DATA05_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_DATA05_DAISY_(p *Periph) RMCSI_DATA05_SELECT_INPUT {
	return RMCSI_DATA05_SELECT_INPUT{mmio.UM32{&p.CSI_DATA05_SELECT_INPUT.U32, uint32(CSI_DATA05_DAISY)}}
}

type CSI_DATA06_SELECT_INPUT uint32

type RCSI_DATA06_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_DATA06_SELECT_INPUT) LoadBits(mask CSI_DATA06_SELECT_INPUT) CSI_DATA06_SELECT_INPUT {
	return CSI_DATA06_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_DATA06_SELECT_INPUT) StoreBits(mask, b CSI_DATA06_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_DATA06_SELECT_INPUT) SetBits(mask CSI_DATA06_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_DATA06_SELECT_INPUT) ClearBits(mask CSI_DATA06_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_DATA06_SELECT_INPUT) Load() CSI_DATA06_SELECT_INPUT {
	return CSI_DATA06_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_DATA06_SELECT_INPUT) Store(b CSI_DATA06_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_DATA06_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_DATA06_SELECT_INPUT) Load() CSI_DATA06_SELECT_INPUT {
	return CSI_DATA06_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_DATA06_SELECT_INPUT) Store(b CSI_DATA06_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_DATA06_DAISY_(p *Periph) RMCSI_DATA06_SELECT_INPUT {
	return RMCSI_DATA06_SELECT_INPUT{mmio.UM32{&p.CSI_DATA06_SELECT_INPUT.U32, uint32(CSI_DATA06_DAISY)}}
}

type CSI_DATA07_SELECT_INPUT uint32

type RCSI_DATA07_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_DATA07_SELECT_INPUT) LoadBits(mask CSI_DATA07_SELECT_INPUT) CSI_DATA07_SELECT_INPUT {
	return CSI_DATA07_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_DATA07_SELECT_INPUT) StoreBits(mask, b CSI_DATA07_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_DATA07_SELECT_INPUT) SetBits(mask CSI_DATA07_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_DATA07_SELECT_INPUT) ClearBits(mask CSI_DATA07_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_DATA07_SELECT_INPUT) Load() CSI_DATA07_SELECT_INPUT {
	return CSI_DATA07_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_DATA07_SELECT_INPUT) Store(b CSI_DATA07_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_DATA07_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_DATA07_SELECT_INPUT) Load() CSI_DATA07_SELECT_INPUT {
	return CSI_DATA07_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_DATA07_SELECT_INPUT) Store(b CSI_DATA07_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_DATA07_DAISY_(p *Periph) RMCSI_DATA07_SELECT_INPUT {
	return RMCSI_DATA07_SELECT_INPUT{mmio.UM32{&p.CSI_DATA07_SELECT_INPUT.U32, uint32(CSI_DATA07_DAISY)}}
}

type CSI_DATA08_SELECT_INPUT uint32

type RCSI_DATA08_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_DATA08_SELECT_INPUT) LoadBits(mask CSI_DATA08_SELECT_INPUT) CSI_DATA08_SELECT_INPUT {
	return CSI_DATA08_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_DATA08_SELECT_INPUT) StoreBits(mask, b CSI_DATA08_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_DATA08_SELECT_INPUT) SetBits(mask CSI_DATA08_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_DATA08_SELECT_INPUT) ClearBits(mask CSI_DATA08_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_DATA08_SELECT_INPUT) Load() CSI_DATA08_SELECT_INPUT {
	return CSI_DATA08_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_DATA08_SELECT_INPUT) Store(b CSI_DATA08_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_DATA08_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_DATA08_SELECT_INPUT) Load() CSI_DATA08_SELECT_INPUT {
	return CSI_DATA08_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_DATA08_SELECT_INPUT) Store(b CSI_DATA08_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_DATA08_DAISY_(p *Periph) RMCSI_DATA08_SELECT_INPUT {
	return RMCSI_DATA08_SELECT_INPUT{mmio.UM32{&p.CSI_DATA08_SELECT_INPUT.U32, uint32(CSI_DATA08_DAISY)}}
}

type CSI_DATA09_SELECT_INPUT uint32

type RCSI_DATA09_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_DATA09_SELECT_INPUT) LoadBits(mask CSI_DATA09_SELECT_INPUT) CSI_DATA09_SELECT_INPUT {
	return CSI_DATA09_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_DATA09_SELECT_INPUT) StoreBits(mask, b CSI_DATA09_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_DATA09_SELECT_INPUT) SetBits(mask CSI_DATA09_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_DATA09_SELECT_INPUT) ClearBits(mask CSI_DATA09_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_DATA09_SELECT_INPUT) Load() CSI_DATA09_SELECT_INPUT {
	return CSI_DATA09_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_DATA09_SELECT_INPUT) Store(b CSI_DATA09_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_DATA09_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_DATA09_SELECT_INPUT) Load() CSI_DATA09_SELECT_INPUT {
	return CSI_DATA09_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_DATA09_SELECT_INPUT) Store(b CSI_DATA09_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_DATA09_DAISY_(p *Periph) RMCSI_DATA09_SELECT_INPUT {
	return RMCSI_DATA09_SELECT_INPUT{mmio.UM32{&p.CSI_DATA09_SELECT_INPUT.U32, uint32(CSI_DATA09_DAISY)}}
}

type CSI_HSYNC_SELECT_INPUT uint32

type RCSI_HSYNC_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_HSYNC_SELECT_INPUT) LoadBits(mask CSI_HSYNC_SELECT_INPUT) CSI_HSYNC_SELECT_INPUT {
	return CSI_HSYNC_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_HSYNC_SELECT_INPUT) StoreBits(mask, b CSI_HSYNC_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_HSYNC_SELECT_INPUT) SetBits(mask CSI_HSYNC_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_HSYNC_SELECT_INPUT) ClearBits(mask CSI_HSYNC_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_HSYNC_SELECT_INPUT) Load() CSI_HSYNC_SELECT_INPUT {
	return CSI_HSYNC_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_HSYNC_SELECT_INPUT) Store(b CSI_HSYNC_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_HSYNC_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_HSYNC_SELECT_INPUT) Load() CSI_HSYNC_SELECT_INPUT {
	return CSI_HSYNC_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_HSYNC_SELECT_INPUT) Store(b CSI_HSYNC_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_HSYNC_DAISY_(p *Periph) RMCSI_HSYNC_SELECT_INPUT {
	return RMCSI_HSYNC_SELECT_INPUT{mmio.UM32{&p.CSI_HSYNC_SELECT_INPUT.U32, uint32(CSI_HSYNC_DAISY)}}
}

type CSI_PIXCLK_SELECT_INPUT uint32

type RCSI_PIXCLK_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_PIXCLK_SELECT_INPUT) LoadBits(mask CSI_PIXCLK_SELECT_INPUT) CSI_PIXCLK_SELECT_INPUT {
	return CSI_PIXCLK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_PIXCLK_SELECT_INPUT) StoreBits(mask, b CSI_PIXCLK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_PIXCLK_SELECT_INPUT) SetBits(mask CSI_PIXCLK_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_PIXCLK_SELECT_INPUT) ClearBits(mask CSI_PIXCLK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_PIXCLK_SELECT_INPUT) Load() CSI_PIXCLK_SELECT_INPUT {
	return CSI_PIXCLK_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_PIXCLK_SELECT_INPUT) Store(b CSI_PIXCLK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_PIXCLK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_PIXCLK_SELECT_INPUT) Load() CSI_PIXCLK_SELECT_INPUT {
	return CSI_PIXCLK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_PIXCLK_SELECT_INPUT) Store(b CSI_PIXCLK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_PIXCLK_DAISY_(p *Periph) RMCSI_PIXCLK_SELECT_INPUT {
	return RMCSI_PIXCLK_SELECT_INPUT{mmio.UM32{&p.CSI_PIXCLK_SELECT_INPUT.U32, uint32(CSI_PIXCLK_DAISY)}}
}

type CSI_VSYNC_SELECT_INPUT uint32

type RCSI_VSYNC_SELECT_INPUT struct{ mmio.U32 }

func (r *RCSI_VSYNC_SELECT_INPUT) LoadBits(mask CSI_VSYNC_SELECT_INPUT) CSI_VSYNC_SELECT_INPUT {
	return CSI_VSYNC_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCSI_VSYNC_SELECT_INPUT) StoreBits(mask, b CSI_VSYNC_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCSI_VSYNC_SELECT_INPUT) SetBits(mask CSI_VSYNC_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RCSI_VSYNC_SELECT_INPUT) ClearBits(mask CSI_VSYNC_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCSI_VSYNC_SELECT_INPUT) Load() CSI_VSYNC_SELECT_INPUT {
	return CSI_VSYNC_SELECT_INPUT(r.U32.Load())
}
func (r *RCSI_VSYNC_SELECT_INPUT) Store(b CSI_VSYNC_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMCSI_VSYNC_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCSI_VSYNC_SELECT_INPUT) Load() CSI_VSYNC_SELECT_INPUT {
	return CSI_VSYNC_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCSI_VSYNC_SELECT_INPUT) Store(b CSI_VSYNC_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func CSI_VSYNC_DAISY_(p *Periph) RMCSI_VSYNC_SELECT_INPUT {
	return RMCSI_VSYNC_SELECT_INPUT{mmio.UM32{&p.CSI_VSYNC_SELECT_INPUT.U32, uint32(CSI_VSYNC_DAISY)}}
}

type ENET_IPG_CLK_RMII_SELECT_INPUT uint32

type RENET_IPG_CLK_RMII_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET_IPG_CLK_RMII_SELECT_INPUT) LoadBits(mask ENET_IPG_CLK_RMII_SELECT_INPUT) ENET_IPG_CLK_RMII_SELECT_INPUT {
	return ENET_IPG_CLK_RMII_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET_IPG_CLK_RMII_SELECT_INPUT) StoreBits(mask, b ENET_IPG_CLK_RMII_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET_IPG_CLK_RMII_SELECT_INPUT) SetBits(mask ENET_IPG_CLK_RMII_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET_IPG_CLK_RMII_SELECT_INPUT) ClearBits(mask ENET_IPG_CLK_RMII_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET_IPG_CLK_RMII_SELECT_INPUT) Load() ENET_IPG_CLK_RMII_SELECT_INPUT {
	return ENET_IPG_CLK_RMII_SELECT_INPUT(r.U32.Load())
}
func (r *RENET_IPG_CLK_RMII_SELECT_INPUT) Store(b ENET_IPG_CLK_RMII_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMENET_IPG_CLK_RMII_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET_IPG_CLK_RMII_SELECT_INPUT) Load() ENET_IPG_CLK_RMII_SELECT_INPUT {
	return ENET_IPG_CLK_RMII_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET_IPG_CLK_RMII_SELECT_INPUT) Store(b ENET_IPG_CLK_RMII_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func ENET_IPG_CLK_RMII_DAISY_(p *Periph) RMENET_IPG_CLK_RMII_SELECT_INPUT {
	return RMENET_IPG_CLK_RMII_SELECT_INPUT{mmio.UM32{&p.ENET_IPG_CLK_RMII_SELECT_INPUT.U32, uint32(ENET_IPG_CLK_RMII_DAISY)}}
}

type ENET_MDIO_SELECT_INPUT uint32

type RENET_MDIO_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET_MDIO_SELECT_INPUT) LoadBits(mask ENET_MDIO_SELECT_INPUT) ENET_MDIO_SELECT_INPUT {
	return ENET_MDIO_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET_MDIO_SELECT_INPUT) StoreBits(mask, b ENET_MDIO_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET_MDIO_SELECT_INPUT) SetBits(mask ENET_MDIO_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RENET_MDIO_SELECT_INPUT) ClearBits(mask ENET_MDIO_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET_MDIO_SELECT_INPUT) Load() ENET_MDIO_SELECT_INPUT {
	return ENET_MDIO_SELECT_INPUT(r.U32.Load())
}
func (r *RENET_MDIO_SELECT_INPUT) Store(b ENET_MDIO_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMENET_MDIO_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET_MDIO_SELECT_INPUT) Load() ENET_MDIO_SELECT_INPUT {
	return ENET_MDIO_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET_MDIO_SELECT_INPUT) Store(b ENET_MDIO_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func ENET_MDIO_DAISY_(p *Periph) RMENET_MDIO_SELECT_INPUT {
	return RMENET_MDIO_SELECT_INPUT{mmio.UM32{&p.ENET_MDIO_SELECT_INPUT.U32, uint32(ENET_MDIO_DAISY)}}
}

type ENET0_RXDATA_SELECT_INPUT uint32

type RENET0_RXDATA_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET0_RXDATA_SELECT_INPUT) LoadBits(mask ENET0_RXDATA_SELECT_INPUT) ENET0_RXDATA_SELECT_INPUT {
	return ENET0_RXDATA_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET0_RXDATA_SELECT_INPUT) StoreBits(mask, b ENET0_RXDATA_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET0_RXDATA_SELECT_INPUT) SetBits(mask ENET0_RXDATA_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET0_RXDATA_SELECT_INPUT) ClearBits(mask ENET0_RXDATA_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET0_RXDATA_SELECT_INPUT) Load() ENET0_RXDATA_SELECT_INPUT {
	return ENET0_RXDATA_SELECT_INPUT(r.U32.Load())
}
func (r *RENET0_RXDATA_SELECT_INPUT) Store(b ENET0_RXDATA_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMENET0_RXDATA_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET0_RXDATA_SELECT_INPUT) Load() ENET0_RXDATA_SELECT_INPUT {
	return ENET0_RXDATA_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET0_RXDATA_SELECT_INPUT) Store(b ENET0_RXDATA_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func ENET0_RXDATA_DAISY_(p *Periph) RMENET0_RXDATA_SELECT_INPUT {
	return RMENET0_RXDATA_SELECT_INPUT{mmio.UM32{&p.ENET0_RXDATA_SELECT_INPUT.U32, uint32(ENET0_RXDATA_DAISY)}}
}

type ENET1_RXDATA_SELECT_INPUT uint32

type RENET1_RXDATA_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET1_RXDATA_SELECT_INPUT) LoadBits(mask ENET1_RXDATA_SELECT_INPUT) ENET1_RXDATA_SELECT_INPUT {
	return ENET1_RXDATA_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET1_RXDATA_SELECT_INPUT) StoreBits(mask, b ENET1_RXDATA_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET1_RXDATA_SELECT_INPUT) SetBits(mask ENET1_RXDATA_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET1_RXDATA_SELECT_INPUT) ClearBits(mask ENET1_RXDATA_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET1_RXDATA_SELECT_INPUT) Load() ENET1_RXDATA_SELECT_INPUT {
	return ENET1_RXDATA_SELECT_INPUT(r.U32.Load())
}
func (r *RENET1_RXDATA_SELECT_INPUT) Store(b ENET1_RXDATA_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMENET1_RXDATA_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET1_RXDATA_SELECT_INPUT) Load() ENET1_RXDATA_SELECT_INPUT {
	return ENET1_RXDATA_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET1_RXDATA_SELECT_INPUT) Store(b ENET1_RXDATA_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func ENET1_RXDATA_DAISY_(p *Periph) RMENET1_RXDATA_SELECT_INPUT {
	return RMENET1_RXDATA_SELECT_INPUT{mmio.UM32{&p.ENET1_RXDATA_SELECT_INPUT.U32, uint32(ENET1_RXDATA_DAISY)}}
}

type ENET_RXEN_SELECT_INPUT uint32

type RENET_RXEN_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET_RXEN_SELECT_INPUT) LoadBits(mask ENET_RXEN_SELECT_INPUT) ENET_RXEN_SELECT_INPUT {
	return ENET_RXEN_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET_RXEN_SELECT_INPUT) StoreBits(mask, b ENET_RXEN_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET_RXEN_SELECT_INPUT) SetBits(mask ENET_RXEN_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RENET_RXEN_SELECT_INPUT) ClearBits(mask ENET_RXEN_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET_RXEN_SELECT_INPUT) Load() ENET_RXEN_SELECT_INPUT {
	return ENET_RXEN_SELECT_INPUT(r.U32.Load())
}
func (r *RENET_RXEN_SELECT_INPUT) Store(b ENET_RXEN_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMENET_RXEN_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET_RXEN_SELECT_INPUT) Load() ENET_RXEN_SELECT_INPUT {
	return ENET_RXEN_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET_RXEN_SELECT_INPUT) Store(b ENET_RXEN_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func ENET_RXEN_DAISY_(p *Periph) RMENET_RXEN_SELECT_INPUT {
	return RMENET_RXEN_SELECT_INPUT{mmio.UM32{&p.ENET_RXEN_SELECT_INPUT.U32, uint32(ENET_RXEN_DAISY)}}
}

type ENET_RXERR_SELECT_INPUT uint32

type RENET_RXERR_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET_RXERR_SELECT_INPUT) LoadBits(mask ENET_RXERR_SELECT_INPUT) ENET_RXERR_SELECT_INPUT {
	return ENET_RXERR_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET_RXERR_SELECT_INPUT) StoreBits(mask, b ENET_RXERR_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET_RXERR_SELECT_INPUT) SetBits(mask ENET_RXERR_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RENET_RXERR_SELECT_INPUT) ClearBits(mask ENET_RXERR_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET_RXERR_SELECT_INPUT) Load() ENET_RXERR_SELECT_INPUT {
	return ENET_RXERR_SELECT_INPUT(r.U32.Load())
}
func (r *RENET_RXERR_SELECT_INPUT) Store(b ENET_RXERR_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMENET_RXERR_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET_RXERR_SELECT_INPUT) Load() ENET_RXERR_SELECT_INPUT {
	return ENET_RXERR_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET_RXERR_SELECT_INPUT) Store(b ENET_RXERR_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func ENET_RXERR_DAISY_(p *Periph) RMENET_RXERR_SELECT_INPUT {
	return RMENET_RXERR_SELECT_INPUT{mmio.UM32{&p.ENET_RXERR_SELECT_INPUT.U32, uint32(ENET_RXERR_DAISY)}}
}

type ENET0_TIMER_SELECT_INPUT uint32

type RENET0_TIMER_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET0_TIMER_SELECT_INPUT) LoadBits(mask ENET0_TIMER_SELECT_INPUT) ENET0_TIMER_SELECT_INPUT {
	return ENET0_TIMER_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET0_TIMER_SELECT_INPUT) StoreBits(mask, b ENET0_TIMER_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET0_TIMER_SELECT_INPUT) SetBits(mask ENET0_TIMER_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET0_TIMER_SELECT_INPUT) ClearBits(mask ENET0_TIMER_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET0_TIMER_SELECT_INPUT) Load() ENET0_TIMER_SELECT_INPUT {
	return ENET0_TIMER_SELECT_INPUT(r.U32.Load())
}
func (r *RENET0_TIMER_SELECT_INPUT) Store(b ENET0_TIMER_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMENET0_TIMER_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET0_TIMER_SELECT_INPUT) Load() ENET0_TIMER_SELECT_INPUT {
	return ENET0_TIMER_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET0_TIMER_SELECT_INPUT) Store(b ENET0_TIMER_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func ENET0_TIMER_DAISY_(p *Periph) RMENET0_TIMER_SELECT_INPUT {
	return RMENET0_TIMER_SELECT_INPUT{mmio.UM32{&p.ENET0_TIMER_SELECT_INPUT.U32, uint32(ENET0_TIMER_DAISY)}}
}

type ENET_TXCLK_SELECT_INPUT uint32

type RENET_TXCLK_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET_TXCLK_SELECT_INPUT) LoadBits(mask ENET_TXCLK_SELECT_INPUT) ENET_TXCLK_SELECT_INPUT {
	return ENET_TXCLK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET_TXCLK_SELECT_INPUT) StoreBits(mask, b ENET_TXCLK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET_TXCLK_SELECT_INPUT) SetBits(mask ENET_TXCLK_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RENET_TXCLK_SELECT_INPUT) ClearBits(mask ENET_TXCLK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET_TXCLK_SELECT_INPUT) Load() ENET_TXCLK_SELECT_INPUT {
	return ENET_TXCLK_SELECT_INPUT(r.U32.Load())
}
func (r *RENET_TXCLK_SELECT_INPUT) Store(b ENET_TXCLK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMENET_TXCLK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET_TXCLK_SELECT_INPUT) Load() ENET_TXCLK_SELECT_INPUT {
	return ENET_TXCLK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET_TXCLK_SELECT_INPUT) Store(b ENET_TXCLK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func ENET_TXCLK_DAISY_(p *Periph) RMENET_TXCLK_SELECT_INPUT {
	return RMENET_TXCLK_SELECT_INPUT{mmio.UM32{&p.ENET_TXCLK_SELECT_INPUT.U32, uint32(ENET_TXCLK_DAISY)}}
}

type FLEXCAN1_RX_SELECT_INPUT uint32

type RFLEXCAN1_RX_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXCAN1_RX_SELECT_INPUT) LoadBits(mask FLEXCAN1_RX_SELECT_INPUT) FLEXCAN1_RX_SELECT_INPUT {
	return FLEXCAN1_RX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXCAN1_RX_SELECT_INPUT) StoreBits(mask, b FLEXCAN1_RX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXCAN1_RX_SELECT_INPUT) SetBits(mask FLEXCAN1_RX_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXCAN1_RX_SELECT_INPUT) ClearBits(mask FLEXCAN1_RX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXCAN1_RX_SELECT_INPUT) Load() FLEXCAN1_RX_SELECT_INPUT {
	return FLEXCAN1_RX_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXCAN1_RX_SELECT_INPUT) Store(b FLEXCAN1_RX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXCAN1_RX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXCAN1_RX_SELECT_INPUT) Load() FLEXCAN1_RX_SELECT_INPUT {
	return FLEXCAN1_RX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXCAN1_RX_SELECT_INPUT) Store(b FLEXCAN1_RX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func FLEXCAN1_RX_DAISY_(p *Periph) RMFLEXCAN1_RX_SELECT_INPUT {
	return RMFLEXCAN1_RX_SELECT_INPUT{mmio.UM32{&p.FLEXCAN1_RX_SELECT_INPUT.U32, uint32(FLEXCAN1_RX_DAISY)}}
}

type FLEXCAN2_RX_SELECT_INPUT uint32

type RFLEXCAN2_RX_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXCAN2_RX_SELECT_INPUT) LoadBits(mask FLEXCAN2_RX_SELECT_INPUT) FLEXCAN2_RX_SELECT_INPUT {
	return FLEXCAN2_RX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXCAN2_RX_SELECT_INPUT) StoreBits(mask, b FLEXCAN2_RX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXCAN2_RX_SELECT_INPUT) SetBits(mask FLEXCAN2_RX_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXCAN2_RX_SELECT_INPUT) ClearBits(mask FLEXCAN2_RX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXCAN2_RX_SELECT_INPUT) Load() FLEXCAN2_RX_SELECT_INPUT {
	return FLEXCAN2_RX_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXCAN2_RX_SELECT_INPUT) Store(b FLEXCAN2_RX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXCAN2_RX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXCAN2_RX_SELECT_INPUT) Load() FLEXCAN2_RX_SELECT_INPUT {
	return FLEXCAN2_RX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXCAN2_RX_SELECT_INPUT) Store(b FLEXCAN2_RX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func FLEXCAN2_RX_DAISY_(p *Periph) RMFLEXCAN2_RX_SELECT_INPUT {
	return RMFLEXCAN2_RX_SELECT_INPUT{mmio.UM32{&p.FLEXCAN2_RX_SELECT_INPUT.U32, uint32(FLEXCAN2_RX_DAISY)}}
}

type FLEXPWM1_PWMA3_SELECT_INPUT uint32

type RFLEXPWM1_PWMA3_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM1_PWMA3_SELECT_INPUT) LoadBits(mask FLEXPWM1_PWMA3_SELECT_INPUT) FLEXPWM1_PWMA3_SELECT_INPUT {
	return FLEXPWM1_PWMA3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM1_PWMA3_SELECT_INPUT) StoreBits(mask, b FLEXPWM1_PWMA3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM1_PWMA3_SELECT_INPUT) SetBits(mask FLEXPWM1_PWMA3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMA3_SELECT_INPUT) ClearBits(mask FLEXPWM1_PWMA3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMA3_SELECT_INPUT) Load() FLEXPWM1_PWMA3_SELECT_INPUT {
	return FLEXPWM1_PWMA3_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM1_PWMA3_SELECT_INPUT) Store(b FLEXPWM1_PWMA3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM1_PWMA3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM1_PWMA3_SELECT_INPUT) Load() FLEXPWM1_PWMA3_SELECT_INPUT {
	return FLEXPWM1_PWMA3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM1_PWMA3_SELECT_INPUT) Store(b FLEXPWM1_PWMA3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM1_PWMA3_DAISY_(p *Periph) RMFLEXPWM1_PWMA3_SELECT_INPUT {
	return RMFLEXPWM1_PWMA3_SELECT_INPUT{mmio.UM32{&p.FLEXPWM1_PWMA3_SELECT_INPUT.U32, uint32(FLEXPWM1_PWMA3_DAISY)}}
}

type FLEXPWM1_PWMA0_SELECT_INPUT uint32

type RFLEXPWM1_PWMA0_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM1_PWMA0_SELECT_INPUT) LoadBits(mask FLEXPWM1_PWMA0_SELECT_INPUT) FLEXPWM1_PWMA0_SELECT_INPUT {
	return FLEXPWM1_PWMA0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM1_PWMA0_SELECT_INPUT) StoreBits(mask, b FLEXPWM1_PWMA0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM1_PWMA0_SELECT_INPUT) SetBits(mask FLEXPWM1_PWMA0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMA0_SELECT_INPUT) ClearBits(mask FLEXPWM1_PWMA0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMA0_SELECT_INPUT) Load() FLEXPWM1_PWMA0_SELECT_INPUT {
	return FLEXPWM1_PWMA0_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM1_PWMA0_SELECT_INPUT) Store(b FLEXPWM1_PWMA0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM1_PWMA0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM1_PWMA0_SELECT_INPUT) Load() FLEXPWM1_PWMA0_SELECT_INPUT {
	return FLEXPWM1_PWMA0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM1_PWMA0_SELECT_INPUT) Store(b FLEXPWM1_PWMA0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM1_PWMA0_DAISY_(p *Periph) RMFLEXPWM1_PWMA0_SELECT_INPUT {
	return RMFLEXPWM1_PWMA0_SELECT_INPUT{mmio.UM32{&p.FLEXPWM1_PWMA0_SELECT_INPUT.U32, uint32(FLEXPWM1_PWMA0_DAISY)}}
}

type FLEXPWM1_PWMA1_SELECT_INPUT uint32

type RFLEXPWM1_PWMA1_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM1_PWMA1_SELECT_INPUT) LoadBits(mask FLEXPWM1_PWMA1_SELECT_INPUT) FLEXPWM1_PWMA1_SELECT_INPUT {
	return FLEXPWM1_PWMA1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM1_PWMA1_SELECT_INPUT) StoreBits(mask, b FLEXPWM1_PWMA1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM1_PWMA1_SELECT_INPUT) SetBits(mask FLEXPWM1_PWMA1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMA1_SELECT_INPUT) ClearBits(mask FLEXPWM1_PWMA1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMA1_SELECT_INPUT) Load() FLEXPWM1_PWMA1_SELECT_INPUT {
	return FLEXPWM1_PWMA1_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM1_PWMA1_SELECT_INPUT) Store(b FLEXPWM1_PWMA1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM1_PWMA1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM1_PWMA1_SELECT_INPUT) Load() FLEXPWM1_PWMA1_SELECT_INPUT {
	return FLEXPWM1_PWMA1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM1_PWMA1_SELECT_INPUT) Store(b FLEXPWM1_PWMA1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM1_PWMA1_DAISY_(p *Periph) RMFLEXPWM1_PWMA1_SELECT_INPUT {
	return RMFLEXPWM1_PWMA1_SELECT_INPUT{mmio.UM32{&p.FLEXPWM1_PWMA1_SELECT_INPUT.U32, uint32(FLEXPWM1_PWMA1_DAISY)}}
}

type FLEXPWM1_PWMA2_SELECT_INPUT uint32

type RFLEXPWM1_PWMA2_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM1_PWMA2_SELECT_INPUT) LoadBits(mask FLEXPWM1_PWMA2_SELECT_INPUT) FLEXPWM1_PWMA2_SELECT_INPUT {
	return FLEXPWM1_PWMA2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM1_PWMA2_SELECT_INPUT) StoreBits(mask, b FLEXPWM1_PWMA2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM1_PWMA2_SELECT_INPUT) SetBits(mask FLEXPWM1_PWMA2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMA2_SELECT_INPUT) ClearBits(mask FLEXPWM1_PWMA2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMA2_SELECT_INPUT) Load() FLEXPWM1_PWMA2_SELECT_INPUT {
	return FLEXPWM1_PWMA2_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM1_PWMA2_SELECT_INPUT) Store(b FLEXPWM1_PWMA2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM1_PWMA2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM1_PWMA2_SELECT_INPUT) Load() FLEXPWM1_PWMA2_SELECT_INPUT {
	return FLEXPWM1_PWMA2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM1_PWMA2_SELECT_INPUT) Store(b FLEXPWM1_PWMA2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM1_PWMA2_DAISY_(p *Periph) RMFLEXPWM1_PWMA2_SELECT_INPUT {
	return RMFLEXPWM1_PWMA2_SELECT_INPUT{mmio.UM32{&p.FLEXPWM1_PWMA2_SELECT_INPUT.U32, uint32(FLEXPWM1_PWMA2_DAISY)}}
}

type FLEXPWM1_PWMB3_SELECT_INPUT uint32

type RFLEXPWM1_PWMB3_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM1_PWMB3_SELECT_INPUT) LoadBits(mask FLEXPWM1_PWMB3_SELECT_INPUT) FLEXPWM1_PWMB3_SELECT_INPUT {
	return FLEXPWM1_PWMB3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM1_PWMB3_SELECT_INPUT) StoreBits(mask, b FLEXPWM1_PWMB3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM1_PWMB3_SELECT_INPUT) SetBits(mask FLEXPWM1_PWMB3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMB3_SELECT_INPUT) ClearBits(mask FLEXPWM1_PWMB3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMB3_SELECT_INPUT) Load() FLEXPWM1_PWMB3_SELECT_INPUT {
	return FLEXPWM1_PWMB3_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM1_PWMB3_SELECT_INPUT) Store(b FLEXPWM1_PWMB3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM1_PWMB3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM1_PWMB3_SELECT_INPUT) Load() FLEXPWM1_PWMB3_SELECT_INPUT {
	return FLEXPWM1_PWMB3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM1_PWMB3_SELECT_INPUT) Store(b FLEXPWM1_PWMB3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM1_PWMB3_DAISY_(p *Periph) RMFLEXPWM1_PWMB3_SELECT_INPUT {
	return RMFLEXPWM1_PWMB3_SELECT_INPUT{mmio.UM32{&p.FLEXPWM1_PWMB3_SELECT_INPUT.U32, uint32(FLEXPWM1_PWMB3_DAISY)}}
}

type FLEXPWM1_PWMB0_SELECT_INPUT uint32

type RFLEXPWM1_PWMB0_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM1_PWMB0_SELECT_INPUT) LoadBits(mask FLEXPWM1_PWMB0_SELECT_INPUT) FLEXPWM1_PWMB0_SELECT_INPUT {
	return FLEXPWM1_PWMB0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM1_PWMB0_SELECT_INPUT) StoreBits(mask, b FLEXPWM1_PWMB0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM1_PWMB0_SELECT_INPUT) SetBits(mask FLEXPWM1_PWMB0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMB0_SELECT_INPUT) ClearBits(mask FLEXPWM1_PWMB0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMB0_SELECT_INPUT) Load() FLEXPWM1_PWMB0_SELECT_INPUT {
	return FLEXPWM1_PWMB0_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM1_PWMB0_SELECT_INPUT) Store(b FLEXPWM1_PWMB0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM1_PWMB0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM1_PWMB0_SELECT_INPUT) Load() FLEXPWM1_PWMB0_SELECT_INPUT {
	return FLEXPWM1_PWMB0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM1_PWMB0_SELECT_INPUT) Store(b FLEXPWM1_PWMB0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM1_PWMB0_DAISY_(p *Periph) RMFLEXPWM1_PWMB0_SELECT_INPUT {
	return RMFLEXPWM1_PWMB0_SELECT_INPUT{mmio.UM32{&p.FLEXPWM1_PWMB0_SELECT_INPUT.U32, uint32(FLEXPWM1_PWMB0_DAISY)}}
}

type FLEXPWM1_PWMB1_SELECT_INPUT uint32

type RFLEXPWM1_PWMB1_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM1_PWMB1_SELECT_INPUT) LoadBits(mask FLEXPWM1_PWMB1_SELECT_INPUT) FLEXPWM1_PWMB1_SELECT_INPUT {
	return FLEXPWM1_PWMB1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM1_PWMB1_SELECT_INPUT) StoreBits(mask, b FLEXPWM1_PWMB1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM1_PWMB1_SELECT_INPUT) SetBits(mask FLEXPWM1_PWMB1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMB1_SELECT_INPUT) ClearBits(mask FLEXPWM1_PWMB1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMB1_SELECT_INPUT) Load() FLEXPWM1_PWMB1_SELECT_INPUT {
	return FLEXPWM1_PWMB1_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM1_PWMB1_SELECT_INPUT) Store(b FLEXPWM1_PWMB1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM1_PWMB1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM1_PWMB1_SELECT_INPUT) Load() FLEXPWM1_PWMB1_SELECT_INPUT {
	return FLEXPWM1_PWMB1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM1_PWMB1_SELECT_INPUT) Store(b FLEXPWM1_PWMB1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM1_PWMB1_DAISY_(p *Periph) RMFLEXPWM1_PWMB1_SELECT_INPUT {
	return RMFLEXPWM1_PWMB1_SELECT_INPUT{mmio.UM32{&p.FLEXPWM1_PWMB1_SELECT_INPUT.U32, uint32(FLEXPWM1_PWMB1_DAISY)}}
}

type FLEXPWM1_PWMB2_SELECT_INPUT uint32

type RFLEXPWM1_PWMB2_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM1_PWMB2_SELECT_INPUT) LoadBits(mask FLEXPWM1_PWMB2_SELECT_INPUT) FLEXPWM1_PWMB2_SELECT_INPUT {
	return FLEXPWM1_PWMB2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM1_PWMB2_SELECT_INPUT) StoreBits(mask, b FLEXPWM1_PWMB2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM1_PWMB2_SELECT_INPUT) SetBits(mask FLEXPWM1_PWMB2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMB2_SELECT_INPUT) ClearBits(mask FLEXPWM1_PWMB2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM1_PWMB2_SELECT_INPUT) Load() FLEXPWM1_PWMB2_SELECT_INPUT {
	return FLEXPWM1_PWMB2_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM1_PWMB2_SELECT_INPUT) Store(b FLEXPWM1_PWMB2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM1_PWMB2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM1_PWMB2_SELECT_INPUT) Load() FLEXPWM1_PWMB2_SELECT_INPUT {
	return FLEXPWM1_PWMB2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM1_PWMB2_SELECT_INPUT) Store(b FLEXPWM1_PWMB2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM1_PWMB2_DAISY_(p *Periph) RMFLEXPWM1_PWMB2_SELECT_INPUT {
	return RMFLEXPWM1_PWMB2_SELECT_INPUT{mmio.UM32{&p.FLEXPWM1_PWMB2_SELECT_INPUT.U32, uint32(FLEXPWM1_PWMB2_DAISY)}}
}

type FLEXPWM2_PWMA3_SELECT_INPUT uint32

type RFLEXPWM2_PWMA3_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM2_PWMA3_SELECT_INPUT) LoadBits(mask FLEXPWM2_PWMA3_SELECT_INPUT) FLEXPWM2_PWMA3_SELECT_INPUT {
	return FLEXPWM2_PWMA3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM2_PWMA3_SELECT_INPUT) StoreBits(mask, b FLEXPWM2_PWMA3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM2_PWMA3_SELECT_INPUT) SetBits(mask FLEXPWM2_PWMA3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMA3_SELECT_INPUT) ClearBits(mask FLEXPWM2_PWMA3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMA3_SELECT_INPUT) Load() FLEXPWM2_PWMA3_SELECT_INPUT {
	return FLEXPWM2_PWMA3_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM2_PWMA3_SELECT_INPUT) Store(b FLEXPWM2_PWMA3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM2_PWMA3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM2_PWMA3_SELECT_INPUT) Load() FLEXPWM2_PWMA3_SELECT_INPUT {
	return FLEXPWM2_PWMA3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM2_PWMA3_SELECT_INPUT) Store(b FLEXPWM2_PWMA3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM2_PWMA3_DAISY_(p *Periph) RMFLEXPWM2_PWMA3_SELECT_INPUT {
	return RMFLEXPWM2_PWMA3_SELECT_INPUT{mmio.UM32{&p.FLEXPWM2_PWMA3_SELECT_INPUT.U32, uint32(FLEXPWM2_PWMA3_DAISY)}}
}

type FLEXPWM2_PWMA0_SELECT_INPUT uint32

type RFLEXPWM2_PWMA0_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM2_PWMA0_SELECT_INPUT) LoadBits(mask FLEXPWM2_PWMA0_SELECT_INPUT) FLEXPWM2_PWMA0_SELECT_INPUT {
	return FLEXPWM2_PWMA0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM2_PWMA0_SELECT_INPUT) StoreBits(mask, b FLEXPWM2_PWMA0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM2_PWMA0_SELECT_INPUT) SetBits(mask FLEXPWM2_PWMA0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMA0_SELECT_INPUT) ClearBits(mask FLEXPWM2_PWMA0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMA0_SELECT_INPUT) Load() FLEXPWM2_PWMA0_SELECT_INPUT {
	return FLEXPWM2_PWMA0_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM2_PWMA0_SELECT_INPUT) Store(b FLEXPWM2_PWMA0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM2_PWMA0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM2_PWMA0_SELECT_INPUT) Load() FLEXPWM2_PWMA0_SELECT_INPUT {
	return FLEXPWM2_PWMA0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM2_PWMA0_SELECT_INPUT) Store(b FLEXPWM2_PWMA0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM2_PWMA0_DAISY_(p *Periph) RMFLEXPWM2_PWMA0_SELECT_INPUT {
	return RMFLEXPWM2_PWMA0_SELECT_INPUT{mmio.UM32{&p.FLEXPWM2_PWMA0_SELECT_INPUT.U32, uint32(FLEXPWM2_PWMA0_DAISY)}}
}

type FLEXPWM2_PWMA1_SELECT_INPUT uint32

type RFLEXPWM2_PWMA1_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM2_PWMA1_SELECT_INPUT) LoadBits(mask FLEXPWM2_PWMA1_SELECT_INPUT) FLEXPWM2_PWMA1_SELECT_INPUT {
	return FLEXPWM2_PWMA1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM2_PWMA1_SELECT_INPUT) StoreBits(mask, b FLEXPWM2_PWMA1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM2_PWMA1_SELECT_INPUT) SetBits(mask FLEXPWM2_PWMA1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMA1_SELECT_INPUT) ClearBits(mask FLEXPWM2_PWMA1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMA1_SELECT_INPUT) Load() FLEXPWM2_PWMA1_SELECT_INPUT {
	return FLEXPWM2_PWMA1_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM2_PWMA1_SELECT_INPUT) Store(b FLEXPWM2_PWMA1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM2_PWMA1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM2_PWMA1_SELECT_INPUT) Load() FLEXPWM2_PWMA1_SELECT_INPUT {
	return FLEXPWM2_PWMA1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM2_PWMA1_SELECT_INPUT) Store(b FLEXPWM2_PWMA1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM2_PWMA1_DAISY_(p *Periph) RMFLEXPWM2_PWMA1_SELECT_INPUT {
	return RMFLEXPWM2_PWMA1_SELECT_INPUT{mmio.UM32{&p.FLEXPWM2_PWMA1_SELECT_INPUT.U32, uint32(FLEXPWM2_PWMA1_DAISY)}}
}

type FLEXPWM2_PWMA2_SELECT_INPUT uint32

type RFLEXPWM2_PWMA2_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM2_PWMA2_SELECT_INPUT) LoadBits(mask FLEXPWM2_PWMA2_SELECT_INPUT) FLEXPWM2_PWMA2_SELECT_INPUT {
	return FLEXPWM2_PWMA2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM2_PWMA2_SELECT_INPUT) StoreBits(mask, b FLEXPWM2_PWMA2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM2_PWMA2_SELECT_INPUT) SetBits(mask FLEXPWM2_PWMA2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMA2_SELECT_INPUT) ClearBits(mask FLEXPWM2_PWMA2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMA2_SELECT_INPUT) Load() FLEXPWM2_PWMA2_SELECT_INPUT {
	return FLEXPWM2_PWMA2_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM2_PWMA2_SELECT_INPUT) Store(b FLEXPWM2_PWMA2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM2_PWMA2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM2_PWMA2_SELECT_INPUT) Load() FLEXPWM2_PWMA2_SELECT_INPUT {
	return FLEXPWM2_PWMA2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM2_PWMA2_SELECT_INPUT) Store(b FLEXPWM2_PWMA2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM2_PWMA2_DAISY_(p *Periph) RMFLEXPWM2_PWMA2_SELECT_INPUT {
	return RMFLEXPWM2_PWMA2_SELECT_INPUT{mmio.UM32{&p.FLEXPWM2_PWMA2_SELECT_INPUT.U32, uint32(FLEXPWM2_PWMA2_DAISY)}}
}

type FLEXPWM2_PWMB3_SELECT_INPUT uint32

type RFLEXPWM2_PWMB3_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM2_PWMB3_SELECT_INPUT) LoadBits(mask FLEXPWM2_PWMB3_SELECT_INPUT) FLEXPWM2_PWMB3_SELECT_INPUT {
	return FLEXPWM2_PWMB3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM2_PWMB3_SELECT_INPUT) StoreBits(mask, b FLEXPWM2_PWMB3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM2_PWMB3_SELECT_INPUT) SetBits(mask FLEXPWM2_PWMB3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMB3_SELECT_INPUT) ClearBits(mask FLEXPWM2_PWMB3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMB3_SELECT_INPUT) Load() FLEXPWM2_PWMB3_SELECT_INPUT {
	return FLEXPWM2_PWMB3_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM2_PWMB3_SELECT_INPUT) Store(b FLEXPWM2_PWMB3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM2_PWMB3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM2_PWMB3_SELECT_INPUT) Load() FLEXPWM2_PWMB3_SELECT_INPUT {
	return FLEXPWM2_PWMB3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM2_PWMB3_SELECT_INPUT) Store(b FLEXPWM2_PWMB3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM2_PWMB3_DAISY_(p *Periph) RMFLEXPWM2_PWMB3_SELECT_INPUT {
	return RMFLEXPWM2_PWMB3_SELECT_INPUT{mmio.UM32{&p.FLEXPWM2_PWMB3_SELECT_INPUT.U32, uint32(FLEXPWM2_PWMB3_DAISY)}}
}

type FLEXPWM2_PWMB0_SELECT_INPUT uint32

type RFLEXPWM2_PWMB0_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM2_PWMB0_SELECT_INPUT) LoadBits(mask FLEXPWM2_PWMB0_SELECT_INPUT) FLEXPWM2_PWMB0_SELECT_INPUT {
	return FLEXPWM2_PWMB0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM2_PWMB0_SELECT_INPUT) StoreBits(mask, b FLEXPWM2_PWMB0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM2_PWMB0_SELECT_INPUT) SetBits(mask FLEXPWM2_PWMB0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMB0_SELECT_INPUT) ClearBits(mask FLEXPWM2_PWMB0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMB0_SELECT_INPUT) Load() FLEXPWM2_PWMB0_SELECT_INPUT {
	return FLEXPWM2_PWMB0_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM2_PWMB0_SELECT_INPUT) Store(b FLEXPWM2_PWMB0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM2_PWMB0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM2_PWMB0_SELECT_INPUT) Load() FLEXPWM2_PWMB0_SELECT_INPUT {
	return FLEXPWM2_PWMB0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM2_PWMB0_SELECT_INPUT) Store(b FLEXPWM2_PWMB0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM2_PWMB0_DAISY_(p *Periph) RMFLEXPWM2_PWMB0_SELECT_INPUT {
	return RMFLEXPWM2_PWMB0_SELECT_INPUT{mmio.UM32{&p.FLEXPWM2_PWMB0_SELECT_INPUT.U32, uint32(FLEXPWM2_PWMB0_DAISY)}}
}

type FLEXPWM2_PWMB1_SELECT_INPUT uint32

type RFLEXPWM2_PWMB1_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM2_PWMB1_SELECT_INPUT) LoadBits(mask FLEXPWM2_PWMB1_SELECT_INPUT) FLEXPWM2_PWMB1_SELECT_INPUT {
	return FLEXPWM2_PWMB1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM2_PWMB1_SELECT_INPUT) StoreBits(mask, b FLEXPWM2_PWMB1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM2_PWMB1_SELECT_INPUT) SetBits(mask FLEXPWM2_PWMB1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMB1_SELECT_INPUT) ClearBits(mask FLEXPWM2_PWMB1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMB1_SELECT_INPUT) Load() FLEXPWM2_PWMB1_SELECT_INPUT {
	return FLEXPWM2_PWMB1_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM2_PWMB1_SELECT_INPUT) Store(b FLEXPWM2_PWMB1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM2_PWMB1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM2_PWMB1_SELECT_INPUT) Load() FLEXPWM2_PWMB1_SELECT_INPUT {
	return FLEXPWM2_PWMB1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM2_PWMB1_SELECT_INPUT) Store(b FLEXPWM2_PWMB1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM2_PWMB1_DAISY_(p *Periph) RMFLEXPWM2_PWMB1_SELECT_INPUT {
	return RMFLEXPWM2_PWMB1_SELECT_INPUT{mmio.UM32{&p.FLEXPWM2_PWMB1_SELECT_INPUT.U32, uint32(FLEXPWM2_PWMB1_DAISY)}}
}

type FLEXPWM2_PWMB2_SELECT_INPUT uint32

type RFLEXPWM2_PWMB2_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM2_PWMB2_SELECT_INPUT) LoadBits(mask FLEXPWM2_PWMB2_SELECT_INPUT) FLEXPWM2_PWMB2_SELECT_INPUT {
	return FLEXPWM2_PWMB2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM2_PWMB2_SELECT_INPUT) StoreBits(mask, b FLEXPWM2_PWMB2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM2_PWMB2_SELECT_INPUT) SetBits(mask FLEXPWM2_PWMB2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMB2_SELECT_INPUT) ClearBits(mask FLEXPWM2_PWMB2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM2_PWMB2_SELECT_INPUT) Load() FLEXPWM2_PWMB2_SELECT_INPUT {
	return FLEXPWM2_PWMB2_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM2_PWMB2_SELECT_INPUT) Store(b FLEXPWM2_PWMB2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM2_PWMB2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM2_PWMB2_SELECT_INPUT) Load() FLEXPWM2_PWMB2_SELECT_INPUT {
	return FLEXPWM2_PWMB2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM2_PWMB2_SELECT_INPUT) Store(b FLEXPWM2_PWMB2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM2_PWMB2_DAISY_(p *Periph) RMFLEXPWM2_PWMB2_SELECT_INPUT {
	return RMFLEXPWM2_PWMB2_SELECT_INPUT{mmio.UM32{&p.FLEXPWM2_PWMB2_SELECT_INPUT.U32, uint32(FLEXPWM2_PWMB2_DAISY)}}
}

type FLEXPWM4_PWMA0_SELECT_INPUT uint32

type RFLEXPWM4_PWMA0_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM4_PWMA0_SELECT_INPUT) LoadBits(mask FLEXPWM4_PWMA0_SELECT_INPUT) FLEXPWM4_PWMA0_SELECT_INPUT {
	return FLEXPWM4_PWMA0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM4_PWMA0_SELECT_INPUT) StoreBits(mask, b FLEXPWM4_PWMA0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM4_PWMA0_SELECT_INPUT) SetBits(mask FLEXPWM4_PWMA0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM4_PWMA0_SELECT_INPUT) ClearBits(mask FLEXPWM4_PWMA0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM4_PWMA0_SELECT_INPUT) Load() FLEXPWM4_PWMA0_SELECT_INPUT {
	return FLEXPWM4_PWMA0_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM4_PWMA0_SELECT_INPUT) Store(b FLEXPWM4_PWMA0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM4_PWMA0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM4_PWMA0_SELECT_INPUT) Load() FLEXPWM4_PWMA0_SELECT_INPUT {
	return FLEXPWM4_PWMA0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM4_PWMA0_SELECT_INPUT) Store(b FLEXPWM4_PWMA0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM4_PWMA0_DAISY_(p *Periph) RMFLEXPWM4_PWMA0_SELECT_INPUT {
	return RMFLEXPWM4_PWMA0_SELECT_INPUT{mmio.UM32{&p.FLEXPWM4_PWMA0_SELECT_INPUT.U32, uint32(FLEXPWM4_PWMA0_DAISY)}}
}

type FLEXPWM4_PWMA1_SELECT_INPUT uint32

type RFLEXPWM4_PWMA1_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM4_PWMA1_SELECT_INPUT) LoadBits(mask FLEXPWM4_PWMA1_SELECT_INPUT) FLEXPWM4_PWMA1_SELECT_INPUT {
	return FLEXPWM4_PWMA1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM4_PWMA1_SELECT_INPUT) StoreBits(mask, b FLEXPWM4_PWMA1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM4_PWMA1_SELECT_INPUT) SetBits(mask FLEXPWM4_PWMA1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM4_PWMA1_SELECT_INPUT) ClearBits(mask FLEXPWM4_PWMA1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM4_PWMA1_SELECT_INPUT) Load() FLEXPWM4_PWMA1_SELECT_INPUT {
	return FLEXPWM4_PWMA1_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM4_PWMA1_SELECT_INPUT) Store(b FLEXPWM4_PWMA1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM4_PWMA1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM4_PWMA1_SELECT_INPUT) Load() FLEXPWM4_PWMA1_SELECT_INPUT {
	return FLEXPWM4_PWMA1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM4_PWMA1_SELECT_INPUT) Store(b FLEXPWM4_PWMA1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM4_PWMA1_DAISY_(p *Periph) RMFLEXPWM4_PWMA1_SELECT_INPUT {
	return RMFLEXPWM4_PWMA1_SELECT_INPUT{mmio.UM32{&p.FLEXPWM4_PWMA1_SELECT_INPUT.U32, uint32(FLEXPWM4_PWMA1_DAISY)}}
}

type FLEXPWM4_PWMA2_SELECT_INPUT uint32

type RFLEXPWM4_PWMA2_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM4_PWMA2_SELECT_INPUT) LoadBits(mask FLEXPWM4_PWMA2_SELECT_INPUT) FLEXPWM4_PWMA2_SELECT_INPUT {
	return FLEXPWM4_PWMA2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM4_PWMA2_SELECT_INPUT) StoreBits(mask, b FLEXPWM4_PWMA2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM4_PWMA2_SELECT_INPUT) SetBits(mask FLEXPWM4_PWMA2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM4_PWMA2_SELECT_INPUT) ClearBits(mask FLEXPWM4_PWMA2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM4_PWMA2_SELECT_INPUT) Load() FLEXPWM4_PWMA2_SELECT_INPUT {
	return FLEXPWM4_PWMA2_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM4_PWMA2_SELECT_INPUT) Store(b FLEXPWM4_PWMA2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM4_PWMA2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM4_PWMA2_SELECT_INPUT) Load() FLEXPWM4_PWMA2_SELECT_INPUT {
	return FLEXPWM4_PWMA2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM4_PWMA2_SELECT_INPUT) Store(b FLEXPWM4_PWMA2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM4_PWMA2_DAISY_(p *Periph) RMFLEXPWM4_PWMA2_SELECT_INPUT {
	return RMFLEXPWM4_PWMA2_SELECT_INPUT{mmio.UM32{&p.FLEXPWM4_PWMA2_SELECT_INPUT.U32, uint32(FLEXPWM4_PWMA2_DAISY)}}
}

type FLEXPWM4_PWMA3_SELECT_INPUT uint32

type RFLEXPWM4_PWMA3_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXPWM4_PWMA3_SELECT_INPUT) LoadBits(mask FLEXPWM4_PWMA3_SELECT_INPUT) FLEXPWM4_PWMA3_SELECT_INPUT {
	return FLEXPWM4_PWMA3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXPWM4_PWMA3_SELECT_INPUT) StoreBits(mask, b FLEXPWM4_PWMA3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXPWM4_PWMA3_SELECT_INPUT) SetBits(mask FLEXPWM4_PWMA3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXPWM4_PWMA3_SELECT_INPUT) ClearBits(mask FLEXPWM4_PWMA3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXPWM4_PWMA3_SELECT_INPUT) Load() FLEXPWM4_PWMA3_SELECT_INPUT {
	return FLEXPWM4_PWMA3_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXPWM4_PWMA3_SELECT_INPUT) Store(b FLEXPWM4_PWMA3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXPWM4_PWMA3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXPWM4_PWMA3_SELECT_INPUT) Load() FLEXPWM4_PWMA3_SELECT_INPUT {
	return FLEXPWM4_PWMA3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXPWM4_PWMA3_SELECT_INPUT) Store(b FLEXPWM4_PWMA3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXPWM4_PWMA3_DAISY_(p *Periph) RMFLEXPWM4_PWMA3_SELECT_INPUT {
	return RMFLEXPWM4_PWMA3_SELECT_INPUT{mmio.UM32{&p.FLEXPWM4_PWMA3_SELECT_INPUT.U32, uint32(FLEXPWM4_PWMA3_DAISY)}}
}

type FLEXSPIA_DQS_SELECT_INPUT uint32

type RFLEXSPIA_DQS_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPIA_DQS_SELECT_INPUT) LoadBits(mask FLEXSPIA_DQS_SELECT_INPUT) FLEXSPIA_DQS_SELECT_INPUT {
	return FLEXSPIA_DQS_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPIA_DQS_SELECT_INPUT) StoreBits(mask, b FLEXSPIA_DQS_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPIA_DQS_SELECT_INPUT) SetBits(mask FLEXSPIA_DQS_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPIA_DQS_SELECT_INPUT) ClearBits(mask FLEXSPIA_DQS_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPIA_DQS_SELECT_INPUT) Load() FLEXSPIA_DQS_SELECT_INPUT {
	return FLEXSPIA_DQS_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPIA_DQS_SELECT_INPUT) Store(b FLEXSPIA_DQS_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXSPIA_DQS_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPIA_DQS_SELECT_INPUT) Load() FLEXSPIA_DQS_SELECT_INPUT {
	return FLEXSPIA_DQS_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPIA_DQS_SELECT_INPUT) Store(b FLEXSPIA_DQS_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func FLEXSPIA_DQS_DAISY_(p *Periph) RMFLEXSPIA_DQS_SELECT_INPUT {
	return RMFLEXSPIA_DQS_SELECT_INPUT{mmio.UM32{&p.FLEXSPIA_DQS_SELECT_INPUT.U32, uint32(FLEXSPIA_DQS_DAISY)}}
}

type FLEXSPIA_DATA0_SELECT_INPUT uint32

type RFLEXSPIA_DATA0_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPIA_DATA0_SELECT_INPUT) LoadBits(mask FLEXSPIA_DATA0_SELECT_INPUT) FLEXSPIA_DATA0_SELECT_INPUT {
	return FLEXSPIA_DATA0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPIA_DATA0_SELECT_INPUT) StoreBits(mask, b FLEXSPIA_DATA0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPIA_DATA0_SELECT_INPUT) SetBits(mask FLEXSPIA_DATA0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPIA_DATA0_SELECT_INPUT) ClearBits(mask FLEXSPIA_DATA0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPIA_DATA0_SELECT_INPUT) Load() FLEXSPIA_DATA0_SELECT_INPUT {
	return FLEXSPIA_DATA0_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPIA_DATA0_SELECT_INPUT) Store(b FLEXSPIA_DATA0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXSPIA_DATA0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPIA_DATA0_SELECT_INPUT) Load() FLEXSPIA_DATA0_SELECT_INPUT {
	return FLEXSPIA_DATA0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPIA_DATA0_SELECT_INPUT) Store(b FLEXSPIA_DATA0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPIA_DATA0_DAISY_(p *Periph) RMFLEXSPIA_DATA0_SELECT_INPUT {
	return RMFLEXSPIA_DATA0_SELECT_INPUT{mmio.UM32{&p.FLEXSPIA_DATA0_SELECT_INPUT.U32, uint32(FLEXSPIA_DATA0_DAISY)}}
}

type FLEXSPIA_DATA1_SELECT_INPUT uint32

type RFLEXSPIA_DATA1_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPIA_DATA1_SELECT_INPUT) LoadBits(mask FLEXSPIA_DATA1_SELECT_INPUT) FLEXSPIA_DATA1_SELECT_INPUT {
	return FLEXSPIA_DATA1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPIA_DATA1_SELECT_INPUT) StoreBits(mask, b FLEXSPIA_DATA1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPIA_DATA1_SELECT_INPUT) SetBits(mask FLEXSPIA_DATA1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPIA_DATA1_SELECT_INPUT) ClearBits(mask FLEXSPIA_DATA1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPIA_DATA1_SELECT_INPUT) Load() FLEXSPIA_DATA1_SELECT_INPUT {
	return FLEXSPIA_DATA1_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPIA_DATA1_SELECT_INPUT) Store(b FLEXSPIA_DATA1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXSPIA_DATA1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPIA_DATA1_SELECT_INPUT) Load() FLEXSPIA_DATA1_SELECT_INPUT {
	return FLEXSPIA_DATA1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPIA_DATA1_SELECT_INPUT) Store(b FLEXSPIA_DATA1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPIA_DATA1_DAISY_(p *Periph) RMFLEXSPIA_DATA1_SELECT_INPUT {
	return RMFLEXSPIA_DATA1_SELECT_INPUT{mmio.UM32{&p.FLEXSPIA_DATA1_SELECT_INPUT.U32, uint32(FLEXSPIA_DATA1_DAISY)}}
}

type FLEXSPIA_DATA2_SELECT_INPUT uint32

type RFLEXSPIA_DATA2_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPIA_DATA2_SELECT_INPUT) LoadBits(mask FLEXSPIA_DATA2_SELECT_INPUT) FLEXSPIA_DATA2_SELECT_INPUT {
	return FLEXSPIA_DATA2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPIA_DATA2_SELECT_INPUT) StoreBits(mask, b FLEXSPIA_DATA2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPIA_DATA2_SELECT_INPUT) SetBits(mask FLEXSPIA_DATA2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPIA_DATA2_SELECT_INPUT) ClearBits(mask FLEXSPIA_DATA2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPIA_DATA2_SELECT_INPUT) Load() FLEXSPIA_DATA2_SELECT_INPUT {
	return FLEXSPIA_DATA2_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPIA_DATA2_SELECT_INPUT) Store(b FLEXSPIA_DATA2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXSPIA_DATA2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPIA_DATA2_SELECT_INPUT) Load() FLEXSPIA_DATA2_SELECT_INPUT {
	return FLEXSPIA_DATA2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPIA_DATA2_SELECT_INPUT) Store(b FLEXSPIA_DATA2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPIA_DATA2_DAISY_(p *Periph) RMFLEXSPIA_DATA2_SELECT_INPUT {
	return RMFLEXSPIA_DATA2_SELECT_INPUT{mmio.UM32{&p.FLEXSPIA_DATA2_SELECT_INPUT.U32, uint32(FLEXSPIA_DATA2_DAISY)}}
}

type FLEXSPIA_DATA3_SELECT_INPUT uint32

type RFLEXSPIA_DATA3_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPIA_DATA3_SELECT_INPUT) LoadBits(mask FLEXSPIA_DATA3_SELECT_INPUT) FLEXSPIA_DATA3_SELECT_INPUT {
	return FLEXSPIA_DATA3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPIA_DATA3_SELECT_INPUT) StoreBits(mask, b FLEXSPIA_DATA3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPIA_DATA3_SELECT_INPUT) SetBits(mask FLEXSPIA_DATA3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPIA_DATA3_SELECT_INPUT) ClearBits(mask FLEXSPIA_DATA3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPIA_DATA3_SELECT_INPUT) Load() FLEXSPIA_DATA3_SELECT_INPUT {
	return FLEXSPIA_DATA3_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPIA_DATA3_SELECT_INPUT) Store(b FLEXSPIA_DATA3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXSPIA_DATA3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPIA_DATA3_SELECT_INPUT) Load() FLEXSPIA_DATA3_SELECT_INPUT {
	return FLEXSPIA_DATA3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPIA_DATA3_SELECT_INPUT) Store(b FLEXSPIA_DATA3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPIA_DATA3_DAISY_(p *Periph) RMFLEXSPIA_DATA3_SELECT_INPUT {
	return RMFLEXSPIA_DATA3_SELECT_INPUT{mmio.UM32{&p.FLEXSPIA_DATA3_SELECT_INPUT.U32, uint32(FLEXSPIA_DATA3_DAISY)}}
}

type FLEXSPIB_DATA0_SELECT_INPUT uint32

type RFLEXSPIB_DATA0_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPIB_DATA0_SELECT_INPUT) LoadBits(mask FLEXSPIB_DATA0_SELECT_INPUT) FLEXSPIB_DATA0_SELECT_INPUT {
	return FLEXSPIB_DATA0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPIB_DATA0_SELECT_INPUT) StoreBits(mask, b FLEXSPIB_DATA0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPIB_DATA0_SELECT_INPUT) SetBits(mask FLEXSPIB_DATA0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPIB_DATA0_SELECT_INPUT) ClearBits(mask FLEXSPIB_DATA0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPIB_DATA0_SELECT_INPUT) Load() FLEXSPIB_DATA0_SELECT_INPUT {
	return FLEXSPIB_DATA0_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPIB_DATA0_SELECT_INPUT) Store(b FLEXSPIB_DATA0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXSPIB_DATA0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPIB_DATA0_SELECT_INPUT) Load() FLEXSPIB_DATA0_SELECT_INPUT {
	return FLEXSPIB_DATA0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPIB_DATA0_SELECT_INPUT) Store(b FLEXSPIB_DATA0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPIB_DATA0_DAISY_(p *Periph) RMFLEXSPIB_DATA0_SELECT_INPUT {
	return RMFLEXSPIB_DATA0_SELECT_INPUT{mmio.UM32{&p.FLEXSPIB_DATA0_SELECT_INPUT.U32, uint32(FLEXSPIB_DATA0_DAISY)}}
}

type FLEXSPIB_DATA1_SELECT_INPUT uint32

type RFLEXSPIB_DATA1_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPIB_DATA1_SELECT_INPUT) LoadBits(mask FLEXSPIB_DATA1_SELECT_INPUT) FLEXSPIB_DATA1_SELECT_INPUT {
	return FLEXSPIB_DATA1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPIB_DATA1_SELECT_INPUT) StoreBits(mask, b FLEXSPIB_DATA1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPIB_DATA1_SELECT_INPUT) SetBits(mask FLEXSPIB_DATA1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPIB_DATA1_SELECT_INPUT) ClearBits(mask FLEXSPIB_DATA1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPIB_DATA1_SELECT_INPUT) Load() FLEXSPIB_DATA1_SELECT_INPUT {
	return FLEXSPIB_DATA1_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPIB_DATA1_SELECT_INPUT) Store(b FLEXSPIB_DATA1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXSPIB_DATA1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPIB_DATA1_SELECT_INPUT) Load() FLEXSPIB_DATA1_SELECT_INPUT {
	return FLEXSPIB_DATA1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPIB_DATA1_SELECT_INPUT) Store(b FLEXSPIB_DATA1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPIB_DATA1_DAISY_(p *Periph) RMFLEXSPIB_DATA1_SELECT_INPUT {
	return RMFLEXSPIB_DATA1_SELECT_INPUT{mmio.UM32{&p.FLEXSPIB_DATA1_SELECT_INPUT.U32, uint32(FLEXSPIB_DATA1_DAISY)}}
}

type FLEXSPIB_DATA2_SELECT_INPUT uint32

type RFLEXSPIB_DATA2_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPIB_DATA2_SELECT_INPUT) LoadBits(mask FLEXSPIB_DATA2_SELECT_INPUT) FLEXSPIB_DATA2_SELECT_INPUT {
	return FLEXSPIB_DATA2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPIB_DATA2_SELECT_INPUT) StoreBits(mask, b FLEXSPIB_DATA2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPIB_DATA2_SELECT_INPUT) SetBits(mask FLEXSPIB_DATA2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPIB_DATA2_SELECT_INPUT) ClearBits(mask FLEXSPIB_DATA2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPIB_DATA2_SELECT_INPUT) Load() FLEXSPIB_DATA2_SELECT_INPUT {
	return FLEXSPIB_DATA2_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPIB_DATA2_SELECT_INPUT) Store(b FLEXSPIB_DATA2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXSPIB_DATA2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPIB_DATA2_SELECT_INPUT) Load() FLEXSPIB_DATA2_SELECT_INPUT {
	return FLEXSPIB_DATA2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPIB_DATA2_SELECT_INPUT) Store(b FLEXSPIB_DATA2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPIB_DATA2_DAISY_(p *Periph) RMFLEXSPIB_DATA2_SELECT_INPUT {
	return RMFLEXSPIB_DATA2_SELECT_INPUT{mmio.UM32{&p.FLEXSPIB_DATA2_SELECT_INPUT.U32, uint32(FLEXSPIB_DATA2_DAISY)}}
}

type FLEXSPIB_DATA3_SELECT_INPUT uint32

type RFLEXSPIB_DATA3_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPIB_DATA3_SELECT_INPUT) LoadBits(mask FLEXSPIB_DATA3_SELECT_INPUT) FLEXSPIB_DATA3_SELECT_INPUT {
	return FLEXSPIB_DATA3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPIB_DATA3_SELECT_INPUT) StoreBits(mask, b FLEXSPIB_DATA3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPIB_DATA3_SELECT_INPUT) SetBits(mask FLEXSPIB_DATA3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPIB_DATA3_SELECT_INPUT) ClearBits(mask FLEXSPIB_DATA3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPIB_DATA3_SELECT_INPUT) Load() FLEXSPIB_DATA3_SELECT_INPUT {
	return FLEXSPIB_DATA3_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPIB_DATA3_SELECT_INPUT) Store(b FLEXSPIB_DATA3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXSPIB_DATA3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPIB_DATA3_SELECT_INPUT) Load() FLEXSPIB_DATA3_SELECT_INPUT {
	return FLEXSPIB_DATA3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPIB_DATA3_SELECT_INPUT) Store(b FLEXSPIB_DATA3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPIB_DATA3_DAISY_(p *Periph) RMFLEXSPIB_DATA3_SELECT_INPUT {
	return RMFLEXSPIB_DATA3_SELECT_INPUT{mmio.UM32{&p.FLEXSPIB_DATA3_SELECT_INPUT.U32, uint32(FLEXSPIB_DATA3_DAISY)}}
}

type FLEXSPIA_SCK_SELECT_INPUT uint32

type RFLEXSPIA_SCK_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPIA_SCK_SELECT_INPUT) LoadBits(mask FLEXSPIA_SCK_SELECT_INPUT) FLEXSPIA_SCK_SELECT_INPUT {
	return FLEXSPIA_SCK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPIA_SCK_SELECT_INPUT) StoreBits(mask, b FLEXSPIA_SCK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPIA_SCK_SELECT_INPUT) SetBits(mask FLEXSPIA_SCK_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPIA_SCK_SELECT_INPUT) ClearBits(mask FLEXSPIA_SCK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPIA_SCK_SELECT_INPUT) Load() FLEXSPIA_SCK_SELECT_INPUT {
	return FLEXSPIA_SCK_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPIA_SCK_SELECT_INPUT) Store(b FLEXSPIA_SCK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMFLEXSPIA_SCK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPIA_SCK_SELECT_INPUT) Load() FLEXSPIA_SCK_SELECT_INPUT {
	return FLEXSPIA_SCK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPIA_SCK_SELECT_INPUT) Store(b FLEXSPIA_SCK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func FLEXSPIA_SCK_DAISY_(p *Periph) RMFLEXSPIA_SCK_SELECT_INPUT {
	return RMFLEXSPIA_SCK_SELECT_INPUT{mmio.UM32{&p.FLEXSPIA_SCK_SELECT_INPUT.U32, uint32(FLEXSPIA_SCK_DAISY)}}
}

type LPI2C1_SCL_SELECT_INPUT uint32

type RLPI2C1_SCL_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPI2C1_SCL_SELECT_INPUT) LoadBits(mask LPI2C1_SCL_SELECT_INPUT) LPI2C1_SCL_SELECT_INPUT {
	return LPI2C1_SCL_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPI2C1_SCL_SELECT_INPUT) StoreBits(mask, b LPI2C1_SCL_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPI2C1_SCL_SELECT_INPUT) SetBits(mask LPI2C1_SCL_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPI2C1_SCL_SELECT_INPUT) ClearBits(mask LPI2C1_SCL_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPI2C1_SCL_SELECT_INPUT) Load() LPI2C1_SCL_SELECT_INPUT {
	return LPI2C1_SCL_SELECT_INPUT(r.U32.Load())
}
func (r *RLPI2C1_SCL_SELECT_INPUT) Store(b LPI2C1_SCL_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPI2C1_SCL_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPI2C1_SCL_SELECT_INPUT) Load() LPI2C1_SCL_SELECT_INPUT {
	return LPI2C1_SCL_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPI2C1_SCL_SELECT_INPUT) Store(b LPI2C1_SCL_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPI2C1_SCL_DAISY_(p *Periph) RMLPI2C1_SCL_SELECT_INPUT {
	return RMLPI2C1_SCL_SELECT_INPUT{mmio.UM32{&p.LPI2C1_SCL_SELECT_INPUT.U32, uint32(LPI2C1_SCL_DAISY)}}
}

type LPI2C1_SDA_SELECT_INPUT uint32

type RLPI2C1_SDA_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPI2C1_SDA_SELECT_INPUT) LoadBits(mask LPI2C1_SDA_SELECT_INPUT) LPI2C1_SDA_SELECT_INPUT {
	return LPI2C1_SDA_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPI2C1_SDA_SELECT_INPUT) StoreBits(mask, b LPI2C1_SDA_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPI2C1_SDA_SELECT_INPUT) SetBits(mask LPI2C1_SDA_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPI2C1_SDA_SELECT_INPUT) ClearBits(mask LPI2C1_SDA_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPI2C1_SDA_SELECT_INPUT) Load() LPI2C1_SDA_SELECT_INPUT {
	return LPI2C1_SDA_SELECT_INPUT(r.U32.Load())
}
func (r *RLPI2C1_SDA_SELECT_INPUT) Store(b LPI2C1_SDA_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPI2C1_SDA_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPI2C1_SDA_SELECT_INPUT) Load() LPI2C1_SDA_SELECT_INPUT {
	return LPI2C1_SDA_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPI2C1_SDA_SELECT_INPUT) Store(b LPI2C1_SDA_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPI2C1_SDA_DAISY_(p *Periph) RMLPI2C1_SDA_SELECT_INPUT {
	return RMLPI2C1_SDA_SELECT_INPUT{mmio.UM32{&p.LPI2C1_SDA_SELECT_INPUT.U32, uint32(LPI2C1_SDA_DAISY)}}
}

type LPI2C2_SCL_SELECT_INPUT uint32

type RLPI2C2_SCL_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPI2C2_SCL_SELECT_INPUT) LoadBits(mask LPI2C2_SCL_SELECT_INPUT) LPI2C2_SCL_SELECT_INPUT {
	return LPI2C2_SCL_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPI2C2_SCL_SELECT_INPUT) StoreBits(mask, b LPI2C2_SCL_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPI2C2_SCL_SELECT_INPUT) SetBits(mask LPI2C2_SCL_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPI2C2_SCL_SELECT_INPUT) ClearBits(mask LPI2C2_SCL_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPI2C2_SCL_SELECT_INPUT) Load() LPI2C2_SCL_SELECT_INPUT {
	return LPI2C2_SCL_SELECT_INPUT(r.U32.Load())
}
func (r *RLPI2C2_SCL_SELECT_INPUT) Store(b LPI2C2_SCL_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPI2C2_SCL_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPI2C2_SCL_SELECT_INPUT) Load() LPI2C2_SCL_SELECT_INPUT {
	return LPI2C2_SCL_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPI2C2_SCL_SELECT_INPUT) Store(b LPI2C2_SCL_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPI2C2_SCL_DAISY_(p *Periph) RMLPI2C2_SCL_SELECT_INPUT {
	return RMLPI2C2_SCL_SELECT_INPUT{mmio.UM32{&p.LPI2C2_SCL_SELECT_INPUT.U32, uint32(LPI2C2_SCL_DAISY)}}
}

type LPI2C2_SDA_SELECT_INPUT uint32

type RLPI2C2_SDA_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPI2C2_SDA_SELECT_INPUT) LoadBits(mask LPI2C2_SDA_SELECT_INPUT) LPI2C2_SDA_SELECT_INPUT {
	return LPI2C2_SDA_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPI2C2_SDA_SELECT_INPUT) StoreBits(mask, b LPI2C2_SDA_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPI2C2_SDA_SELECT_INPUT) SetBits(mask LPI2C2_SDA_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPI2C2_SDA_SELECT_INPUT) ClearBits(mask LPI2C2_SDA_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPI2C2_SDA_SELECT_INPUT) Load() LPI2C2_SDA_SELECT_INPUT {
	return LPI2C2_SDA_SELECT_INPUT(r.U32.Load())
}
func (r *RLPI2C2_SDA_SELECT_INPUT) Store(b LPI2C2_SDA_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPI2C2_SDA_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPI2C2_SDA_SELECT_INPUT) Load() LPI2C2_SDA_SELECT_INPUT {
	return LPI2C2_SDA_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPI2C2_SDA_SELECT_INPUT) Store(b LPI2C2_SDA_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPI2C2_SDA_DAISY_(p *Periph) RMLPI2C2_SDA_SELECT_INPUT {
	return RMLPI2C2_SDA_SELECT_INPUT{mmio.UM32{&p.LPI2C2_SDA_SELECT_INPUT.U32, uint32(LPI2C2_SDA_DAISY)}}
}

type LPI2C3_SCL_SELECT_INPUT uint32

type RLPI2C3_SCL_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPI2C3_SCL_SELECT_INPUT) LoadBits(mask LPI2C3_SCL_SELECT_INPUT) LPI2C3_SCL_SELECT_INPUT {
	return LPI2C3_SCL_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPI2C3_SCL_SELECT_INPUT) StoreBits(mask, b LPI2C3_SCL_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPI2C3_SCL_SELECT_INPUT) SetBits(mask LPI2C3_SCL_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPI2C3_SCL_SELECT_INPUT) ClearBits(mask LPI2C3_SCL_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPI2C3_SCL_SELECT_INPUT) Load() LPI2C3_SCL_SELECT_INPUT {
	return LPI2C3_SCL_SELECT_INPUT(r.U32.Load())
}
func (r *RLPI2C3_SCL_SELECT_INPUT) Store(b LPI2C3_SCL_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPI2C3_SCL_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPI2C3_SCL_SELECT_INPUT) Load() LPI2C3_SCL_SELECT_INPUT {
	return LPI2C3_SCL_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPI2C3_SCL_SELECT_INPUT) Store(b LPI2C3_SCL_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPI2C3_SCL_DAISY_(p *Periph) RMLPI2C3_SCL_SELECT_INPUT {
	return RMLPI2C3_SCL_SELECT_INPUT{mmio.UM32{&p.LPI2C3_SCL_SELECT_INPUT.U32, uint32(LPI2C3_SCL_DAISY)}}
}

type LPI2C3_SDA_SELECT_INPUT uint32

type RLPI2C3_SDA_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPI2C3_SDA_SELECT_INPUT) LoadBits(mask LPI2C3_SDA_SELECT_INPUT) LPI2C3_SDA_SELECT_INPUT {
	return LPI2C3_SDA_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPI2C3_SDA_SELECT_INPUT) StoreBits(mask, b LPI2C3_SDA_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPI2C3_SDA_SELECT_INPUT) SetBits(mask LPI2C3_SDA_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPI2C3_SDA_SELECT_INPUT) ClearBits(mask LPI2C3_SDA_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPI2C3_SDA_SELECT_INPUT) Load() LPI2C3_SDA_SELECT_INPUT {
	return LPI2C3_SDA_SELECT_INPUT(r.U32.Load())
}
func (r *RLPI2C3_SDA_SELECT_INPUT) Store(b LPI2C3_SDA_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPI2C3_SDA_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPI2C3_SDA_SELECT_INPUT) Load() LPI2C3_SDA_SELECT_INPUT {
	return LPI2C3_SDA_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPI2C3_SDA_SELECT_INPUT) Store(b LPI2C3_SDA_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPI2C3_SDA_DAISY_(p *Periph) RMLPI2C3_SDA_SELECT_INPUT {
	return RMLPI2C3_SDA_SELECT_INPUT{mmio.UM32{&p.LPI2C3_SDA_SELECT_INPUT.U32, uint32(LPI2C3_SDA_DAISY)}}
}

type LPI2C4_SCL_SELECT_INPUT uint32

type RLPI2C4_SCL_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPI2C4_SCL_SELECT_INPUT) LoadBits(mask LPI2C4_SCL_SELECT_INPUT) LPI2C4_SCL_SELECT_INPUT {
	return LPI2C4_SCL_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPI2C4_SCL_SELECT_INPUT) StoreBits(mask, b LPI2C4_SCL_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPI2C4_SCL_SELECT_INPUT) SetBits(mask LPI2C4_SCL_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPI2C4_SCL_SELECT_INPUT) ClearBits(mask LPI2C4_SCL_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPI2C4_SCL_SELECT_INPUT) Load() LPI2C4_SCL_SELECT_INPUT {
	return LPI2C4_SCL_SELECT_INPUT(r.U32.Load())
}
func (r *RLPI2C4_SCL_SELECT_INPUT) Store(b LPI2C4_SCL_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPI2C4_SCL_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPI2C4_SCL_SELECT_INPUT) Load() LPI2C4_SCL_SELECT_INPUT {
	return LPI2C4_SCL_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPI2C4_SCL_SELECT_INPUT) Store(b LPI2C4_SCL_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPI2C4_SCL_DAISY_(p *Periph) RMLPI2C4_SCL_SELECT_INPUT {
	return RMLPI2C4_SCL_SELECT_INPUT{mmio.UM32{&p.LPI2C4_SCL_SELECT_INPUT.U32, uint32(LPI2C4_SCL_DAISY)}}
}

type LPI2C4_SDA_SELECT_INPUT uint32

type RLPI2C4_SDA_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPI2C4_SDA_SELECT_INPUT) LoadBits(mask LPI2C4_SDA_SELECT_INPUT) LPI2C4_SDA_SELECT_INPUT {
	return LPI2C4_SDA_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPI2C4_SDA_SELECT_INPUT) StoreBits(mask, b LPI2C4_SDA_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPI2C4_SDA_SELECT_INPUT) SetBits(mask LPI2C4_SDA_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPI2C4_SDA_SELECT_INPUT) ClearBits(mask LPI2C4_SDA_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPI2C4_SDA_SELECT_INPUT) Load() LPI2C4_SDA_SELECT_INPUT {
	return LPI2C4_SDA_SELECT_INPUT(r.U32.Load())
}
func (r *RLPI2C4_SDA_SELECT_INPUT) Store(b LPI2C4_SDA_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPI2C4_SDA_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPI2C4_SDA_SELECT_INPUT) Load() LPI2C4_SDA_SELECT_INPUT {
	return LPI2C4_SDA_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPI2C4_SDA_SELECT_INPUT) Store(b LPI2C4_SDA_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPI2C4_SDA_DAISY_(p *Periph) RMLPI2C4_SDA_SELECT_INPUT {
	return RMLPI2C4_SDA_SELECT_INPUT{mmio.UM32{&p.LPI2C4_SDA_SELECT_INPUT.U32, uint32(LPI2C4_SDA_DAISY)}}
}

type LPSPI1_PCS0_SELECT_INPUT uint32

type RLPSPI1_PCS0_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI1_PCS0_SELECT_INPUT) LoadBits(mask LPSPI1_PCS0_SELECT_INPUT) LPSPI1_PCS0_SELECT_INPUT {
	return LPSPI1_PCS0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI1_PCS0_SELECT_INPUT) StoreBits(mask, b LPSPI1_PCS0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI1_PCS0_SELECT_INPUT) SetBits(mask LPSPI1_PCS0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RLPSPI1_PCS0_SELECT_INPUT) ClearBits(mask LPSPI1_PCS0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI1_PCS0_SELECT_INPUT) Load() LPSPI1_PCS0_SELECT_INPUT {
	return LPSPI1_PCS0_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI1_PCS0_SELECT_INPUT) Store(b LPSPI1_PCS0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI1_PCS0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI1_PCS0_SELECT_INPUT) Load() LPSPI1_PCS0_SELECT_INPUT {
	return LPSPI1_PCS0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI1_PCS0_SELECT_INPUT) Store(b LPSPI1_PCS0_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI1_PCS0_DAISY_(p *Periph) RMLPSPI1_PCS0_SELECT_INPUT {
	return RMLPSPI1_PCS0_SELECT_INPUT{mmio.UM32{&p.LPSPI1_PCS0_SELECT_INPUT.U32, uint32(LPSPI1_PCS0_DAISY)}}
}

type LPSPI1_SCK_SELECT_INPUT uint32

type RLPSPI1_SCK_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI1_SCK_SELECT_INPUT) LoadBits(mask LPSPI1_SCK_SELECT_INPUT) LPSPI1_SCK_SELECT_INPUT {
	return LPSPI1_SCK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI1_SCK_SELECT_INPUT) StoreBits(mask, b LPSPI1_SCK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI1_SCK_SELECT_INPUT) SetBits(mask LPSPI1_SCK_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI1_SCK_SELECT_INPUT) ClearBits(mask LPSPI1_SCK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI1_SCK_SELECT_INPUT) Load() LPSPI1_SCK_SELECT_INPUT {
	return LPSPI1_SCK_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI1_SCK_SELECT_INPUT) Store(b LPSPI1_SCK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI1_SCK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI1_SCK_SELECT_INPUT) Load() LPSPI1_SCK_SELECT_INPUT {
	return LPSPI1_SCK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI1_SCK_SELECT_INPUT) Store(b LPSPI1_SCK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI1_SCK_DAISY_(p *Periph) RMLPSPI1_SCK_SELECT_INPUT {
	return RMLPSPI1_SCK_SELECT_INPUT{mmio.UM32{&p.LPSPI1_SCK_SELECT_INPUT.U32, uint32(LPSPI1_SCK_DAISY)}}
}

type LPSPI1_SDI_SELECT_INPUT uint32

type RLPSPI1_SDI_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI1_SDI_SELECT_INPUT) LoadBits(mask LPSPI1_SDI_SELECT_INPUT) LPSPI1_SDI_SELECT_INPUT {
	return LPSPI1_SDI_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI1_SDI_SELECT_INPUT) StoreBits(mask, b LPSPI1_SDI_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI1_SDI_SELECT_INPUT) SetBits(mask LPSPI1_SDI_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI1_SDI_SELECT_INPUT) ClearBits(mask LPSPI1_SDI_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI1_SDI_SELECT_INPUT) Load() LPSPI1_SDI_SELECT_INPUT {
	return LPSPI1_SDI_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI1_SDI_SELECT_INPUT) Store(b LPSPI1_SDI_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI1_SDI_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI1_SDI_SELECT_INPUT) Load() LPSPI1_SDI_SELECT_INPUT {
	return LPSPI1_SDI_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI1_SDI_SELECT_INPUT) Store(b LPSPI1_SDI_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI1_SDI_DAISY_(p *Periph) RMLPSPI1_SDI_SELECT_INPUT {
	return RMLPSPI1_SDI_SELECT_INPUT{mmio.UM32{&p.LPSPI1_SDI_SELECT_INPUT.U32, uint32(LPSPI1_SDI_DAISY)}}
}

type LPSPI1_SDO_SELECT_INPUT uint32

type RLPSPI1_SDO_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI1_SDO_SELECT_INPUT) LoadBits(mask LPSPI1_SDO_SELECT_INPUT) LPSPI1_SDO_SELECT_INPUT {
	return LPSPI1_SDO_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI1_SDO_SELECT_INPUT) StoreBits(mask, b LPSPI1_SDO_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI1_SDO_SELECT_INPUT) SetBits(mask LPSPI1_SDO_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI1_SDO_SELECT_INPUT) ClearBits(mask LPSPI1_SDO_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI1_SDO_SELECT_INPUT) Load() LPSPI1_SDO_SELECT_INPUT {
	return LPSPI1_SDO_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI1_SDO_SELECT_INPUT) Store(b LPSPI1_SDO_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI1_SDO_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI1_SDO_SELECT_INPUT) Load() LPSPI1_SDO_SELECT_INPUT {
	return LPSPI1_SDO_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI1_SDO_SELECT_INPUT) Store(b LPSPI1_SDO_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI1_SDO_DAISY_(p *Periph) RMLPSPI1_SDO_SELECT_INPUT {
	return RMLPSPI1_SDO_SELECT_INPUT{mmio.UM32{&p.LPSPI1_SDO_SELECT_INPUT.U32, uint32(LPSPI1_SDO_DAISY)}}
}

type LPSPI2_PCS0_SELECT_INPUT uint32

type RLPSPI2_PCS0_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI2_PCS0_SELECT_INPUT) LoadBits(mask LPSPI2_PCS0_SELECT_INPUT) LPSPI2_PCS0_SELECT_INPUT {
	return LPSPI2_PCS0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI2_PCS0_SELECT_INPUT) StoreBits(mask, b LPSPI2_PCS0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI2_PCS0_SELECT_INPUT) SetBits(mask LPSPI2_PCS0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RLPSPI2_PCS0_SELECT_INPUT) ClearBits(mask LPSPI2_PCS0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI2_PCS0_SELECT_INPUT) Load() LPSPI2_PCS0_SELECT_INPUT {
	return LPSPI2_PCS0_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI2_PCS0_SELECT_INPUT) Store(b LPSPI2_PCS0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI2_PCS0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI2_PCS0_SELECT_INPUT) Load() LPSPI2_PCS0_SELECT_INPUT {
	return LPSPI2_PCS0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI2_PCS0_SELECT_INPUT) Store(b LPSPI2_PCS0_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI2_PCS0_DAISY_(p *Periph) RMLPSPI2_PCS0_SELECT_INPUT {
	return RMLPSPI2_PCS0_SELECT_INPUT{mmio.UM32{&p.LPSPI2_PCS0_SELECT_INPUT.U32, uint32(LPSPI2_PCS0_DAISY)}}
}

type LPSPI2_SCK_SELECT_INPUT uint32

type RLPSPI2_SCK_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI2_SCK_SELECT_INPUT) LoadBits(mask LPSPI2_SCK_SELECT_INPUT) LPSPI2_SCK_SELECT_INPUT {
	return LPSPI2_SCK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI2_SCK_SELECT_INPUT) StoreBits(mask, b LPSPI2_SCK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI2_SCK_SELECT_INPUT) SetBits(mask LPSPI2_SCK_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI2_SCK_SELECT_INPUT) ClearBits(mask LPSPI2_SCK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI2_SCK_SELECT_INPUT) Load() LPSPI2_SCK_SELECT_INPUT {
	return LPSPI2_SCK_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI2_SCK_SELECT_INPUT) Store(b LPSPI2_SCK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI2_SCK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI2_SCK_SELECT_INPUT) Load() LPSPI2_SCK_SELECT_INPUT {
	return LPSPI2_SCK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI2_SCK_SELECT_INPUT) Store(b LPSPI2_SCK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI2_SCK_DAISY_(p *Periph) RMLPSPI2_SCK_SELECT_INPUT {
	return RMLPSPI2_SCK_SELECT_INPUT{mmio.UM32{&p.LPSPI2_SCK_SELECT_INPUT.U32, uint32(LPSPI2_SCK_DAISY)}}
}

type LPSPI2_SDI_SELECT_INPUT uint32

type RLPSPI2_SDI_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI2_SDI_SELECT_INPUT) LoadBits(mask LPSPI2_SDI_SELECT_INPUT) LPSPI2_SDI_SELECT_INPUT {
	return LPSPI2_SDI_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI2_SDI_SELECT_INPUT) StoreBits(mask, b LPSPI2_SDI_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI2_SDI_SELECT_INPUT) SetBits(mask LPSPI2_SDI_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI2_SDI_SELECT_INPUT) ClearBits(mask LPSPI2_SDI_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI2_SDI_SELECT_INPUT) Load() LPSPI2_SDI_SELECT_INPUT {
	return LPSPI2_SDI_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI2_SDI_SELECT_INPUT) Store(b LPSPI2_SDI_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI2_SDI_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI2_SDI_SELECT_INPUT) Load() LPSPI2_SDI_SELECT_INPUT {
	return LPSPI2_SDI_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI2_SDI_SELECT_INPUT) Store(b LPSPI2_SDI_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI2_SDI_DAISY_(p *Periph) RMLPSPI2_SDI_SELECT_INPUT {
	return RMLPSPI2_SDI_SELECT_INPUT{mmio.UM32{&p.LPSPI2_SDI_SELECT_INPUT.U32, uint32(LPSPI2_SDI_DAISY)}}
}

type LPSPI2_SDO_SELECT_INPUT uint32

type RLPSPI2_SDO_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI2_SDO_SELECT_INPUT) LoadBits(mask LPSPI2_SDO_SELECT_INPUT) LPSPI2_SDO_SELECT_INPUT {
	return LPSPI2_SDO_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI2_SDO_SELECT_INPUT) StoreBits(mask, b LPSPI2_SDO_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI2_SDO_SELECT_INPUT) SetBits(mask LPSPI2_SDO_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI2_SDO_SELECT_INPUT) ClearBits(mask LPSPI2_SDO_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI2_SDO_SELECT_INPUT) Load() LPSPI2_SDO_SELECT_INPUT {
	return LPSPI2_SDO_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI2_SDO_SELECT_INPUT) Store(b LPSPI2_SDO_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI2_SDO_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI2_SDO_SELECT_INPUT) Load() LPSPI2_SDO_SELECT_INPUT {
	return LPSPI2_SDO_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI2_SDO_SELECT_INPUT) Store(b LPSPI2_SDO_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI2_SDO_DAISY_(p *Periph) RMLPSPI2_SDO_SELECT_INPUT {
	return RMLPSPI2_SDO_SELECT_INPUT{mmio.UM32{&p.LPSPI2_SDO_SELECT_INPUT.U32, uint32(LPSPI2_SDO_DAISY)}}
}

type LPSPI3_PCS0_SELECT_INPUT uint32

type RLPSPI3_PCS0_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI3_PCS0_SELECT_INPUT) LoadBits(mask LPSPI3_PCS0_SELECT_INPUT) LPSPI3_PCS0_SELECT_INPUT {
	return LPSPI3_PCS0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI3_PCS0_SELECT_INPUT) StoreBits(mask, b LPSPI3_PCS0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI3_PCS0_SELECT_INPUT) SetBits(mask LPSPI3_PCS0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RLPSPI3_PCS0_SELECT_INPUT) ClearBits(mask LPSPI3_PCS0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI3_PCS0_SELECT_INPUT) Load() LPSPI3_PCS0_SELECT_INPUT {
	return LPSPI3_PCS0_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI3_PCS0_SELECT_INPUT) Store(b LPSPI3_PCS0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI3_PCS0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI3_PCS0_SELECT_INPUT) Load() LPSPI3_PCS0_SELECT_INPUT {
	return LPSPI3_PCS0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI3_PCS0_SELECT_INPUT) Store(b LPSPI3_PCS0_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI3_PCS0_DAISY_(p *Periph) RMLPSPI3_PCS0_SELECT_INPUT {
	return RMLPSPI3_PCS0_SELECT_INPUT{mmio.UM32{&p.LPSPI3_PCS0_SELECT_INPUT.U32, uint32(LPSPI3_PCS0_DAISY)}}
}

type LPSPI3_SCK_SELECT_INPUT uint32

type RLPSPI3_SCK_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI3_SCK_SELECT_INPUT) LoadBits(mask LPSPI3_SCK_SELECT_INPUT) LPSPI3_SCK_SELECT_INPUT {
	return LPSPI3_SCK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI3_SCK_SELECT_INPUT) StoreBits(mask, b LPSPI3_SCK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI3_SCK_SELECT_INPUT) SetBits(mask LPSPI3_SCK_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI3_SCK_SELECT_INPUT) ClearBits(mask LPSPI3_SCK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI3_SCK_SELECT_INPUT) Load() LPSPI3_SCK_SELECT_INPUT {
	return LPSPI3_SCK_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI3_SCK_SELECT_INPUT) Store(b LPSPI3_SCK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI3_SCK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI3_SCK_SELECT_INPUT) Load() LPSPI3_SCK_SELECT_INPUT {
	return LPSPI3_SCK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI3_SCK_SELECT_INPUT) Store(b LPSPI3_SCK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI3_SCK_DAISY_(p *Periph) RMLPSPI3_SCK_SELECT_INPUT {
	return RMLPSPI3_SCK_SELECT_INPUT{mmio.UM32{&p.LPSPI3_SCK_SELECT_INPUT.U32, uint32(LPSPI3_SCK_DAISY)}}
}

type LPSPI3_SDI_SELECT_INPUT uint32

type RLPSPI3_SDI_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI3_SDI_SELECT_INPUT) LoadBits(mask LPSPI3_SDI_SELECT_INPUT) LPSPI3_SDI_SELECT_INPUT {
	return LPSPI3_SDI_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI3_SDI_SELECT_INPUT) StoreBits(mask, b LPSPI3_SDI_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI3_SDI_SELECT_INPUT) SetBits(mask LPSPI3_SDI_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI3_SDI_SELECT_INPUT) ClearBits(mask LPSPI3_SDI_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI3_SDI_SELECT_INPUT) Load() LPSPI3_SDI_SELECT_INPUT {
	return LPSPI3_SDI_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI3_SDI_SELECT_INPUT) Store(b LPSPI3_SDI_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI3_SDI_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI3_SDI_SELECT_INPUT) Load() LPSPI3_SDI_SELECT_INPUT {
	return LPSPI3_SDI_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI3_SDI_SELECT_INPUT) Store(b LPSPI3_SDI_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI3_SDI_DAISY_(p *Periph) RMLPSPI3_SDI_SELECT_INPUT {
	return RMLPSPI3_SDI_SELECT_INPUT{mmio.UM32{&p.LPSPI3_SDI_SELECT_INPUT.U32, uint32(LPSPI3_SDI_DAISY)}}
}

type LPSPI3_SDO_SELECT_INPUT uint32

type RLPSPI3_SDO_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI3_SDO_SELECT_INPUT) LoadBits(mask LPSPI3_SDO_SELECT_INPUT) LPSPI3_SDO_SELECT_INPUT {
	return LPSPI3_SDO_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI3_SDO_SELECT_INPUT) StoreBits(mask, b LPSPI3_SDO_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI3_SDO_SELECT_INPUT) SetBits(mask LPSPI3_SDO_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI3_SDO_SELECT_INPUT) ClearBits(mask LPSPI3_SDO_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI3_SDO_SELECT_INPUT) Load() LPSPI3_SDO_SELECT_INPUT {
	return LPSPI3_SDO_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI3_SDO_SELECT_INPUT) Store(b LPSPI3_SDO_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI3_SDO_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI3_SDO_SELECT_INPUT) Load() LPSPI3_SDO_SELECT_INPUT {
	return LPSPI3_SDO_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI3_SDO_SELECT_INPUT) Store(b LPSPI3_SDO_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI3_SDO_DAISY_(p *Periph) RMLPSPI3_SDO_SELECT_INPUT {
	return RMLPSPI3_SDO_SELECT_INPUT{mmio.UM32{&p.LPSPI3_SDO_SELECT_INPUT.U32, uint32(LPSPI3_SDO_DAISY)}}
}

type LPSPI4_PCS0_SELECT_INPUT uint32

type RLPSPI4_PCS0_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI4_PCS0_SELECT_INPUT) LoadBits(mask LPSPI4_PCS0_SELECT_INPUT) LPSPI4_PCS0_SELECT_INPUT {
	return LPSPI4_PCS0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI4_PCS0_SELECT_INPUT) StoreBits(mask, b LPSPI4_PCS0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI4_PCS0_SELECT_INPUT) SetBits(mask LPSPI4_PCS0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RLPSPI4_PCS0_SELECT_INPUT) ClearBits(mask LPSPI4_PCS0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI4_PCS0_SELECT_INPUT) Load() LPSPI4_PCS0_SELECT_INPUT {
	return LPSPI4_PCS0_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI4_PCS0_SELECT_INPUT) Store(b LPSPI4_PCS0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI4_PCS0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI4_PCS0_SELECT_INPUT) Load() LPSPI4_PCS0_SELECT_INPUT {
	return LPSPI4_PCS0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI4_PCS0_SELECT_INPUT) Store(b LPSPI4_PCS0_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI4_PCS0_DAISY_(p *Periph) RMLPSPI4_PCS0_SELECT_INPUT {
	return RMLPSPI4_PCS0_SELECT_INPUT{mmio.UM32{&p.LPSPI4_PCS0_SELECT_INPUT.U32, uint32(LPSPI4_PCS0_DAISY)}}
}

type LPSPI4_SCK_SELECT_INPUT uint32

type RLPSPI4_SCK_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI4_SCK_SELECT_INPUT) LoadBits(mask LPSPI4_SCK_SELECT_INPUT) LPSPI4_SCK_SELECT_INPUT {
	return LPSPI4_SCK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI4_SCK_SELECT_INPUT) StoreBits(mask, b LPSPI4_SCK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI4_SCK_SELECT_INPUT) SetBits(mask LPSPI4_SCK_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI4_SCK_SELECT_INPUT) ClearBits(mask LPSPI4_SCK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI4_SCK_SELECT_INPUT) Load() LPSPI4_SCK_SELECT_INPUT {
	return LPSPI4_SCK_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI4_SCK_SELECT_INPUT) Store(b LPSPI4_SCK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI4_SCK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI4_SCK_SELECT_INPUT) Load() LPSPI4_SCK_SELECT_INPUT {
	return LPSPI4_SCK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI4_SCK_SELECT_INPUT) Store(b LPSPI4_SCK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI4_SCK_DAISY_(p *Periph) RMLPSPI4_SCK_SELECT_INPUT {
	return RMLPSPI4_SCK_SELECT_INPUT{mmio.UM32{&p.LPSPI4_SCK_SELECT_INPUT.U32, uint32(LPSPI4_SCK_DAISY)}}
}

type LPSPI4_SDI_SELECT_INPUT uint32

type RLPSPI4_SDI_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI4_SDI_SELECT_INPUT) LoadBits(mask LPSPI4_SDI_SELECT_INPUT) LPSPI4_SDI_SELECT_INPUT {
	return LPSPI4_SDI_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI4_SDI_SELECT_INPUT) StoreBits(mask, b LPSPI4_SDI_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI4_SDI_SELECT_INPUT) SetBits(mask LPSPI4_SDI_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI4_SDI_SELECT_INPUT) ClearBits(mask LPSPI4_SDI_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI4_SDI_SELECT_INPUT) Load() LPSPI4_SDI_SELECT_INPUT {
	return LPSPI4_SDI_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI4_SDI_SELECT_INPUT) Store(b LPSPI4_SDI_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI4_SDI_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI4_SDI_SELECT_INPUT) Load() LPSPI4_SDI_SELECT_INPUT {
	return LPSPI4_SDI_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI4_SDI_SELECT_INPUT) Store(b LPSPI4_SDI_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI4_SDI_DAISY_(p *Periph) RMLPSPI4_SDI_SELECT_INPUT {
	return RMLPSPI4_SDI_SELECT_INPUT{mmio.UM32{&p.LPSPI4_SDI_SELECT_INPUT.U32, uint32(LPSPI4_SDI_DAISY)}}
}

type LPSPI4_SDO_SELECT_INPUT uint32

type RLPSPI4_SDO_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPSPI4_SDO_SELECT_INPUT) LoadBits(mask LPSPI4_SDO_SELECT_INPUT) LPSPI4_SDO_SELECT_INPUT {
	return LPSPI4_SDO_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPSPI4_SDO_SELECT_INPUT) StoreBits(mask, b LPSPI4_SDO_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPSPI4_SDO_SELECT_INPUT) SetBits(mask LPSPI4_SDO_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPSPI4_SDO_SELECT_INPUT) ClearBits(mask LPSPI4_SDO_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPSPI4_SDO_SELECT_INPUT) Load() LPSPI4_SDO_SELECT_INPUT {
	return LPSPI4_SDO_SELECT_INPUT(r.U32.Load())
}
func (r *RLPSPI4_SDO_SELECT_INPUT) Store(b LPSPI4_SDO_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPSPI4_SDO_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPSPI4_SDO_SELECT_INPUT) Load() LPSPI4_SDO_SELECT_INPUT {
	return LPSPI4_SDO_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPSPI4_SDO_SELECT_INPUT) Store(b LPSPI4_SDO_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPSPI4_SDO_DAISY_(p *Periph) RMLPSPI4_SDO_SELECT_INPUT {
	return RMLPSPI4_SDO_SELECT_INPUT{mmio.UM32{&p.LPSPI4_SDO_SELECT_INPUT.U32, uint32(LPSPI4_SDO_DAISY)}}
}

type LPUART2_RX_SELECT_INPUT uint32

type RLPUART2_RX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART2_RX_SELECT_INPUT) LoadBits(mask LPUART2_RX_SELECT_INPUT) LPUART2_RX_SELECT_INPUT {
	return LPUART2_RX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART2_RX_SELECT_INPUT) StoreBits(mask, b LPUART2_RX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART2_RX_SELECT_INPUT) SetBits(mask LPUART2_RX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART2_RX_SELECT_INPUT) ClearBits(mask LPUART2_RX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART2_RX_SELECT_INPUT) Load() LPUART2_RX_SELECT_INPUT {
	return LPUART2_RX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART2_RX_SELECT_INPUT) Store(b LPUART2_RX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART2_RX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART2_RX_SELECT_INPUT) Load() LPUART2_RX_SELECT_INPUT {
	return LPUART2_RX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART2_RX_SELECT_INPUT) Store(b LPUART2_RX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART2_RX_DAISY_(p *Periph) RMLPUART2_RX_SELECT_INPUT {
	return RMLPUART2_RX_SELECT_INPUT{mmio.UM32{&p.LPUART2_RX_SELECT_INPUT.U32, uint32(LPUART2_RX_DAISY)}}
}

type LPUART2_TX_SELECT_INPUT uint32

type RLPUART2_TX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART2_TX_SELECT_INPUT) LoadBits(mask LPUART2_TX_SELECT_INPUT) LPUART2_TX_SELECT_INPUT {
	return LPUART2_TX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART2_TX_SELECT_INPUT) StoreBits(mask, b LPUART2_TX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART2_TX_SELECT_INPUT) SetBits(mask LPUART2_TX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART2_TX_SELECT_INPUT) ClearBits(mask LPUART2_TX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART2_TX_SELECT_INPUT) Load() LPUART2_TX_SELECT_INPUT {
	return LPUART2_TX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART2_TX_SELECT_INPUT) Store(b LPUART2_TX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART2_TX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART2_TX_SELECT_INPUT) Load() LPUART2_TX_SELECT_INPUT {
	return LPUART2_TX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART2_TX_SELECT_INPUT) Store(b LPUART2_TX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART2_TX_DAISY_(p *Periph) RMLPUART2_TX_SELECT_INPUT {
	return RMLPUART2_TX_SELECT_INPUT{mmio.UM32{&p.LPUART2_TX_SELECT_INPUT.U32, uint32(LPUART2_TX_DAISY)}}
}

type LPUART3_CTS_B_SELECT_INPUT uint32

type RLPUART3_CTS_B_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART3_CTS_B_SELECT_INPUT) LoadBits(mask LPUART3_CTS_B_SELECT_INPUT) LPUART3_CTS_B_SELECT_INPUT {
	return LPUART3_CTS_B_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART3_CTS_B_SELECT_INPUT) StoreBits(mask, b LPUART3_CTS_B_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART3_CTS_B_SELECT_INPUT) SetBits(mask LPUART3_CTS_B_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RLPUART3_CTS_B_SELECT_INPUT) ClearBits(mask LPUART3_CTS_B_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART3_CTS_B_SELECT_INPUT) Load() LPUART3_CTS_B_SELECT_INPUT {
	return LPUART3_CTS_B_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART3_CTS_B_SELECT_INPUT) Store(b LPUART3_CTS_B_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART3_CTS_B_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART3_CTS_B_SELECT_INPUT) Load() LPUART3_CTS_B_SELECT_INPUT {
	return LPUART3_CTS_B_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART3_CTS_B_SELECT_INPUT) Store(b LPUART3_CTS_B_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART3_CTS_B_DAISY_(p *Periph) RMLPUART3_CTS_B_SELECT_INPUT {
	return RMLPUART3_CTS_B_SELECT_INPUT{mmio.UM32{&p.LPUART3_CTS_B_SELECT_INPUT.U32, uint32(LPUART3_CTS_B_DAISY)}}
}

type LPUART3_RX_SELECT_INPUT uint32

type RLPUART3_RX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART3_RX_SELECT_INPUT) LoadBits(mask LPUART3_RX_SELECT_INPUT) LPUART3_RX_SELECT_INPUT {
	return LPUART3_RX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART3_RX_SELECT_INPUT) StoreBits(mask, b LPUART3_RX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART3_RX_SELECT_INPUT) SetBits(mask LPUART3_RX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART3_RX_SELECT_INPUT) ClearBits(mask LPUART3_RX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART3_RX_SELECT_INPUT) Load() LPUART3_RX_SELECT_INPUT {
	return LPUART3_RX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART3_RX_SELECT_INPUT) Store(b LPUART3_RX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART3_RX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART3_RX_SELECT_INPUT) Load() LPUART3_RX_SELECT_INPUT {
	return LPUART3_RX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART3_RX_SELECT_INPUT) Store(b LPUART3_RX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART3_RX_DAISY_(p *Periph) RMLPUART3_RX_SELECT_INPUT {
	return RMLPUART3_RX_SELECT_INPUT{mmio.UM32{&p.LPUART3_RX_SELECT_INPUT.U32, uint32(LPUART3_RX_DAISY)}}
}

type LPUART3_TX_SELECT_INPUT uint32

type RLPUART3_TX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART3_TX_SELECT_INPUT) LoadBits(mask LPUART3_TX_SELECT_INPUT) LPUART3_TX_SELECT_INPUT {
	return LPUART3_TX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART3_TX_SELECT_INPUT) StoreBits(mask, b LPUART3_TX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART3_TX_SELECT_INPUT) SetBits(mask LPUART3_TX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART3_TX_SELECT_INPUT) ClearBits(mask LPUART3_TX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART3_TX_SELECT_INPUT) Load() LPUART3_TX_SELECT_INPUT {
	return LPUART3_TX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART3_TX_SELECT_INPUT) Store(b LPUART3_TX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART3_TX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART3_TX_SELECT_INPUT) Load() LPUART3_TX_SELECT_INPUT {
	return LPUART3_TX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART3_TX_SELECT_INPUT) Store(b LPUART3_TX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART3_TX_DAISY_(p *Periph) RMLPUART3_TX_SELECT_INPUT {
	return RMLPUART3_TX_SELECT_INPUT{mmio.UM32{&p.LPUART3_TX_SELECT_INPUT.U32, uint32(LPUART3_TX_DAISY)}}
}

type LPUART4_RX_SELECT_INPUT uint32

type RLPUART4_RX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART4_RX_SELECT_INPUT) LoadBits(mask LPUART4_RX_SELECT_INPUT) LPUART4_RX_SELECT_INPUT {
	return LPUART4_RX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART4_RX_SELECT_INPUT) StoreBits(mask, b LPUART4_RX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART4_RX_SELECT_INPUT) SetBits(mask LPUART4_RX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART4_RX_SELECT_INPUT) ClearBits(mask LPUART4_RX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART4_RX_SELECT_INPUT) Load() LPUART4_RX_SELECT_INPUT {
	return LPUART4_RX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART4_RX_SELECT_INPUT) Store(b LPUART4_RX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART4_RX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART4_RX_SELECT_INPUT) Load() LPUART4_RX_SELECT_INPUT {
	return LPUART4_RX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART4_RX_SELECT_INPUT) Store(b LPUART4_RX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART4_RX_DAISY_(p *Periph) RMLPUART4_RX_SELECT_INPUT {
	return RMLPUART4_RX_SELECT_INPUT{mmio.UM32{&p.LPUART4_RX_SELECT_INPUT.U32, uint32(LPUART4_RX_DAISY)}}
}

type LPUART4_TX_SELECT_INPUT uint32

type RLPUART4_TX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART4_TX_SELECT_INPUT) LoadBits(mask LPUART4_TX_SELECT_INPUT) LPUART4_TX_SELECT_INPUT {
	return LPUART4_TX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART4_TX_SELECT_INPUT) StoreBits(mask, b LPUART4_TX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART4_TX_SELECT_INPUT) SetBits(mask LPUART4_TX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART4_TX_SELECT_INPUT) ClearBits(mask LPUART4_TX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART4_TX_SELECT_INPUT) Load() LPUART4_TX_SELECT_INPUT {
	return LPUART4_TX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART4_TX_SELECT_INPUT) Store(b LPUART4_TX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART4_TX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART4_TX_SELECT_INPUT) Load() LPUART4_TX_SELECT_INPUT {
	return LPUART4_TX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART4_TX_SELECT_INPUT) Store(b LPUART4_TX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART4_TX_DAISY_(p *Periph) RMLPUART4_TX_SELECT_INPUT {
	return RMLPUART4_TX_SELECT_INPUT{mmio.UM32{&p.LPUART4_TX_SELECT_INPUT.U32, uint32(LPUART4_TX_DAISY)}}
}

type LPUART5_RX_SELECT_INPUT uint32

type RLPUART5_RX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART5_RX_SELECT_INPUT) LoadBits(mask LPUART5_RX_SELECT_INPUT) LPUART5_RX_SELECT_INPUT {
	return LPUART5_RX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART5_RX_SELECT_INPUT) StoreBits(mask, b LPUART5_RX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART5_RX_SELECT_INPUT) SetBits(mask LPUART5_RX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART5_RX_SELECT_INPUT) ClearBits(mask LPUART5_RX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART5_RX_SELECT_INPUT) Load() LPUART5_RX_SELECT_INPUT {
	return LPUART5_RX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART5_RX_SELECT_INPUT) Store(b LPUART5_RX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART5_RX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART5_RX_SELECT_INPUT) Load() LPUART5_RX_SELECT_INPUT {
	return LPUART5_RX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART5_RX_SELECT_INPUT) Store(b LPUART5_RX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART5_RX_DAISY_(p *Periph) RMLPUART5_RX_SELECT_INPUT {
	return RMLPUART5_RX_SELECT_INPUT{mmio.UM32{&p.LPUART5_RX_SELECT_INPUT.U32, uint32(LPUART5_RX_DAISY)}}
}

type LPUART5_TX_SELECT_INPUT uint32

type RLPUART5_TX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART5_TX_SELECT_INPUT) LoadBits(mask LPUART5_TX_SELECT_INPUT) LPUART5_TX_SELECT_INPUT {
	return LPUART5_TX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART5_TX_SELECT_INPUT) StoreBits(mask, b LPUART5_TX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART5_TX_SELECT_INPUT) SetBits(mask LPUART5_TX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART5_TX_SELECT_INPUT) ClearBits(mask LPUART5_TX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART5_TX_SELECT_INPUT) Load() LPUART5_TX_SELECT_INPUT {
	return LPUART5_TX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART5_TX_SELECT_INPUT) Store(b LPUART5_TX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART5_TX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART5_TX_SELECT_INPUT) Load() LPUART5_TX_SELECT_INPUT {
	return LPUART5_TX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART5_TX_SELECT_INPUT) Store(b LPUART5_TX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART5_TX_DAISY_(p *Periph) RMLPUART5_TX_SELECT_INPUT {
	return RMLPUART5_TX_SELECT_INPUT{mmio.UM32{&p.LPUART5_TX_SELECT_INPUT.U32, uint32(LPUART5_TX_DAISY)}}
}

type LPUART6_RX_SELECT_INPUT uint32

type RLPUART6_RX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART6_RX_SELECT_INPUT) LoadBits(mask LPUART6_RX_SELECT_INPUT) LPUART6_RX_SELECT_INPUT {
	return LPUART6_RX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART6_RX_SELECT_INPUT) StoreBits(mask, b LPUART6_RX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART6_RX_SELECT_INPUT) SetBits(mask LPUART6_RX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART6_RX_SELECT_INPUT) ClearBits(mask LPUART6_RX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART6_RX_SELECT_INPUT) Load() LPUART6_RX_SELECT_INPUT {
	return LPUART6_RX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART6_RX_SELECT_INPUT) Store(b LPUART6_RX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART6_RX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART6_RX_SELECT_INPUT) Load() LPUART6_RX_SELECT_INPUT {
	return LPUART6_RX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART6_RX_SELECT_INPUT) Store(b LPUART6_RX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART6_RX_DAISY_(p *Periph) RMLPUART6_RX_SELECT_INPUT {
	return RMLPUART6_RX_SELECT_INPUT{mmio.UM32{&p.LPUART6_RX_SELECT_INPUT.U32, uint32(LPUART6_RX_DAISY)}}
}

type LPUART6_TX_SELECT_INPUT uint32

type RLPUART6_TX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART6_TX_SELECT_INPUT) LoadBits(mask LPUART6_TX_SELECT_INPUT) LPUART6_TX_SELECT_INPUT {
	return LPUART6_TX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART6_TX_SELECT_INPUT) StoreBits(mask, b LPUART6_TX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART6_TX_SELECT_INPUT) SetBits(mask LPUART6_TX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART6_TX_SELECT_INPUT) ClearBits(mask LPUART6_TX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART6_TX_SELECT_INPUT) Load() LPUART6_TX_SELECT_INPUT {
	return LPUART6_TX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART6_TX_SELECT_INPUT) Store(b LPUART6_TX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART6_TX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART6_TX_SELECT_INPUT) Load() LPUART6_TX_SELECT_INPUT {
	return LPUART6_TX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART6_TX_SELECT_INPUT) Store(b LPUART6_TX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART6_TX_DAISY_(p *Periph) RMLPUART6_TX_SELECT_INPUT {
	return RMLPUART6_TX_SELECT_INPUT{mmio.UM32{&p.LPUART6_TX_SELECT_INPUT.U32, uint32(LPUART6_TX_DAISY)}}
}

type LPUART7_RX_SELECT_INPUT uint32

type RLPUART7_RX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART7_RX_SELECT_INPUT) LoadBits(mask LPUART7_RX_SELECT_INPUT) LPUART7_RX_SELECT_INPUT {
	return LPUART7_RX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART7_RX_SELECT_INPUT) StoreBits(mask, b LPUART7_RX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART7_RX_SELECT_INPUT) SetBits(mask LPUART7_RX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART7_RX_SELECT_INPUT) ClearBits(mask LPUART7_RX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART7_RX_SELECT_INPUT) Load() LPUART7_RX_SELECT_INPUT {
	return LPUART7_RX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART7_RX_SELECT_INPUT) Store(b LPUART7_RX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART7_RX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART7_RX_SELECT_INPUT) Load() LPUART7_RX_SELECT_INPUT {
	return LPUART7_RX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART7_RX_SELECT_INPUT) Store(b LPUART7_RX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART7_RX_DAISY_(p *Periph) RMLPUART7_RX_SELECT_INPUT {
	return RMLPUART7_RX_SELECT_INPUT{mmio.UM32{&p.LPUART7_RX_SELECT_INPUT.U32, uint32(LPUART7_RX_DAISY)}}
}

type LPUART7_TX_SELECT_INPUT uint32

type RLPUART7_TX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART7_TX_SELECT_INPUT) LoadBits(mask LPUART7_TX_SELECT_INPUT) LPUART7_TX_SELECT_INPUT {
	return LPUART7_TX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART7_TX_SELECT_INPUT) StoreBits(mask, b LPUART7_TX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART7_TX_SELECT_INPUT) SetBits(mask LPUART7_TX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART7_TX_SELECT_INPUT) ClearBits(mask LPUART7_TX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART7_TX_SELECT_INPUT) Load() LPUART7_TX_SELECT_INPUT {
	return LPUART7_TX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART7_TX_SELECT_INPUT) Store(b LPUART7_TX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART7_TX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART7_TX_SELECT_INPUT) Load() LPUART7_TX_SELECT_INPUT {
	return LPUART7_TX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART7_TX_SELECT_INPUT) Store(b LPUART7_TX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART7_TX_DAISY_(p *Periph) RMLPUART7_TX_SELECT_INPUT {
	return RMLPUART7_TX_SELECT_INPUT{mmio.UM32{&p.LPUART7_TX_SELECT_INPUT.U32, uint32(LPUART7_TX_DAISY)}}
}

type LPUART8_RX_SELECT_INPUT uint32

type RLPUART8_RX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART8_RX_SELECT_INPUT) LoadBits(mask LPUART8_RX_SELECT_INPUT) LPUART8_RX_SELECT_INPUT {
	return LPUART8_RX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART8_RX_SELECT_INPUT) StoreBits(mask, b LPUART8_RX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART8_RX_SELECT_INPUT) SetBits(mask LPUART8_RX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART8_RX_SELECT_INPUT) ClearBits(mask LPUART8_RX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART8_RX_SELECT_INPUT) Load() LPUART8_RX_SELECT_INPUT {
	return LPUART8_RX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART8_RX_SELECT_INPUT) Store(b LPUART8_RX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART8_RX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART8_RX_SELECT_INPUT) Load() LPUART8_RX_SELECT_INPUT {
	return LPUART8_RX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART8_RX_SELECT_INPUT) Store(b LPUART8_RX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART8_RX_DAISY_(p *Periph) RMLPUART8_RX_SELECT_INPUT {
	return RMLPUART8_RX_SELECT_INPUT{mmio.UM32{&p.LPUART8_RX_SELECT_INPUT.U32, uint32(LPUART8_RX_DAISY)}}
}

type LPUART8_TX_SELECT_INPUT uint32

type RLPUART8_TX_SELECT_INPUT struct{ mmio.U32 }

func (r *RLPUART8_TX_SELECT_INPUT) LoadBits(mask LPUART8_TX_SELECT_INPUT) LPUART8_TX_SELECT_INPUT {
	return LPUART8_TX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RLPUART8_TX_SELECT_INPUT) StoreBits(mask, b LPUART8_TX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RLPUART8_TX_SELECT_INPUT) SetBits(mask LPUART8_TX_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RLPUART8_TX_SELECT_INPUT) ClearBits(mask LPUART8_TX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RLPUART8_TX_SELECT_INPUT) Load() LPUART8_TX_SELECT_INPUT {
	return LPUART8_TX_SELECT_INPUT(r.U32.Load())
}
func (r *RLPUART8_TX_SELECT_INPUT) Store(b LPUART8_TX_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMLPUART8_TX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMLPUART8_TX_SELECT_INPUT) Load() LPUART8_TX_SELECT_INPUT {
	return LPUART8_TX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMLPUART8_TX_SELECT_INPUT) Store(b LPUART8_TX_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func LPUART8_TX_DAISY_(p *Periph) RMLPUART8_TX_SELECT_INPUT {
	return RMLPUART8_TX_SELECT_INPUT{mmio.UM32{&p.LPUART8_TX_SELECT_INPUT.U32, uint32(LPUART8_TX_DAISY)}}
}

type NMI_SELECT_INPUT uint32

type RNMI_SELECT_INPUT struct{ mmio.U32 }

func (r *RNMI_SELECT_INPUT) LoadBits(mask NMI_SELECT_INPUT) NMI_SELECT_INPUT {
	return NMI_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RNMI_SELECT_INPUT) StoreBits(mask, b NMI_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RNMI_SELECT_INPUT) SetBits(mask NMI_SELECT_INPUT)   { r.U32.SetBits(uint32(mask)) }
func (r *RNMI_SELECT_INPUT) ClearBits(mask NMI_SELECT_INPUT) { r.U32.ClearBits(uint32(mask)) }
func (r *RNMI_SELECT_INPUT) Load() NMI_SELECT_INPUT          { return NMI_SELECT_INPUT(r.U32.Load()) }
func (r *RNMI_SELECT_INPUT) Store(b NMI_SELECT_INPUT)        { r.U32.Store(uint32(b)) }

type RMNMI_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMNMI_SELECT_INPUT) Load() NMI_SELECT_INPUT   { return NMI_SELECT_INPUT(rm.UM32.Load()) }
func (rm RMNMI_SELECT_INPUT) Store(b NMI_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func NMI_DAISY_(p *Periph) RMNMI_SELECT_INPUT {
	return RMNMI_SELECT_INPUT{mmio.UM32{&p.NMI_SELECT_INPUT.U32, uint32(NMI_DAISY)}}
}

type QTIMER2_TIMER0_SELECT_INPUT uint32

type RQTIMER2_TIMER0_SELECT_INPUT struct{ mmio.U32 }

func (r *RQTIMER2_TIMER0_SELECT_INPUT) LoadBits(mask QTIMER2_TIMER0_SELECT_INPUT) QTIMER2_TIMER0_SELECT_INPUT {
	return QTIMER2_TIMER0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RQTIMER2_TIMER0_SELECT_INPUT) StoreBits(mask, b QTIMER2_TIMER0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RQTIMER2_TIMER0_SELECT_INPUT) SetBits(mask QTIMER2_TIMER0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RQTIMER2_TIMER0_SELECT_INPUT) ClearBits(mask QTIMER2_TIMER0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RQTIMER2_TIMER0_SELECT_INPUT) Load() QTIMER2_TIMER0_SELECT_INPUT {
	return QTIMER2_TIMER0_SELECT_INPUT(r.U32.Load())
}
func (r *RQTIMER2_TIMER0_SELECT_INPUT) Store(b QTIMER2_TIMER0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMQTIMER2_TIMER0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMQTIMER2_TIMER0_SELECT_INPUT) Load() QTIMER2_TIMER0_SELECT_INPUT {
	return QTIMER2_TIMER0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMQTIMER2_TIMER0_SELECT_INPUT) Store(b QTIMER2_TIMER0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func QTIMER2_TIMER0_DAISY_(p *Periph) RMQTIMER2_TIMER0_SELECT_INPUT {
	return RMQTIMER2_TIMER0_SELECT_INPUT{mmio.UM32{&p.QTIMER2_TIMER0_SELECT_INPUT.U32, uint32(QTIMER2_TIMER0_DAISY)}}
}

type QTIMER2_TIMER1_SELECT_INPUT uint32

type RQTIMER2_TIMER1_SELECT_INPUT struct{ mmio.U32 }

func (r *RQTIMER2_TIMER1_SELECT_INPUT) LoadBits(mask QTIMER2_TIMER1_SELECT_INPUT) QTIMER2_TIMER1_SELECT_INPUT {
	return QTIMER2_TIMER1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RQTIMER2_TIMER1_SELECT_INPUT) StoreBits(mask, b QTIMER2_TIMER1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RQTIMER2_TIMER1_SELECT_INPUT) SetBits(mask QTIMER2_TIMER1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RQTIMER2_TIMER1_SELECT_INPUT) ClearBits(mask QTIMER2_TIMER1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RQTIMER2_TIMER1_SELECT_INPUT) Load() QTIMER2_TIMER1_SELECT_INPUT {
	return QTIMER2_TIMER1_SELECT_INPUT(r.U32.Load())
}
func (r *RQTIMER2_TIMER1_SELECT_INPUT) Store(b QTIMER2_TIMER1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMQTIMER2_TIMER1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMQTIMER2_TIMER1_SELECT_INPUT) Load() QTIMER2_TIMER1_SELECT_INPUT {
	return QTIMER2_TIMER1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMQTIMER2_TIMER1_SELECT_INPUT) Store(b QTIMER2_TIMER1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func QTIMER2_TIMER1_DAISY_(p *Periph) RMQTIMER2_TIMER1_SELECT_INPUT {
	return RMQTIMER2_TIMER1_SELECT_INPUT{mmio.UM32{&p.QTIMER2_TIMER1_SELECT_INPUT.U32, uint32(QTIMER2_TIMER1_DAISY)}}
}

type QTIMER2_TIMER2_SELECT_INPUT uint32

type RQTIMER2_TIMER2_SELECT_INPUT struct{ mmio.U32 }

func (r *RQTIMER2_TIMER2_SELECT_INPUT) LoadBits(mask QTIMER2_TIMER2_SELECT_INPUT) QTIMER2_TIMER2_SELECT_INPUT {
	return QTIMER2_TIMER2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RQTIMER2_TIMER2_SELECT_INPUT) StoreBits(mask, b QTIMER2_TIMER2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RQTIMER2_TIMER2_SELECT_INPUT) SetBits(mask QTIMER2_TIMER2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RQTIMER2_TIMER2_SELECT_INPUT) ClearBits(mask QTIMER2_TIMER2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RQTIMER2_TIMER2_SELECT_INPUT) Load() QTIMER2_TIMER2_SELECT_INPUT {
	return QTIMER2_TIMER2_SELECT_INPUT(r.U32.Load())
}
func (r *RQTIMER2_TIMER2_SELECT_INPUT) Store(b QTIMER2_TIMER2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMQTIMER2_TIMER2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMQTIMER2_TIMER2_SELECT_INPUT) Load() QTIMER2_TIMER2_SELECT_INPUT {
	return QTIMER2_TIMER2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMQTIMER2_TIMER2_SELECT_INPUT) Store(b QTIMER2_TIMER2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func QTIMER2_TIMER2_DAISY_(p *Periph) RMQTIMER2_TIMER2_SELECT_INPUT {
	return RMQTIMER2_TIMER2_SELECT_INPUT{mmio.UM32{&p.QTIMER2_TIMER2_SELECT_INPUT.U32, uint32(QTIMER2_TIMER2_DAISY)}}
}

type QTIMER2_TIMER3_SELECT_INPUT uint32

type RQTIMER2_TIMER3_SELECT_INPUT struct{ mmio.U32 }

func (r *RQTIMER2_TIMER3_SELECT_INPUT) LoadBits(mask QTIMER2_TIMER3_SELECT_INPUT) QTIMER2_TIMER3_SELECT_INPUT {
	return QTIMER2_TIMER3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RQTIMER2_TIMER3_SELECT_INPUT) StoreBits(mask, b QTIMER2_TIMER3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RQTIMER2_TIMER3_SELECT_INPUT) SetBits(mask QTIMER2_TIMER3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RQTIMER2_TIMER3_SELECT_INPUT) ClearBits(mask QTIMER2_TIMER3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RQTIMER2_TIMER3_SELECT_INPUT) Load() QTIMER2_TIMER3_SELECT_INPUT {
	return QTIMER2_TIMER3_SELECT_INPUT(r.U32.Load())
}
func (r *RQTIMER2_TIMER3_SELECT_INPUT) Store(b QTIMER2_TIMER3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMQTIMER2_TIMER3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMQTIMER2_TIMER3_SELECT_INPUT) Load() QTIMER2_TIMER3_SELECT_INPUT {
	return QTIMER2_TIMER3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMQTIMER2_TIMER3_SELECT_INPUT) Store(b QTIMER2_TIMER3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func QTIMER2_TIMER3_DAISY_(p *Periph) RMQTIMER2_TIMER3_SELECT_INPUT {
	return RMQTIMER2_TIMER3_SELECT_INPUT{mmio.UM32{&p.QTIMER2_TIMER3_SELECT_INPUT.U32, uint32(QTIMER2_TIMER3_DAISY)}}
}

type QTIMER3_TIMER0_SELECT_INPUT uint32

type RQTIMER3_TIMER0_SELECT_INPUT struct{ mmio.U32 }

func (r *RQTIMER3_TIMER0_SELECT_INPUT) LoadBits(mask QTIMER3_TIMER0_SELECT_INPUT) QTIMER3_TIMER0_SELECT_INPUT {
	return QTIMER3_TIMER0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RQTIMER3_TIMER0_SELECT_INPUT) StoreBits(mask, b QTIMER3_TIMER0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RQTIMER3_TIMER0_SELECT_INPUT) SetBits(mask QTIMER3_TIMER0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RQTIMER3_TIMER0_SELECT_INPUT) ClearBits(mask QTIMER3_TIMER0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RQTIMER3_TIMER0_SELECT_INPUT) Load() QTIMER3_TIMER0_SELECT_INPUT {
	return QTIMER3_TIMER0_SELECT_INPUT(r.U32.Load())
}
func (r *RQTIMER3_TIMER0_SELECT_INPUT) Store(b QTIMER3_TIMER0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMQTIMER3_TIMER0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMQTIMER3_TIMER0_SELECT_INPUT) Load() QTIMER3_TIMER0_SELECT_INPUT {
	return QTIMER3_TIMER0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMQTIMER3_TIMER0_SELECT_INPUT) Store(b QTIMER3_TIMER0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func QTIMER3_TIMER0_DAISY_(p *Periph) RMQTIMER3_TIMER0_SELECT_INPUT {
	return RMQTIMER3_TIMER0_SELECT_INPUT{mmio.UM32{&p.QTIMER3_TIMER0_SELECT_INPUT.U32, uint32(QTIMER3_TIMER0_DAISY)}}
}

type QTIMER3_TIMER1_SELECT_INPUT uint32

type RQTIMER3_TIMER1_SELECT_INPUT struct{ mmio.U32 }

func (r *RQTIMER3_TIMER1_SELECT_INPUT) LoadBits(mask QTIMER3_TIMER1_SELECT_INPUT) QTIMER3_TIMER1_SELECT_INPUT {
	return QTIMER3_TIMER1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RQTIMER3_TIMER1_SELECT_INPUT) StoreBits(mask, b QTIMER3_TIMER1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RQTIMER3_TIMER1_SELECT_INPUT) SetBits(mask QTIMER3_TIMER1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RQTIMER3_TIMER1_SELECT_INPUT) ClearBits(mask QTIMER3_TIMER1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RQTIMER3_TIMER1_SELECT_INPUT) Load() QTIMER3_TIMER1_SELECT_INPUT {
	return QTIMER3_TIMER1_SELECT_INPUT(r.U32.Load())
}
func (r *RQTIMER3_TIMER1_SELECT_INPUT) Store(b QTIMER3_TIMER1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMQTIMER3_TIMER1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMQTIMER3_TIMER1_SELECT_INPUT) Load() QTIMER3_TIMER1_SELECT_INPUT {
	return QTIMER3_TIMER1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMQTIMER3_TIMER1_SELECT_INPUT) Store(b QTIMER3_TIMER1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func QTIMER3_TIMER1_DAISY_(p *Periph) RMQTIMER3_TIMER1_SELECT_INPUT {
	return RMQTIMER3_TIMER1_SELECT_INPUT{mmio.UM32{&p.QTIMER3_TIMER1_SELECT_INPUT.U32, uint32(QTIMER3_TIMER1_DAISY)}}
}

type QTIMER3_TIMER2_SELECT_INPUT uint32

type RQTIMER3_TIMER2_SELECT_INPUT struct{ mmio.U32 }

func (r *RQTIMER3_TIMER2_SELECT_INPUT) LoadBits(mask QTIMER3_TIMER2_SELECT_INPUT) QTIMER3_TIMER2_SELECT_INPUT {
	return QTIMER3_TIMER2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RQTIMER3_TIMER2_SELECT_INPUT) StoreBits(mask, b QTIMER3_TIMER2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RQTIMER3_TIMER2_SELECT_INPUT) SetBits(mask QTIMER3_TIMER2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RQTIMER3_TIMER2_SELECT_INPUT) ClearBits(mask QTIMER3_TIMER2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RQTIMER3_TIMER2_SELECT_INPUT) Load() QTIMER3_TIMER2_SELECT_INPUT {
	return QTIMER3_TIMER2_SELECT_INPUT(r.U32.Load())
}
func (r *RQTIMER3_TIMER2_SELECT_INPUT) Store(b QTIMER3_TIMER2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMQTIMER3_TIMER2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMQTIMER3_TIMER2_SELECT_INPUT) Load() QTIMER3_TIMER2_SELECT_INPUT {
	return QTIMER3_TIMER2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMQTIMER3_TIMER2_SELECT_INPUT) Store(b QTIMER3_TIMER2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func QTIMER3_TIMER2_DAISY_(p *Periph) RMQTIMER3_TIMER2_SELECT_INPUT {
	return RMQTIMER3_TIMER2_SELECT_INPUT{mmio.UM32{&p.QTIMER3_TIMER2_SELECT_INPUT.U32, uint32(QTIMER3_TIMER2_DAISY)}}
}

type QTIMER3_TIMER3_SELECT_INPUT uint32

type RQTIMER3_TIMER3_SELECT_INPUT struct{ mmio.U32 }

func (r *RQTIMER3_TIMER3_SELECT_INPUT) LoadBits(mask QTIMER3_TIMER3_SELECT_INPUT) QTIMER3_TIMER3_SELECT_INPUT {
	return QTIMER3_TIMER3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RQTIMER3_TIMER3_SELECT_INPUT) StoreBits(mask, b QTIMER3_TIMER3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RQTIMER3_TIMER3_SELECT_INPUT) SetBits(mask QTIMER3_TIMER3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RQTIMER3_TIMER3_SELECT_INPUT) ClearBits(mask QTIMER3_TIMER3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RQTIMER3_TIMER3_SELECT_INPUT) Load() QTIMER3_TIMER3_SELECT_INPUT {
	return QTIMER3_TIMER3_SELECT_INPUT(r.U32.Load())
}
func (r *RQTIMER3_TIMER3_SELECT_INPUT) Store(b QTIMER3_TIMER3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMQTIMER3_TIMER3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMQTIMER3_TIMER3_SELECT_INPUT) Load() QTIMER3_TIMER3_SELECT_INPUT {
	return QTIMER3_TIMER3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMQTIMER3_TIMER3_SELECT_INPUT) Store(b QTIMER3_TIMER3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func QTIMER3_TIMER3_DAISY_(p *Periph) RMQTIMER3_TIMER3_SELECT_INPUT {
	return RMQTIMER3_TIMER3_SELECT_INPUT{mmio.UM32{&p.QTIMER3_TIMER3_SELECT_INPUT.U32, uint32(QTIMER3_TIMER3_DAISY)}}
}

type SAI1_MCLK2_SELECT_INPUT uint32

type RSAI1_MCLK2_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI1_MCLK2_SELECT_INPUT) LoadBits(mask SAI1_MCLK2_SELECT_INPUT) SAI1_MCLK2_SELECT_INPUT {
	return SAI1_MCLK2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI1_MCLK2_SELECT_INPUT) StoreBits(mask, b SAI1_MCLK2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI1_MCLK2_SELECT_INPUT) SetBits(mask SAI1_MCLK2_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RSAI1_MCLK2_SELECT_INPUT) ClearBits(mask SAI1_MCLK2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI1_MCLK2_SELECT_INPUT) Load() SAI1_MCLK2_SELECT_INPUT {
	return SAI1_MCLK2_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI1_MCLK2_SELECT_INPUT) Store(b SAI1_MCLK2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI1_MCLK2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI1_MCLK2_SELECT_INPUT) Load() SAI1_MCLK2_SELECT_INPUT {
	return SAI1_MCLK2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI1_MCLK2_SELECT_INPUT) Store(b SAI1_MCLK2_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI1_MCLK2_DAISY_(p *Periph) RMSAI1_MCLK2_SELECT_INPUT {
	return RMSAI1_MCLK2_SELECT_INPUT{mmio.UM32{&p.SAI1_MCLK2_SELECT_INPUT.U32, uint32(SAI1_MCLK2_DAISY)}}
}

type SAI1_RX_BCLK_SELECT_INPUT uint32

type RSAI1_RX_BCLK_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI1_RX_BCLK_SELECT_INPUT) LoadBits(mask SAI1_RX_BCLK_SELECT_INPUT) SAI1_RX_BCLK_SELECT_INPUT {
	return SAI1_RX_BCLK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI1_RX_BCLK_SELECT_INPUT) StoreBits(mask, b SAI1_RX_BCLK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI1_RX_BCLK_SELECT_INPUT) SetBits(mask SAI1_RX_BCLK_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI1_RX_BCLK_SELECT_INPUT) ClearBits(mask SAI1_RX_BCLK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI1_RX_BCLK_SELECT_INPUT) Load() SAI1_RX_BCLK_SELECT_INPUT {
	return SAI1_RX_BCLK_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI1_RX_BCLK_SELECT_INPUT) Store(b SAI1_RX_BCLK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI1_RX_BCLK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI1_RX_BCLK_SELECT_INPUT) Load() SAI1_RX_BCLK_SELECT_INPUT {
	return SAI1_RX_BCLK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI1_RX_BCLK_SELECT_INPUT) Store(b SAI1_RX_BCLK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI1_RX_BCLK_DAISY_(p *Periph) RMSAI1_RX_BCLK_SELECT_INPUT {
	return RMSAI1_RX_BCLK_SELECT_INPUT{mmio.UM32{&p.SAI1_RX_BCLK_SELECT_INPUT.U32, uint32(SAI1_RX_BCLK_DAISY)}}
}

type SAI1_RX_DATA0_SELECT_INPUT uint32

type RSAI1_RX_DATA0_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI1_RX_DATA0_SELECT_INPUT) LoadBits(mask SAI1_RX_DATA0_SELECT_INPUT) SAI1_RX_DATA0_SELECT_INPUT {
	return SAI1_RX_DATA0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI1_RX_DATA0_SELECT_INPUT) StoreBits(mask, b SAI1_RX_DATA0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI1_RX_DATA0_SELECT_INPUT) SetBits(mask SAI1_RX_DATA0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI1_RX_DATA0_SELECT_INPUT) ClearBits(mask SAI1_RX_DATA0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI1_RX_DATA0_SELECT_INPUT) Load() SAI1_RX_DATA0_SELECT_INPUT {
	return SAI1_RX_DATA0_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI1_RX_DATA0_SELECT_INPUT) Store(b SAI1_RX_DATA0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI1_RX_DATA0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI1_RX_DATA0_SELECT_INPUT) Load() SAI1_RX_DATA0_SELECT_INPUT {
	return SAI1_RX_DATA0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI1_RX_DATA0_SELECT_INPUT) Store(b SAI1_RX_DATA0_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI1_RX_DATA0_DAISY_(p *Periph) RMSAI1_RX_DATA0_SELECT_INPUT {
	return RMSAI1_RX_DATA0_SELECT_INPUT{mmio.UM32{&p.SAI1_RX_DATA0_SELECT_INPUT.U32, uint32(SAI1_RX_DATA0_DAISY)}}
}

type SAI1_RX_DATA1_SELECT_INPUT uint32

type RSAI1_RX_DATA1_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI1_RX_DATA1_SELECT_INPUT) LoadBits(mask SAI1_RX_DATA1_SELECT_INPUT) SAI1_RX_DATA1_SELECT_INPUT {
	return SAI1_RX_DATA1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI1_RX_DATA1_SELECT_INPUT) StoreBits(mask, b SAI1_RX_DATA1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI1_RX_DATA1_SELECT_INPUT) SetBits(mask SAI1_RX_DATA1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI1_RX_DATA1_SELECT_INPUT) ClearBits(mask SAI1_RX_DATA1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI1_RX_DATA1_SELECT_INPUT) Load() SAI1_RX_DATA1_SELECT_INPUT {
	return SAI1_RX_DATA1_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI1_RX_DATA1_SELECT_INPUT) Store(b SAI1_RX_DATA1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI1_RX_DATA1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI1_RX_DATA1_SELECT_INPUT) Load() SAI1_RX_DATA1_SELECT_INPUT {
	return SAI1_RX_DATA1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI1_RX_DATA1_SELECT_INPUT) Store(b SAI1_RX_DATA1_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI1_RX_DATA1_DAISY_(p *Periph) RMSAI1_RX_DATA1_SELECT_INPUT {
	return RMSAI1_RX_DATA1_SELECT_INPUT{mmio.UM32{&p.SAI1_RX_DATA1_SELECT_INPUT.U32, uint32(SAI1_RX_DATA1_DAISY)}}
}

type SAI1_RX_DATA2_SELECT_INPUT uint32

type RSAI1_RX_DATA2_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI1_RX_DATA2_SELECT_INPUT) LoadBits(mask SAI1_RX_DATA2_SELECT_INPUT) SAI1_RX_DATA2_SELECT_INPUT {
	return SAI1_RX_DATA2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI1_RX_DATA2_SELECT_INPUT) StoreBits(mask, b SAI1_RX_DATA2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI1_RX_DATA2_SELECT_INPUT) SetBits(mask SAI1_RX_DATA2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI1_RX_DATA2_SELECT_INPUT) ClearBits(mask SAI1_RX_DATA2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI1_RX_DATA2_SELECT_INPUT) Load() SAI1_RX_DATA2_SELECT_INPUT {
	return SAI1_RX_DATA2_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI1_RX_DATA2_SELECT_INPUT) Store(b SAI1_RX_DATA2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI1_RX_DATA2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI1_RX_DATA2_SELECT_INPUT) Load() SAI1_RX_DATA2_SELECT_INPUT {
	return SAI1_RX_DATA2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI1_RX_DATA2_SELECT_INPUT) Store(b SAI1_RX_DATA2_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI1_RX_DATA2_DAISY_(p *Periph) RMSAI1_RX_DATA2_SELECT_INPUT {
	return RMSAI1_RX_DATA2_SELECT_INPUT{mmio.UM32{&p.SAI1_RX_DATA2_SELECT_INPUT.U32, uint32(SAI1_RX_DATA2_DAISY)}}
}

type SAI1_RX_DATA3_SELECT_INPUT uint32

type RSAI1_RX_DATA3_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI1_RX_DATA3_SELECT_INPUT) LoadBits(mask SAI1_RX_DATA3_SELECT_INPUT) SAI1_RX_DATA3_SELECT_INPUT {
	return SAI1_RX_DATA3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI1_RX_DATA3_SELECT_INPUT) StoreBits(mask, b SAI1_RX_DATA3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI1_RX_DATA3_SELECT_INPUT) SetBits(mask SAI1_RX_DATA3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI1_RX_DATA3_SELECT_INPUT) ClearBits(mask SAI1_RX_DATA3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI1_RX_DATA3_SELECT_INPUT) Load() SAI1_RX_DATA3_SELECT_INPUT {
	return SAI1_RX_DATA3_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI1_RX_DATA3_SELECT_INPUT) Store(b SAI1_RX_DATA3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI1_RX_DATA3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI1_RX_DATA3_SELECT_INPUT) Load() SAI1_RX_DATA3_SELECT_INPUT {
	return SAI1_RX_DATA3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI1_RX_DATA3_SELECT_INPUT) Store(b SAI1_RX_DATA3_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI1_RX_DATA3_DAISY_(p *Periph) RMSAI1_RX_DATA3_SELECT_INPUT {
	return RMSAI1_RX_DATA3_SELECT_INPUT{mmio.UM32{&p.SAI1_RX_DATA3_SELECT_INPUT.U32, uint32(SAI1_RX_DATA3_DAISY)}}
}

type SAI1_RX_SYNC_SELECT_INPUT uint32

type RSAI1_RX_SYNC_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI1_RX_SYNC_SELECT_INPUT) LoadBits(mask SAI1_RX_SYNC_SELECT_INPUT) SAI1_RX_SYNC_SELECT_INPUT {
	return SAI1_RX_SYNC_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI1_RX_SYNC_SELECT_INPUT) StoreBits(mask, b SAI1_RX_SYNC_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI1_RX_SYNC_SELECT_INPUT) SetBits(mask SAI1_RX_SYNC_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI1_RX_SYNC_SELECT_INPUT) ClearBits(mask SAI1_RX_SYNC_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI1_RX_SYNC_SELECT_INPUT) Load() SAI1_RX_SYNC_SELECT_INPUT {
	return SAI1_RX_SYNC_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI1_RX_SYNC_SELECT_INPUT) Store(b SAI1_RX_SYNC_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI1_RX_SYNC_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI1_RX_SYNC_SELECT_INPUT) Load() SAI1_RX_SYNC_SELECT_INPUT {
	return SAI1_RX_SYNC_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI1_RX_SYNC_SELECT_INPUT) Store(b SAI1_RX_SYNC_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI1_RX_SYNC_DAISY_(p *Periph) RMSAI1_RX_SYNC_SELECT_INPUT {
	return RMSAI1_RX_SYNC_SELECT_INPUT{mmio.UM32{&p.SAI1_RX_SYNC_SELECT_INPUT.U32, uint32(SAI1_RX_SYNC_DAISY)}}
}

type SAI1_TX_BCLK_SELECT_INPUT uint32

type RSAI1_TX_BCLK_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI1_TX_BCLK_SELECT_INPUT) LoadBits(mask SAI1_TX_BCLK_SELECT_INPUT) SAI1_TX_BCLK_SELECT_INPUT {
	return SAI1_TX_BCLK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI1_TX_BCLK_SELECT_INPUT) StoreBits(mask, b SAI1_TX_BCLK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI1_TX_BCLK_SELECT_INPUT) SetBits(mask SAI1_TX_BCLK_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI1_TX_BCLK_SELECT_INPUT) ClearBits(mask SAI1_TX_BCLK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI1_TX_BCLK_SELECT_INPUT) Load() SAI1_TX_BCLK_SELECT_INPUT {
	return SAI1_TX_BCLK_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI1_TX_BCLK_SELECT_INPUT) Store(b SAI1_TX_BCLK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI1_TX_BCLK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI1_TX_BCLK_SELECT_INPUT) Load() SAI1_TX_BCLK_SELECT_INPUT {
	return SAI1_TX_BCLK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI1_TX_BCLK_SELECT_INPUT) Store(b SAI1_TX_BCLK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI1_TX_BCLK_DAISY_(p *Periph) RMSAI1_TX_BCLK_SELECT_INPUT {
	return RMSAI1_TX_BCLK_SELECT_INPUT{mmio.UM32{&p.SAI1_TX_BCLK_SELECT_INPUT.U32, uint32(SAI1_TX_BCLK_DAISY)}}
}

type SAI1_TX_SYNC_SELECT_INPUT uint32

type RSAI1_TX_SYNC_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI1_TX_SYNC_SELECT_INPUT) LoadBits(mask SAI1_TX_SYNC_SELECT_INPUT) SAI1_TX_SYNC_SELECT_INPUT {
	return SAI1_TX_SYNC_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI1_TX_SYNC_SELECT_INPUT) StoreBits(mask, b SAI1_TX_SYNC_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI1_TX_SYNC_SELECT_INPUT) SetBits(mask SAI1_TX_SYNC_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI1_TX_SYNC_SELECT_INPUT) ClearBits(mask SAI1_TX_SYNC_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI1_TX_SYNC_SELECT_INPUT) Load() SAI1_TX_SYNC_SELECT_INPUT {
	return SAI1_TX_SYNC_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI1_TX_SYNC_SELECT_INPUT) Store(b SAI1_TX_SYNC_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI1_TX_SYNC_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI1_TX_SYNC_SELECT_INPUT) Load() SAI1_TX_SYNC_SELECT_INPUT {
	return SAI1_TX_SYNC_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI1_TX_SYNC_SELECT_INPUT) Store(b SAI1_TX_SYNC_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI1_TX_SYNC_DAISY_(p *Periph) RMSAI1_TX_SYNC_SELECT_INPUT {
	return RMSAI1_TX_SYNC_SELECT_INPUT{mmio.UM32{&p.SAI1_TX_SYNC_SELECT_INPUT.U32, uint32(SAI1_TX_SYNC_DAISY)}}
}

type SAI2_MCLK2_SELECT_INPUT uint32

type RSAI2_MCLK2_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI2_MCLK2_SELECT_INPUT) LoadBits(mask SAI2_MCLK2_SELECT_INPUT) SAI2_MCLK2_SELECT_INPUT {
	return SAI2_MCLK2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI2_MCLK2_SELECT_INPUT) StoreBits(mask, b SAI2_MCLK2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI2_MCLK2_SELECT_INPUT) SetBits(mask SAI2_MCLK2_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RSAI2_MCLK2_SELECT_INPUT) ClearBits(mask SAI2_MCLK2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI2_MCLK2_SELECT_INPUT) Load() SAI2_MCLK2_SELECT_INPUT {
	return SAI2_MCLK2_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI2_MCLK2_SELECT_INPUT) Store(b SAI2_MCLK2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI2_MCLK2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI2_MCLK2_SELECT_INPUT) Load() SAI2_MCLK2_SELECT_INPUT {
	return SAI2_MCLK2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI2_MCLK2_SELECT_INPUT) Store(b SAI2_MCLK2_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI2_MCLK2_DAISY_(p *Periph) RMSAI2_MCLK2_SELECT_INPUT {
	return RMSAI2_MCLK2_SELECT_INPUT{mmio.UM32{&p.SAI2_MCLK2_SELECT_INPUT.U32, uint32(SAI2_MCLK2_DAISY)}}
}

type SAI2_RX_BCLK_SELECT_INPUT uint32

type RSAI2_RX_BCLK_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI2_RX_BCLK_SELECT_INPUT) LoadBits(mask SAI2_RX_BCLK_SELECT_INPUT) SAI2_RX_BCLK_SELECT_INPUT {
	return SAI2_RX_BCLK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI2_RX_BCLK_SELECT_INPUT) StoreBits(mask, b SAI2_RX_BCLK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI2_RX_BCLK_SELECT_INPUT) SetBits(mask SAI2_RX_BCLK_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI2_RX_BCLK_SELECT_INPUT) ClearBits(mask SAI2_RX_BCLK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI2_RX_BCLK_SELECT_INPUT) Load() SAI2_RX_BCLK_SELECT_INPUT {
	return SAI2_RX_BCLK_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI2_RX_BCLK_SELECT_INPUT) Store(b SAI2_RX_BCLK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI2_RX_BCLK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI2_RX_BCLK_SELECT_INPUT) Load() SAI2_RX_BCLK_SELECT_INPUT {
	return SAI2_RX_BCLK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI2_RX_BCLK_SELECT_INPUT) Store(b SAI2_RX_BCLK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI2_RX_BCLK_DAISY_(p *Periph) RMSAI2_RX_BCLK_SELECT_INPUT {
	return RMSAI2_RX_BCLK_SELECT_INPUT{mmio.UM32{&p.SAI2_RX_BCLK_SELECT_INPUT.U32, uint32(SAI2_RX_BCLK_DAISY)}}
}

type SAI2_RX_DATA0_SELECT_INPUT uint32

type RSAI2_RX_DATA0_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI2_RX_DATA0_SELECT_INPUT) LoadBits(mask SAI2_RX_DATA0_SELECT_INPUT) SAI2_RX_DATA0_SELECT_INPUT {
	return SAI2_RX_DATA0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI2_RX_DATA0_SELECT_INPUT) StoreBits(mask, b SAI2_RX_DATA0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI2_RX_DATA0_SELECT_INPUT) SetBits(mask SAI2_RX_DATA0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI2_RX_DATA0_SELECT_INPUT) ClearBits(mask SAI2_RX_DATA0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI2_RX_DATA0_SELECT_INPUT) Load() SAI2_RX_DATA0_SELECT_INPUT {
	return SAI2_RX_DATA0_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI2_RX_DATA0_SELECT_INPUT) Store(b SAI2_RX_DATA0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI2_RX_DATA0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI2_RX_DATA0_SELECT_INPUT) Load() SAI2_RX_DATA0_SELECT_INPUT {
	return SAI2_RX_DATA0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI2_RX_DATA0_SELECT_INPUT) Store(b SAI2_RX_DATA0_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI2_RX_DATA0_DAISY_(p *Periph) RMSAI2_RX_DATA0_SELECT_INPUT {
	return RMSAI2_RX_DATA0_SELECT_INPUT{mmio.UM32{&p.SAI2_RX_DATA0_SELECT_INPUT.U32, uint32(SAI2_RX_DATA0_DAISY)}}
}

type SAI2_RX_SYNC_SELECT_INPUT uint32

type RSAI2_RX_SYNC_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI2_RX_SYNC_SELECT_INPUT) LoadBits(mask SAI2_RX_SYNC_SELECT_INPUT) SAI2_RX_SYNC_SELECT_INPUT {
	return SAI2_RX_SYNC_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI2_RX_SYNC_SELECT_INPUT) StoreBits(mask, b SAI2_RX_SYNC_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI2_RX_SYNC_SELECT_INPUT) SetBits(mask SAI2_RX_SYNC_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI2_RX_SYNC_SELECT_INPUT) ClearBits(mask SAI2_RX_SYNC_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI2_RX_SYNC_SELECT_INPUT) Load() SAI2_RX_SYNC_SELECT_INPUT {
	return SAI2_RX_SYNC_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI2_RX_SYNC_SELECT_INPUT) Store(b SAI2_RX_SYNC_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI2_RX_SYNC_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI2_RX_SYNC_SELECT_INPUT) Load() SAI2_RX_SYNC_SELECT_INPUT {
	return SAI2_RX_SYNC_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI2_RX_SYNC_SELECT_INPUT) Store(b SAI2_RX_SYNC_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI2_RX_SYNC_DAISY_(p *Periph) RMSAI2_RX_SYNC_SELECT_INPUT {
	return RMSAI2_RX_SYNC_SELECT_INPUT{mmio.UM32{&p.SAI2_RX_SYNC_SELECT_INPUT.U32, uint32(SAI2_RX_SYNC_DAISY)}}
}

type SAI2_TX_BCLK_SELECT_INPUT uint32

type RSAI2_TX_BCLK_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI2_TX_BCLK_SELECT_INPUT) LoadBits(mask SAI2_TX_BCLK_SELECT_INPUT) SAI2_TX_BCLK_SELECT_INPUT {
	return SAI2_TX_BCLK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI2_TX_BCLK_SELECT_INPUT) StoreBits(mask, b SAI2_TX_BCLK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI2_TX_BCLK_SELECT_INPUT) SetBits(mask SAI2_TX_BCLK_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI2_TX_BCLK_SELECT_INPUT) ClearBits(mask SAI2_TX_BCLK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI2_TX_BCLK_SELECT_INPUT) Load() SAI2_TX_BCLK_SELECT_INPUT {
	return SAI2_TX_BCLK_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI2_TX_BCLK_SELECT_INPUT) Store(b SAI2_TX_BCLK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI2_TX_BCLK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI2_TX_BCLK_SELECT_INPUT) Load() SAI2_TX_BCLK_SELECT_INPUT {
	return SAI2_TX_BCLK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI2_TX_BCLK_SELECT_INPUT) Store(b SAI2_TX_BCLK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI2_TX_BCLK_DAISY_(p *Periph) RMSAI2_TX_BCLK_SELECT_INPUT {
	return RMSAI2_TX_BCLK_SELECT_INPUT{mmio.UM32{&p.SAI2_TX_BCLK_SELECT_INPUT.U32, uint32(SAI2_TX_BCLK_DAISY)}}
}

type SAI2_TX_SYNC_SELECT_INPUT uint32

type RSAI2_TX_SYNC_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI2_TX_SYNC_SELECT_INPUT) LoadBits(mask SAI2_TX_SYNC_SELECT_INPUT) SAI2_TX_SYNC_SELECT_INPUT {
	return SAI2_TX_SYNC_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI2_TX_SYNC_SELECT_INPUT) StoreBits(mask, b SAI2_TX_SYNC_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI2_TX_SYNC_SELECT_INPUT) SetBits(mask SAI2_TX_SYNC_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI2_TX_SYNC_SELECT_INPUT) ClearBits(mask SAI2_TX_SYNC_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI2_TX_SYNC_SELECT_INPUT) Load() SAI2_TX_SYNC_SELECT_INPUT {
	return SAI2_TX_SYNC_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI2_TX_SYNC_SELECT_INPUT) Store(b SAI2_TX_SYNC_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSAI2_TX_SYNC_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI2_TX_SYNC_SELECT_INPUT) Load() SAI2_TX_SYNC_SELECT_INPUT {
	return SAI2_TX_SYNC_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI2_TX_SYNC_SELECT_INPUT) Store(b SAI2_TX_SYNC_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SAI2_TX_SYNC_DAISY_(p *Periph) RMSAI2_TX_SYNC_SELECT_INPUT {
	return RMSAI2_TX_SYNC_SELECT_INPUT{mmio.UM32{&p.SAI2_TX_SYNC_SELECT_INPUT.U32, uint32(SAI2_TX_SYNC_DAISY)}}
}

type SPDIF_IN_SELECT_INPUT uint32

type RSPDIF_IN_SELECT_INPUT struct{ mmio.U32 }

func (r *RSPDIF_IN_SELECT_INPUT) LoadBits(mask SPDIF_IN_SELECT_INPUT) SPDIF_IN_SELECT_INPUT {
	return SPDIF_IN_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSPDIF_IN_SELECT_INPUT) StoreBits(mask, b SPDIF_IN_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSPDIF_IN_SELECT_INPUT) SetBits(mask SPDIF_IN_SELECT_INPUT)   { r.U32.SetBits(uint32(mask)) }
func (r *RSPDIF_IN_SELECT_INPUT) ClearBits(mask SPDIF_IN_SELECT_INPUT) { r.U32.ClearBits(uint32(mask)) }
func (r *RSPDIF_IN_SELECT_INPUT) Load() SPDIF_IN_SELECT_INPUT {
	return SPDIF_IN_SELECT_INPUT(r.U32.Load())
}
func (r *RSPDIF_IN_SELECT_INPUT) Store(b SPDIF_IN_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMSPDIF_IN_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSPDIF_IN_SELECT_INPUT) Load() SPDIF_IN_SELECT_INPUT {
	return SPDIF_IN_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSPDIF_IN_SELECT_INPUT) Store(b SPDIF_IN_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func SPDIF_IN_DAISY_(p *Periph) RMSPDIF_IN_SELECT_INPUT {
	return RMSPDIF_IN_SELECT_INPUT{mmio.UM32{&p.SPDIF_IN_SELECT_INPUT.U32, uint32(SPDIF_IN_DAISY)}}
}

type USB_OTG2_OC_SELECT_INPUT uint32

type RUSB_OTG2_OC_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSB_OTG2_OC_SELECT_INPUT) LoadBits(mask USB_OTG2_OC_SELECT_INPUT) USB_OTG2_OC_SELECT_INPUT {
	return USB_OTG2_OC_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSB_OTG2_OC_SELECT_INPUT) StoreBits(mask, b USB_OTG2_OC_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSB_OTG2_OC_SELECT_INPUT) SetBits(mask USB_OTG2_OC_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSB_OTG2_OC_SELECT_INPUT) ClearBits(mask USB_OTG2_OC_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSB_OTG2_OC_SELECT_INPUT) Load() USB_OTG2_OC_SELECT_INPUT {
	return USB_OTG2_OC_SELECT_INPUT(r.U32.Load())
}
func (r *RUSB_OTG2_OC_SELECT_INPUT) Store(b USB_OTG2_OC_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSB_OTG2_OC_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSB_OTG2_OC_SELECT_INPUT) Load() USB_OTG2_OC_SELECT_INPUT {
	return USB_OTG2_OC_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSB_OTG2_OC_SELECT_INPUT) Store(b USB_OTG2_OC_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USB_OTG2_OC_DAISY_(p *Periph) RMUSB_OTG2_OC_SELECT_INPUT {
	return RMUSB_OTG2_OC_SELECT_INPUT{mmio.UM32{&p.USB_OTG2_OC_SELECT_INPUT.U32, uint32(USB_OTG2_OC_DAISY)}}
}

type USB_OTG1_OC_SELECT_INPUT uint32

type RUSB_OTG1_OC_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSB_OTG1_OC_SELECT_INPUT) LoadBits(mask USB_OTG1_OC_SELECT_INPUT) USB_OTG1_OC_SELECT_INPUT {
	return USB_OTG1_OC_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSB_OTG1_OC_SELECT_INPUT) StoreBits(mask, b USB_OTG1_OC_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSB_OTG1_OC_SELECT_INPUT) SetBits(mask USB_OTG1_OC_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSB_OTG1_OC_SELECT_INPUT) ClearBits(mask USB_OTG1_OC_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSB_OTG1_OC_SELECT_INPUT) Load() USB_OTG1_OC_SELECT_INPUT {
	return USB_OTG1_OC_SELECT_INPUT(r.U32.Load())
}
func (r *RUSB_OTG1_OC_SELECT_INPUT) Store(b USB_OTG1_OC_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSB_OTG1_OC_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSB_OTG1_OC_SELECT_INPUT) Load() USB_OTG1_OC_SELECT_INPUT {
	return USB_OTG1_OC_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSB_OTG1_OC_SELECT_INPUT) Store(b USB_OTG1_OC_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USB_OTG1_OC_DAISY_(p *Periph) RMUSB_OTG1_OC_SELECT_INPUT {
	return RMUSB_OTG1_OC_SELECT_INPUT{mmio.UM32{&p.USB_OTG1_OC_SELECT_INPUT.U32, uint32(USB_OTG1_OC_DAISY)}}
}

type USDHC1_CD_B_SELECT_INPUT uint32

type RUSDHC1_CD_B_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC1_CD_B_SELECT_INPUT) LoadBits(mask USDHC1_CD_B_SELECT_INPUT) USDHC1_CD_B_SELECT_INPUT {
	return USDHC1_CD_B_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC1_CD_B_SELECT_INPUT) StoreBits(mask, b USDHC1_CD_B_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC1_CD_B_SELECT_INPUT) SetBits(mask USDHC1_CD_B_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSDHC1_CD_B_SELECT_INPUT) ClearBits(mask USDHC1_CD_B_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC1_CD_B_SELECT_INPUT) Load() USDHC1_CD_B_SELECT_INPUT {
	return USDHC1_CD_B_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC1_CD_B_SELECT_INPUT) Store(b USDHC1_CD_B_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC1_CD_B_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC1_CD_B_SELECT_INPUT) Load() USDHC1_CD_B_SELECT_INPUT {
	return USDHC1_CD_B_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC1_CD_B_SELECT_INPUT) Store(b USDHC1_CD_B_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC1_CD_B_DAISY_(p *Periph) RMUSDHC1_CD_B_SELECT_INPUT {
	return RMUSDHC1_CD_B_SELECT_INPUT{mmio.UM32{&p.USDHC1_CD_B_SELECT_INPUT.U32, uint32(USDHC1_CD_B_DAISY)}}
}

type USDHC1_WP_SELECT_INPUT uint32

type RUSDHC1_WP_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC1_WP_SELECT_INPUT) LoadBits(mask USDHC1_WP_SELECT_INPUT) USDHC1_WP_SELECT_INPUT {
	return USDHC1_WP_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC1_WP_SELECT_INPUT) StoreBits(mask, b USDHC1_WP_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC1_WP_SELECT_INPUT) SetBits(mask USDHC1_WP_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RUSDHC1_WP_SELECT_INPUT) ClearBits(mask USDHC1_WP_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC1_WP_SELECT_INPUT) Load() USDHC1_WP_SELECT_INPUT {
	return USDHC1_WP_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC1_WP_SELECT_INPUT) Store(b USDHC1_WP_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC1_WP_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC1_WP_SELECT_INPUT) Load() USDHC1_WP_SELECT_INPUT {
	return USDHC1_WP_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC1_WP_SELECT_INPUT) Store(b USDHC1_WP_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC1_WP_DAISY_(p *Periph) RMUSDHC1_WP_SELECT_INPUT {
	return RMUSDHC1_WP_SELECT_INPUT{mmio.UM32{&p.USDHC1_WP_SELECT_INPUT.U32, uint32(USDHC1_WP_DAISY)}}
}

type USDHC2_CLK_SELECT_INPUT uint32

type RUSDHC2_CLK_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_CLK_SELECT_INPUT) LoadBits(mask USDHC2_CLK_SELECT_INPUT) USDHC2_CLK_SELECT_INPUT {
	return USDHC2_CLK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_CLK_SELECT_INPUT) StoreBits(mask, b USDHC2_CLK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_CLK_SELECT_INPUT) SetBits(mask USDHC2_CLK_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RUSDHC2_CLK_SELECT_INPUT) ClearBits(mask USDHC2_CLK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_CLK_SELECT_INPUT) Load() USDHC2_CLK_SELECT_INPUT {
	return USDHC2_CLK_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_CLK_SELECT_INPUT) Store(b USDHC2_CLK_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_CLK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_CLK_SELECT_INPUT) Load() USDHC2_CLK_SELECT_INPUT {
	return USDHC2_CLK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_CLK_SELECT_INPUT) Store(b USDHC2_CLK_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_CLK_DAISY_(p *Periph) RMUSDHC2_CLK_SELECT_INPUT {
	return RMUSDHC2_CLK_SELECT_INPUT{mmio.UM32{&p.USDHC2_CLK_SELECT_INPUT.U32, uint32(USDHC2_CLK_DAISY)}}
}

type USDHC2_CD_B_SELECT_INPUT uint32

type RUSDHC2_CD_B_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_CD_B_SELECT_INPUT) LoadBits(mask USDHC2_CD_B_SELECT_INPUT) USDHC2_CD_B_SELECT_INPUT {
	return USDHC2_CD_B_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_CD_B_SELECT_INPUT) StoreBits(mask, b USDHC2_CD_B_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_CD_B_SELECT_INPUT) SetBits(mask USDHC2_CD_B_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSDHC2_CD_B_SELECT_INPUT) ClearBits(mask USDHC2_CD_B_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_CD_B_SELECT_INPUT) Load() USDHC2_CD_B_SELECT_INPUT {
	return USDHC2_CD_B_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_CD_B_SELECT_INPUT) Store(b USDHC2_CD_B_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_CD_B_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_CD_B_SELECT_INPUT) Load() USDHC2_CD_B_SELECT_INPUT {
	return USDHC2_CD_B_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_CD_B_SELECT_INPUT) Store(b USDHC2_CD_B_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_CD_B_DAISY_(p *Periph) RMUSDHC2_CD_B_SELECT_INPUT {
	return RMUSDHC2_CD_B_SELECT_INPUT{mmio.UM32{&p.USDHC2_CD_B_SELECT_INPUT.U32, uint32(USDHC2_CD_B_DAISY)}}
}

type USDHC2_CMD_SELECT_INPUT uint32

type RUSDHC2_CMD_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_CMD_SELECT_INPUT) LoadBits(mask USDHC2_CMD_SELECT_INPUT) USDHC2_CMD_SELECT_INPUT {
	return USDHC2_CMD_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_CMD_SELECT_INPUT) StoreBits(mask, b USDHC2_CMD_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_CMD_SELECT_INPUT) SetBits(mask USDHC2_CMD_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RUSDHC2_CMD_SELECT_INPUT) ClearBits(mask USDHC2_CMD_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_CMD_SELECT_INPUT) Load() USDHC2_CMD_SELECT_INPUT {
	return USDHC2_CMD_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_CMD_SELECT_INPUT) Store(b USDHC2_CMD_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_CMD_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_CMD_SELECT_INPUT) Load() USDHC2_CMD_SELECT_INPUT {
	return USDHC2_CMD_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_CMD_SELECT_INPUT) Store(b USDHC2_CMD_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_CMD_DAISY_(p *Periph) RMUSDHC2_CMD_SELECT_INPUT {
	return RMUSDHC2_CMD_SELECT_INPUT{mmio.UM32{&p.USDHC2_CMD_SELECT_INPUT.U32, uint32(USDHC2_CMD_DAISY)}}
}

type USDHC2_DATA0_SELECT_INPUT uint32

type RUSDHC2_DATA0_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_DATA0_SELECT_INPUT) LoadBits(mask USDHC2_DATA0_SELECT_INPUT) USDHC2_DATA0_SELECT_INPUT {
	return USDHC2_DATA0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_DATA0_SELECT_INPUT) StoreBits(mask, b USDHC2_DATA0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_DATA0_SELECT_INPUT) SetBits(mask USDHC2_DATA0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSDHC2_DATA0_SELECT_INPUT) ClearBits(mask USDHC2_DATA0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_DATA0_SELECT_INPUT) Load() USDHC2_DATA0_SELECT_INPUT {
	return USDHC2_DATA0_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_DATA0_SELECT_INPUT) Store(b USDHC2_DATA0_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_DATA0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_DATA0_SELECT_INPUT) Load() USDHC2_DATA0_SELECT_INPUT {
	return USDHC2_DATA0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_DATA0_SELECT_INPUT) Store(b USDHC2_DATA0_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_DATA0_DAISY_(p *Periph) RMUSDHC2_DATA0_SELECT_INPUT {
	return RMUSDHC2_DATA0_SELECT_INPUT{mmio.UM32{&p.USDHC2_DATA0_SELECT_INPUT.U32, uint32(USDHC2_DATA0_DAISY)}}
}

type USDHC2_DATA1_SELECT_INPUT uint32

type RUSDHC2_DATA1_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_DATA1_SELECT_INPUT) LoadBits(mask USDHC2_DATA1_SELECT_INPUT) USDHC2_DATA1_SELECT_INPUT {
	return USDHC2_DATA1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_DATA1_SELECT_INPUT) StoreBits(mask, b USDHC2_DATA1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_DATA1_SELECT_INPUT) SetBits(mask USDHC2_DATA1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSDHC2_DATA1_SELECT_INPUT) ClearBits(mask USDHC2_DATA1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_DATA1_SELECT_INPUT) Load() USDHC2_DATA1_SELECT_INPUT {
	return USDHC2_DATA1_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_DATA1_SELECT_INPUT) Store(b USDHC2_DATA1_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_DATA1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_DATA1_SELECT_INPUT) Load() USDHC2_DATA1_SELECT_INPUT {
	return USDHC2_DATA1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_DATA1_SELECT_INPUT) Store(b USDHC2_DATA1_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_DATA1_DAISY_(p *Periph) RMUSDHC2_DATA1_SELECT_INPUT {
	return RMUSDHC2_DATA1_SELECT_INPUT{mmio.UM32{&p.USDHC2_DATA1_SELECT_INPUT.U32, uint32(USDHC2_DATA1_DAISY)}}
}

type USDHC2_DATA2_SELECT_INPUT uint32

type RUSDHC2_DATA2_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_DATA2_SELECT_INPUT) LoadBits(mask USDHC2_DATA2_SELECT_INPUT) USDHC2_DATA2_SELECT_INPUT {
	return USDHC2_DATA2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_DATA2_SELECT_INPUT) StoreBits(mask, b USDHC2_DATA2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_DATA2_SELECT_INPUT) SetBits(mask USDHC2_DATA2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSDHC2_DATA2_SELECT_INPUT) ClearBits(mask USDHC2_DATA2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_DATA2_SELECT_INPUT) Load() USDHC2_DATA2_SELECT_INPUT {
	return USDHC2_DATA2_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_DATA2_SELECT_INPUT) Store(b USDHC2_DATA2_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_DATA2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_DATA2_SELECT_INPUT) Load() USDHC2_DATA2_SELECT_INPUT {
	return USDHC2_DATA2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_DATA2_SELECT_INPUT) Store(b USDHC2_DATA2_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_DATA2_DAISY_(p *Periph) RMUSDHC2_DATA2_SELECT_INPUT {
	return RMUSDHC2_DATA2_SELECT_INPUT{mmio.UM32{&p.USDHC2_DATA2_SELECT_INPUT.U32, uint32(USDHC2_DATA2_DAISY)}}
}

type USDHC2_DATA3_SELECT_INPUT uint32

type RUSDHC2_DATA3_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_DATA3_SELECT_INPUT) LoadBits(mask USDHC2_DATA3_SELECT_INPUT) USDHC2_DATA3_SELECT_INPUT {
	return USDHC2_DATA3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_DATA3_SELECT_INPUT) StoreBits(mask, b USDHC2_DATA3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_DATA3_SELECT_INPUT) SetBits(mask USDHC2_DATA3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSDHC2_DATA3_SELECT_INPUT) ClearBits(mask USDHC2_DATA3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_DATA3_SELECT_INPUT) Load() USDHC2_DATA3_SELECT_INPUT {
	return USDHC2_DATA3_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_DATA3_SELECT_INPUT) Store(b USDHC2_DATA3_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_DATA3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_DATA3_SELECT_INPUT) Load() USDHC2_DATA3_SELECT_INPUT {
	return USDHC2_DATA3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_DATA3_SELECT_INPUT) Store(b USDHC2_DATA3_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_DATA3_DAISY_(p *Periph) RMUSDHC2_DATA3_SELECT_INPUT {
	return RMUSDHC2_DATA3_SELECT_INPUT{mmio.UM32{&p.USDHC2_DATA3_SELECT_INPUT.U32, uint32(USDHC2_DATA3_DAISY)}}
}

type USDHC2_DATA4_SELECT_INPUT uint32

type RUSDHC2_DATA4_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_DATA4_SELECT_INPUT) LoadBits(mask USDHC2_DATA4_SELECT_INPUT) USDHC2_DATA4_SELECT_INPUT {
	return USDHC2_DATA4_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_DATA4_SELECT_INPUT) StoreBits(mask, b USDHC2_DATA4_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_DATA4_SELECT_INPUT) SetBits(mask USDHC2_DATA4_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSDHC2_DATA4_SELECT_INPUT) ClearBits(mask USDHC2_DATA4_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_DATA4_SELECT_INPUT) Load() USDHC2_DATA4_SELECT_INPUT {
	return USDHC2_DATA4_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_DATA4_SELECT_INPUT) Store(b USDHC2_DATA4_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_DATA4_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_DATA4_SELECT_INPUT) Load() USDHC2_DATA4_SELECT_INPUT {
	return USDHC2_DATA4_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_DATA4_SELECT_INPUT) Store(b USDHC2_DATA4_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_DATA4_DAISY_(p *Periph) RMUSDHC2_DATA4_SELECT_INPUT {
	return RMUSDHC2_DATA4_SELECT_INPUT{mmio.UM32{&p.USDHC2_DATA4_SELECT_INPUT.U32, uint32(USDHC2_DATA4_DAISY)}}
}

type USDHC2_DATA5_SELECT_INPUT uint32

type RUSDHC2_DATA5_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_DATA5_SELECT_INPUT) LoadBits(mask USDHC2_DATA5_SELECT_INPUT) USDHC2_DATA5_SELECT_INPUT {
	return USDHC2_DATA5_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_DATA5_SELECT_INPUT) StoreBits(mask, b USDHC2_DATA5_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_DATA5_SELECT_INPUT) SetBits(mask USDHC2_DATA5_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSDHC2_DATA5_SELECT_INPUT) ClearBits(mask USDHC2_DATA5_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_DATA5_SELECT_INPUT) Load() USDHC2_DATA5_SELECT_INPUT {
	return USDHC2_DATA5_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_DATA5_SELECT_INPUT) Store(b USDHC2_DATA5_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_DATA5_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_DATA5_SELECT_INPUT) Load() USDHC2_DATA5_SELECT_INPUT {
	return USDHC2_DATA5_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_DATA5_SELECT_INPUT) Store(b USDHC2_DATA5_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_DATA5_DAISY_(p *Periph) RMUSDHC2_DATA5_SELECT_INPUT {
	return RMUSDHC2_DATA5_SELECT_INPUT{mmio.UM32{&p.USDHC2_DATA5_SELECT_INPUT.U32, uint32(USDHC2_DATA5_DAISY)}}
}

type USDHC2_DATA6_SELECT_INPUT uint32

type RUSDHC2_DATA6_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_DATA6_SELECT_INPUT) LoadBits(mask USDHC2_DATA6_SELECT_INPUT) USDHC2_DATA6_SELECT_INPUT {
	return USDHC2_DATA6_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_DATA6_SELECT_INPUT) StoreBits(mask, b USDHC2_DATA6_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_DATA6_SELECT_INPUT) SetBits(mask USDHC2_DATA6_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSDHC2_DATA6_SELECT_INPUT) ClearBits(mask USDHC2_DATA6_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_DATA6_SELECT_INPUT) Load() USDHC2_DATA6_SELECT_INPUT {
	return USDHC2_DATA6_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_DATA6_SELECT_INPUT) Store(b USDHC2_DATA6_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_DATA6_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_DATA6_SELECT_INPUT) Load() USDHC2_DATA6_SELECT_INPUT {
	return USDHC2_DATA6_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_DATA6_SELECT_INPUT) Store(b USDHC2_DATA6_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_DATA6_DAISY_(p *Periph) RMUSDHC2_DATA6_SELECT_INPUT {
	return RMUSDHC2_DATA6_SELECT_INPUT{mmio.UM32{&p.USDHC2_DATA6_SELECT_INPUT.U32, uint32(USDHC2_DATA6_DAISY)}}
}

type USDHC2_DATA7_SELECT_INPUT uint32

type RUSDHC2_DATA7_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_DATA7_SELECT_INPUT) LoadBits(mask USDHC2_DATA7_SELECT_INPUT) USDHC2_DATA7_SELECT_INPUT {
	return USDHC2_DATA7_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_DATA7_SELECT_INPUT) StoreBits(mask, b USDHC2_DATA7_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_DATA7_SELECT_INPUT) SetBits(mask USDHC2_DATA7_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RUSDHC2_DATA7_SELECT_INPUT) ClearBits(mask USDHC2_DATA7_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_DATA7_SELECT_INPUT) Load() USDHC2_DATA7_SELECT_INPUT {
	return USDHC2_DATA7_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_DATA7_SELECT_INPUT) Store(b USDHC2_DATA7_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_DATA7_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_DATA7_SELECT_INPUT) Load() USDHC2_DATA7_SELECT_INPUT {
	return USDHC2_DATA7_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_DATA7_SELECT_INPUT) Store(b USDHC2_DATA7_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_DATA7_DAISY_(p *Periph) RMUSDHC2_DATA7_SELECT_INPUT {
	return RMUSDHC2_DATA7_SELECT_INPUT{mmio.UM32{&p.USDHC2_DATA7_SELECT_INPUT.U32, uint32(USDHC2_DATA7_DAISY)}}
}

type USDHC2_WP_SELECT_INPUT uint32

type RUSDHC2_WP_SELECT_INPUT struct{ mmio.U32 }

func (r *RUSDHC2_WP_SELECT_INPUT) LoadBits(mask USDHC2_WP_SELECT_INPUT) USDHC2_WP_SELECT_INPUT {
	return USDHC2_WP_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RUSDHC2_WP_SELECT_INPUT) StoreBits(mask, b USDHC2_WP_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RUSDHC2_WP_SELECT_INPUT) SetBits(mask USDHC2_WP_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RUSDHC2_WP_SELECT_INPUT) ClearBits(mask USDHC2_WP_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RUSDHC2_WP_SELECT_INPUT) Load() USDHC2_WP_SELECT_INPUT {
	return USDHC2_WP_SELECT_INPUT(r.U32.Load())
}
func (r *RUSDHC2_WP_SELECT_INPUT) Store(b USDHC2_WP_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMUSDHC2_WP_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMUSDHC2_WP_SELECT_INPUT) Load() USDHC2_WP_SELECT_INPUT {
	return USDHC2_WP_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMUSDHC2_WP_SELECT_INPUT) Store(b USDHC2_WP_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func USDHC2_WP_DAISY_(p *Periph) RMUSDHC2_WP_SELECT_INPUT {
	return RMUSDHC2_WP_SELECT_INPUT{mmio.UM32{&p.USDHC2_WP_SELECT_INPUT.U32, uint32(USDHC2_WP_DAISY)}}
}

type XBAR1_IN02_SELECT_INPUT uint32

type RXBAR1_IN02_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN02_SELECT_INPUT) LoadBits(mask XBAR1_IN02_SELECT_INPUT) XBAR1_IN02_SELECT_INPUT {
	return XBAR1_IN02_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN02_SELECT_INPUT) StoreBits(mask, b XBAR1_IN02_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN02_SELECT_INPUT) SetBits(mask XBAR1_IN02_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN02_SELECT_INPUT) ClearBits(mask XBAR1_IN02_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN02_SELECT_INPUT) Load() XBAR1_IN02_SELECT_INPUT {
	return XBAR1_IN02_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN02_SELECT_INPUT) Store(b XBAR1_IN02_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN02_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN02_SELECT_INPUT) Load() XBAR1_IN02_SELECT_INPUT {
	return XBAR1_IN02_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN02_SELECT_INPUT) Store(b XBAR1_IN02_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN02_DAISY_(p *Periph) RMXBAR1_IN02_SELECT_INPUT {
	return RMXBAR1_IN02_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN02_SELECT_INPUT.U32, uint32(XBAR1_IN02_DAISY)}}
}

type XBAR1_IN03_SELECT_INPUT uint32

type RXBAR1_IN03_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN03_SELECT_INPUT) LoadBits(mask XBAR1_IN03_SELECT_INPUT) XBAR1_IN03_SELECT_INPUT {
	return XBAR1_IN03_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN03_SELECT_INPUT) StoreBits(mask, b XBAR1_IN03_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN03_SELECT_INPUT) SetBits(mask XBAR1_IN03_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN03_SELECT_INPUT) ClearBits(mask XBAR1_IN03_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN03_SELECT_INPUT) Load() XBAR1_IN03_SELECT_INPUT {
	return XBAR1_IN03_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN03_SELECT_INPUT) Store(b XBAR1_IN03_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN03_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN03_SELECT_INPUT) Load() XBAR1_IN03_SELECT_INPUT {
	return XBAR1_IN03_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN03_SELECT_INPUT) Store(b XBAR1_IN03_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN03_DAISY_(p *Periph) RMXBAR1_IN03_SELECT_INPUT {
	return RMXBAR1_IN03_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN03_SELECT_INPUT.U32, uint32(XBAR1_IN03_DAISY)}}
}

type XBAR1_IN04_SELECT_INPUT uint32

type RXBAR1_IN04_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN04_SELECT_INPUT) LoadBits(mask XBAR1_IN04_SELECT_INPUT) XBAR1_IN04_SELECT_INPUT {
	return XBAR1_IN04_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN04_SELECT_INPUT) StoreBits(mask, b XBAR1_IN04_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN04_SELECT_INPUT) SetBits(mask XBAR1_IN04_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN04_SELECT_INPUT) ClearBits(mask XBAR1_IN04_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN04_SELECT_INPUT) Load() XBAR1_IN04_SELECT_INPUT {
	return XBAR1_IN04_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN04_SELECT_INPUT) Store(b XBAR1_IN04_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN04_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN04_SELECT_INPUT) Load() XBAR1_IN04_SELECT_INPUT {
	return XBAR1_IN04_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN04_SELECT_INPUT) Store(b XBAR1_IN04_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN04_DAISY_(p *Periph) RMXBAR1_IN04_SELECT_INPUT {
	return RMXBAR1_IN04_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN04_SELECT_INPUT.U32, uint32(XBAR1_IN04_DAISY)}}
}

type XBAR1_IN05_SELECT_INPUT uint32

type RXBAR1_IN05_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN05_SELECT_INPUT) LoadBits(mask XBAR1_IN05_SELECT_INPUT) XBAR1_IN05_SELECT_INPUT {
	return XBAR1_IN05_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN05_SELECT_INPUT) StoreBits(mask, b XBAR1_IN05_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN05_SELECT_INPUT) SetBits(mask XBAR1_IN05_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN05_SELECT_INPUT) ClearBits(mask XBAR1_IN05_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN05_SELECT_INPUT) Load() XBAR1_IN05_SELECT_INPUT {
	return XBAR1_IN05_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN05_SELECT_INPUT) Store(b XBAR1_IN05_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN05_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN05_SELECT_INPUT) Load() XBAR1_IN05_SELECT_INPUT {
	return XBAR1_IN05_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN05_SELECT_INPUT) Store(b XBAR1_IN05_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN05_DAISY_(p *Periph) RMXBAR1_IN05_SELECT_INPUT {
	return RMXBAR1_IN05_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN05_SELECT_INPUT.U32, uint32(XBAR1_IN05_DAISY)}}
}

type XBAR1_IN06_SELECT_INPUT uint32

type RXBAR1_IN06_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN06_SELECT_INPUT) LoadBits(mask XBAR1_IN06_SELECT_INPUT) XBAR1_IN06_SELECT_INPUT {
	return XBAR1_IN06_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN06_SELECT_INPUT) StoreBits(mask, b XBAR1_IN06_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN06_SELECT_INPUT) SetBits(mask XBAR1_IN06_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN06_SELECT_INPUT) ClearBits(mask XBAR1_IN06_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN06_SELECT_INPUT) Load() XBAR1_IN06_SELECT_INPUT {
	return XBAR1_IN06_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN06_SELECT_INPUT) Store(b XBAR1_IN06_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN06_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN06_SELECT_INPUT) Load() XBAR1_IN06_SELECT_INPUT {
	return XBAR1_IN06_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN06_SELECT_INPUT) Store(b XBAR1_IN06_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN06_DAISY_(p *Periph) RMXBAR1_IN06_SELECT_INPUT {
	return RMXBAR1_IN06_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN06_SELECT_INPUT.U32, uint32(XBAR1_IN06_DAISY)}}
}

type XBAR1_IN07_SELECT_INPUT uint32

type RXBAR1_IN07_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN07_SELECT_INPUT) LoadBits(mask XBAR1_IN07_SELECT_INPUT) XBAR1_IN07_SELECT_INPUT {
	return XBAR1_IN07_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN07_SELECT_INPUT) StoreBits(mask, b XBAR1_IN07_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN07_SELECT_INPUT) SetBits(mask XBAR1_IN07_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN07_SELECT_INPUT) ClearBits(mask XBAR1_IN07_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN07_SELECT_INPUT) Load() XBAR1_IN07_SELECT_INPUT {
	return XBAR1_IN07_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN07_SELECT_INPUT) Store(b XBAR1_IN07_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN07_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN07_SELECT_INPUT) Load() XBAR1_IN07_SELECT_INPUT {
	return XBAR1_IN07_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN07_SELECT_INPUT) Store(b XBAR1_IN07_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN07_DAISY_(p *Periph) RMXBAR1_IN07_SELECT_INPUT {
	return RMXBAR1_IN07_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN07_SELECT_INPUT.U32, uint32(XBAR1_IN07_DAISY)}}
}

type XBAR1_IN08_SELECT_INPUT uint32

type RXBAR1_IN08_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN08_SELECT_INPUT) LoadBits(mask XBAR1_IN08_SELECT_INPUT) XBAR1_IN08_SELECT_INPUT {
	return XBAR1_IN08_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN08_SELECT_INPUT) StoreBits(mask, b XBAR1_IN08_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN08_SELECT_INPUT) SetBits(mask XBAR1_IN08_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN08_SELECT_INPUT) ClearBits(mask XBAR1_IN08_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN08_SELECT_INPUT) Load() XBAR1_IN08_SELECT_INPUT {
	return XBAR1_IN08_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN08_SELECT_INPUT) Store(b XBAR1_IN08_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN08_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN08_SELECT_INPUT) Load() XBAR1_IN08_SELECT_INPUT {
	return XBAR1_IN08_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN08_SELECT_INPUT) Store(b XBAR1_IN08_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN08_DAISY_(p *Periph) RMXBAR1_IN08_SELECT_INPUT {
	return RMXBAR1_IN08_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN08_SELECT_INPUT.U32, uint32(XBAR1_IN08_DAISY)}}
}

type XBAR1_IN09_SELECT_INPUT uint32

type RXBAR1_IN09_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN09_SELECT_INPUT) LoadBits(mask XBAR1_IN09_SELECT_INPUT) XBAR1_IN09_SELECT_INPUT {
	return XBAR1_IN09_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN09_SELECT_INPUT) StoreBits(mask, b XBAR1_IN09_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN09_SELECT_INPUT) SetBits(mask XBAR1_IN09_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN09_SELECT_INPUT) ClearBits(mask XBAR1_IN09_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN09_SELECT_INPUT) Load() XBAR1_IN09_SELECT_INPUT {
	return XBAR1_IN09_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN09_SELECT_INPUT) Store(b XBAR1_IN09_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN09_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN09_SELECT_INPUT) Load() XBAR1_IN09_SELECT_INPUT {
	return XBAR1_IN09_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN09_SELECT_INPUT) Store(b XBAR1_IN09_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN09_DAISY_(p *Periph) RMXBAR1_IN09_SELECT_INPUT {
	return RMXBAR1_IN09_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN09_SELECT_INPUT.U32, uint32(XBAR1_IN09_DAISY)}}
}

type XBAR1_IN17_SELECT_INPUT uint32

type RXBAR1_IN17_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN17_SELECT_INPUT) LoadBits(mask XBAR1_IN17_SELECT_INPUT) XBAR1_IN17_SELECT_INPUT {
	return XBAR1_IN17_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN17_SELECT_INPUT) StoreBits(mask, b XBAR1_IN17_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN17_SELECT_INPUT) SetBits(mask XBAR1_IN17_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN17_SELECT_INPUT) ClearBits(mask XBAR1_IN17_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN17_SELECT_INPUT) Load() XBAR1_IN17_SELECT_INPUT {
	return XBAR1_IN17_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN17_SELECT_INPUT) Store(b XBAR1_IN17_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN17_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN17_SELECT_INPUT) Load() XBAR1_IN17_SELECT_INPUT {
	return XBAR1_IN17_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN17_SELECT_INPUT) Store(b XBAR1_IN17_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN17_DAISY_(p *Periph) RMXBAR1_IN17_SELECT_INPUT {
	return RMXBAR1_IN17_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN17_SELECT_INPUT.U32, uint32(XBAR1_IN17_DAISY)}}
}

type XBAR1_IN18_SELECT_INPUT uint32

type RXBAR1_IN18_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN18_SELECT_INPUT) LoadBits(mask XBAR1_IN18_SELECT_INPUT) XBAR1_IN18_SELECT_INPUT {
	return XBAR1_IN18_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN18_SELECT_INPUT) StoreBits(mask, b XBAR1_IN18_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN18_SELECT_INPUT) SetBits(mask XBAR1_IN18_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN18_SELECT_INPUT) ClearBits(mask XBAR1_IN18_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN18_SELECT_INPUT) Load() XBAR1_IN18_SELECT_INPUT {
	return XBAR1_IN18_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN18_SELECT_INPUT) Store(b XBAR1_IN18_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN18_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN18_SELECT_INPUT) Load() XBAR1_IN18_SELECT_INPUT {
	return XBAR1_IN18_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN18_SELECT_INPUT) Store(b XBAR1_IN18_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN18_DAISY_(p *Periph) RMXBAR1_IN18_SELECT_INPUT {
	return RMXBAR1_IN18_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN18_SELECT_INPUT.U32, uint32(XBAR1_IN18_DAISY)}}
}

type XBAR1_IN20_SELECT_INPUT uint32

type RXBAR1_IN20_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN20_SELECT_INPUT) LoadBits(mask XBAR1_IN20_SELECT_INPUT) XBAR1_IN20_SELECT_INPUT {
	return XBAR1_IN20_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN20_SELECT_INPUT) StoreBits(mask, b XBAR1_IN20_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN20_SELECT_INPUT) SetBits(mask XBAR1_IN20_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN20_SELECT_INPUT) ClearBits(mask XBAR1_IN20_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN20_SELECT_INPUT) Load() XBAR1_IN20_SELECT_INPUT {
	return XBAR1_IN20_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN20_SELECT_INPUT) Store(b XBAR1_IN20_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN20_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN20_SELECT_INPUT) Load() XBAR1_IN20_SELECT_INPUT {
	return XBAR1_IN20_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN20_SELECT_INPUT) Store(b XBAR1_IN20_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN20_DAISY_(p *Periph) RMXBAR1_IN20_SELECT_INPUT {
	return RMXBAR1_IN20_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN20_SELECT_INPUT.U32, uint32(XBAR1_IN20_DAISY)}}
}

type XBAR1_IN22_SELECT_INPUT uint32

type RXBAR1_IN22_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN22_SELECT_INPUT) LoadBits(mask XBAR1_IN22_SELECT_INPUT) XBAR1_IN22_SELECT_INPUT {
	return XBAR1_IN22_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN22_SELECT_INPUT) StoreBits(mask, b XBAR1_IN22_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN22_SELECT_INPUT) SetBits(mask XBAR1_IN22_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN22_SELECT_INPUT) ClearBits(mask XBAR1_IN22_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN22_SELECT_INPUT) Load() XBAR1_IN22_SELECT_INPUT {
	return XBAR1_IN22_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN22_SELECT_INPUT) Store(b XBAR1_IN22_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN22_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN22_SELECT_INPUT) Load() XBAR1_IN22_SELECT_INPUT {
	return XBAR1_IN22_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN22_SELECT_INPUT) Store(b XBAR1_IN22_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN22_DAISY_(p *Periph) RMXBAR1_IN22_SELECT_INPUT {
	return RMXBAR1_IN22_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN22_SELECT_INPUT.U32, uint32(XBAR1_IN22_DAISY)}}
}

type XBAR1_IN23_SELECT_INPUT uint32

type RXBAR1_IN23_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN23_SELECT_INPUT) LoadBits(mask XBAR1_IN23_SELECT_INPUT) XBAR1_IN23_SELECT_INPUT {
	return XBAR1_IN23_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN23_SELECT_INPUT) StoreBits(mask, b XBAR1_IN23_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN23_SELECT_INPUT) SetBits(mask XBAR1_IN23_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN23_SELECT_INPUT) ClearBits(mask XBAR1_IN23_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN23_SELECT_INPUT) Load() XBAR1_IN23_SELECT_INPUT {
	return XBAR1_IN23_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN23_SELECT_INPUT) Store(b XBAR1_IN23_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN23_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN23_SELECT_INPUT) Load() XBAR1_IN23_SELECT_INPUT {
	return XBAR1_IN23_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN23_SELECT_INPUT) Store(b XBAR1_IN23_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN23_DAISY_(p *Periph) RMXBAR1_IN23_SELECT_INPUT {
	return RMXBAR1_IN23_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN23_SELECT_INPUT.U32, uint32(XBAR1_IN23_DAISY)}}
}

type XBAR1_IN24_SELECT_INPUT uint32

type RXBAR1_IN24_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN24_SELECT_INPUT) LoadBits(mask XBAR1_IN24_SELECT_INPUT) XBAR1_IN24_SELECT_INPUT {
	return XBAR1_IN24_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN24_SELECT_INPUT) StoreBits(mask, b XBAR1_IN24_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN24_SELECT_INPUT) SetBits(mask XBAR1_IN24_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN24_SELECT_INPUT) ClearBits(mask XBAR1_IN24_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN24_SELECT_INPUT) Load() XBAR1_IN24_SELECT_INPUT {
	return XBAR1_IN24_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN24_SELECT_INPUT) Store(b XBAR1_IN24_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN24_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN24_SELECT_INPUT) Load() XBAR1_IN24_SELECT_INPUT {
	return XBAR1_IN24_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN24_SELECT_INPUT) Store(b XBAR1_IN24_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN24_DAISY_(p *Periph) RMXBAR1_IN24_SELECT_INPUT {
	return RMXBAR1_IN24_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN24_SELECT_INPUT.U32, uint32(XBAR1_IN24_DAISY)}}
}

type XBAR1_IN14_SELECT_INPUT uint32

type RXBAR1_IN14_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN14_SELECT_INPUT) LoadBits(mask XBAR1_IN14_SELECT_INPUT) XBAR1_IN14_SELECT_INPUT {
	return XBAR1_IN14_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN14_SELECT_INPUT) StoreBits(mask, b XBAR1_IN14_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN14_SELECT_INPUT) SetBits(mask XBAR1_IN14_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN14_SELECT_INPUT) ClearBits(mask XBAR1_IN14_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN14_SELECT_INPUT) Load() XBAR1_IN14_SELECT_INPUT {
	return XBAR1_IN14_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN14_SELECT_INPUT) Store(b XBAR1_IN14_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN14_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN14_SELECT_INPUT) Load() XBAR1_IN14_SELECT_INPUT {
	return XBAR1_IN14_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN14_SELECT_INPUT) Store(b XBAR1_IN14_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN14_DAISY_(p *Periph) RMXBAR1_IN14_SELECT_INPUT {
	return RMXBAR1_IN14_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN14_SELECT_INPUT.U32, uint32(XBAR1_IN14_DAISY)}}
}

type XBAR1_IN15_SELECT_INPUT uint32

type RXBAR1_IN15_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN15_SELECT_INPUT) LoadBits(mask XBAR1_IN15_SELECT_INPUT) XBAR1_IN15_SELECT_INPUT {
	return XBAR1_IN15_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN15_SELECT_INPUT) StoreBits(mask, b XBAR1_IN15_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN15_SELECT_INPUT) SetBits(mask XBAR1_IN15_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN15_SELECT_INPUT) ClearBits(mask XBAR1_IN15_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN15_SELECT_INPUT) Load() XBAR1_IN15_SELECT_INPUT {
	return XBAR1_IN15_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN15_SELECT_INPUT) Store(b XBAR1_IN15_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN15_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN15_SELECT_INPUT) Load() XBAR1_IN15_SELECT_INPUT {
	return XBAR1_IN15_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN15_SELECT_INPUT) Store(b XBAR1_IN15_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN15_DAISY_(p *Periph) RMXBAR1_IN15_SELECT_INPUT {
	return RMXBAR1_IN15_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN15_SELECT_INPUT.U32, uint32(XBAR1_IN15_DAISY)}}
}

type XBAR1_IN16_SELECT_INPUT uint32

type RXBAR1_IN16_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN16_SELECT_INPUT) LoadBits(mask XBAR1_IN16_SELECT_INPUT) XBAR1_IN16_SELECT_INPUT {
	return XBAR1_IN16_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN16_SELECT_INPUT) StoreBits(mask, b XBAR1_IN16_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN16_SELECT_INPUT) SetBits(mask XBAR1_IN16_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN16_SELECT_INPUT) ClearBits(mask XBAR1_IN16_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN16_SELECT_INPUT) Load() XBAR1_IN16_SELECT_INPUT {
	return XBAR1_IN16_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN16_SELECT_INPUT) Store(b XBAR1_IN16_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN16_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN16_SELECT_INPUT) Load() XBAR1_IN16_SELECT_INPUT {
	return XBAR1_IN16_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN16_SELECT_INPUT) Store(b XBAR1_IN16_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN16_DAISY_(p *Periph) RMXBAR1_IN16_SELECT_INPUT {
	return RMXBAR1_IN16_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN16_SELECT_INPUT.U32, uint32(XBAR1_IN16_DAISY)}}
}

type XBAR1_IN25_SELECT_INPUT uint32

type RXBAR1_IN25_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN25_SELECT_INPUT) LoadBits(mask XBAR1_IN25_SELECT_INPUT) XBAR1_IN25_SELECT_INPUT {
	return XBAR1_IN25_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN25_SELECT_INPUT) StoreBits(mask, b XBAR1_IN25_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN25_SELECT_INPUT) SetBits(mask XBAR1_IN25_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN25_SELECT_INPUT) ClearBits(mask XBAR1_IN25_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN25_SELECT_INPUT) Load() XBAR1_IN25_SELECT_INPUT {
	return XBAR1_IN25_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN25_SELECT_INPUT) Store(b XBAR1_IN25_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN25_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN25_SELECT_INPUT) Load() XBAR1_IN25_SELECT_INPUT {
	return XBAR1_IN25_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN25_SELECT_INPUT) Store(b XBAR1_IN25_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN25_DAISY_(p *Periph) RMXBAR1_IN25_SELECT_INPUT {
	return RMXBAR1_IN25_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN25_SELECT_INPUT.U32, uint32(XBAR1_IN25_DAISY)}}
}

type XBAR1_IN19_SELECT_INPUT uint32

type RXBAR1_IN19_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN19_SELECT_INPUT) LoadBits(mask XBAR1_IN19_SELECT_INPUT) XBAR1_IN19_SELECT_INPUT {
	return XBAR1_IN19_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN19_SELECT_INPUT) StoreBits(mask, b XBAR1_IN19_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN19_SELECT_INPUT) SetBits(mask XBAR1_IN19_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN19_SELECT_INPUT) ClearBits(mask XBAR1_IN19_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN19_SELECT_INPUT) Load() XBAR1_IN19_SELECT_INPUT {
	return XBAR1_IN19_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN19_SELECT_INPUT) Store(b XBAR1_IN19_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN19_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN19_SELECT_INPUT) Load() XBAR1_IN19_SELECT_INPUT {
	return XBAR1_IN19_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN19_SELECT_INPUT) Store(b XBAR1_IN19_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN19_DAISY_(p *Periph) RMXBAR1_IN19_SELECT_INPUT {
	return RMXBAR1_IN19_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN19_SELECT_INPUT.U32, uint32(XBAR1_IN19_DAISY)}}
}

type XBAR1_IN21_SELECT_INPUT uint32

type RXBAR1_IN21_SELECT_INPUT struct{ mmio.U32 }

func (r *RXBAR1_IN21_SELECT_INPUT) LoadBits(mask XBAR1_IN21_SELECT_INPUT) XBAR1_IN21_SELECT_INPUT {
	return XBAR1_IN21_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RXBAR1_IN21_SELECT_INPUT) StoreBits(mask, b XBAR1_IN21_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RXBAR1_IN21_SELECT_INPUT) SetBits(mask XBAR1_IN21_SELECT_INPUT) { r.U32.SetBits(uint32(mask)) }
func (r *RXBAR1_IN21_SELECT_INPUT) ClearBits(mask XBAR1_IN21_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RXBAR1_IN21_SELECT_INPUT) Load() XBAR1_IN21_SELECT_INPUT {
	return XBAR1_IN21_SELECT_INPUT(r.U32.Load())
}
func (r *RXBAR1_IN21_SELECT_INPUT) Store(b XBAR1_IN21_SELECT_INPUT) { r.U32.Store(uint32(b)) }

type RMXBAR1_IN21_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMXBAR1_IN21_SELECT_INPUT) Load() XBAR1_IN21_SELECT_INPUT {
	return XBAR1_IN21_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMXBAR1_IN21_SELECT_INPUT) Store(b XBAR1_IN21_SELECT_INPUT) { rm.UM32.Store(uint32(b)) }

func XBAR1_IN21_DAISY_(p *Periph) RMXBAR1_IN21_SELECT_INPUT {
	return RMXBAR1_IN21_SELECT_INPUT{mmio.UM32{&p.XBAR1_IN21_SELECT_INPUT.U32, uint32(XBAR1_IN21_DAISY)}}
}

type ENET2_IPG_CLK_RMII_SELECT_INPUT uint32

type RENET2_IPG_CLK_RMII_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET2_IPG_CLK_RMII_SELECT_INPUT) LoadBits(mask ENET2_IPG_CLK_RMII_SELECT_INPUT) ENET2_IPG_CLK_RMII_SELECT_INPUT {
	return ENET2_IPG_CLK_RMII_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET2_IPG_CLK_RMII_SELECT_INPUT) StoreBits(mask, b ENET2_IPG_CLK_RMII_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET2_IPG_CLK_RMII_SELECT_INPUT) SetBits(mask ENET2_IPG_CLK_RMII_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET2_IPG_CLK_RMII_SELECT_INPUT) ClearBits(mask ENET2_IPG_CLK_RMII_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET2_IPG_CLK_RMII_SELECT_INPUT) Load() ENET2_IPG_CLK_RMII_SELECT_INPUT {
	return ENET2_IPG_CLK_RMII_SELECT_INPUT(r.U32.Load())
}
func (r *RENET2_IPG_CLK_RMII_SELECT_INPUT) Store(b ENET2_IPG_CLK_RMII_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMENET2_IPG_CLK_RMII_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET2_IPG_CLK_RMII_SELECT_INPUT) Load() ENET2_IPG_CLK_RMII_SELECT_INPUT {
	return ENET2_IPG_CLK_RMII_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET2_IPG_CLK_RMII_SELECT_INPUT) Store(b ENET2_IPG_CLK_RMII_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func ENET2_IPG_CLK_RMII_DAISY_(p *Periph) RMENET2_IPG_CLK_RMII_SELECT_INPUT {
	return RMENET2_IPG_CLK_RMII_SELECT_INPUT{mmio.UM32{&p.ENET2_IPG_CLK_RMII_SELECT_INPUT.U32, uint32(ENET2_IPG_CLK_RMII_DAISY)}}
}

type ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT uint32

type RENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) LoadBits(mask ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) StoreBits(mask, b ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) SetBits(mask ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) ClearBits(mask ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) Load() ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT(r.U32.Load())
}
func (r *RENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) Store(b ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) Load() ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) Store(b ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func ENET2_IPP_IND_MAC0_MDIO_DAISY_(p *Periph) RMENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT {
	return RMENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT{mmio.UM32{&p.ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT.U32, uint32(ENET2_IPP_IND_MAC0_MDIO_DAISY)}}
}

type ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0 uint32

type RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0 struct{ mmio.U32 }

func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) LoadBits(mask ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0 {
	return ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) StoreBits(mask, b ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) SetBits(mask ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) ClearBits(mask ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) Load() ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0 {
	return ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0(r.U32.Load())
}
func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) Store(b ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) {
	r.U32.Store(uint32(b))
}

type RMENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0 struct{ mmio.UM32 }

func (rm RMENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) Load() ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0 {
	return ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0(rm.UM32.Load())
}
func (rm RMENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) Store(b ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0) {
	rm.UM32.Store(uint32(b))
}

func ENET2_IPP_IND_MAC0_RXDATA_DAISY_0_(p *Periph) RMENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0 {
	return RMENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0{mmio.UM32{&p.ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_0.U32, uint32(ENET2_IPP_IND_MAC0_RXDATA_DAISY_0)}}
}

type ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1 uint32

type RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1 struct{ mmio.U32 }

func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) LoadBits(mask ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1 {
	return ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) StoreBits(mask, b ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) SetBits(mask ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) ClearBits(mask ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) Load() ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1 {
	return ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1(r.U32.Load())
}
func (r *RENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) Store(b ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) {
	r.U32.Store(uint32(b))
}

type RMENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1 struct{ mmio.UM32 }

func (rm RMENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) Load() ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1 {
	return ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1(rm.UM32.Load())
}
func (rm RMENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) Store(b ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1) {
	rm.UM32.Store(uint32(b))
}

func ENET2_IPP_IND_MAC0_RXDATA_DAISY_1_(p *Periph) RMENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1 {
	return RMENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1{mmio.UM32{&p.ENET2_IPP_IND_MAC0_RXDATA_SELECT_INPUT_1.U32, uint32(ENET2_IPP_IND_MAC0_RXDATA_DAISY_1)}}
}

type ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT uint32

type RENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) LoadBits(mask ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) StoreBits(mask, b ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) SetBits(mask ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) ClearBits(mask ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) Load() ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT(r.U32.Load())
}
func (r *RENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) Store(b ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) Load() ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) Store(b ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func ENET2_IPP_IND_MAC0_RXEN_DAISY_(p *Periph) RMENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT {
	return RMENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT{mmio.UM32{&p.ENET2_IPP_IND_MAC0_RXEN_SELECT_INPUT.U32, uint32(ENET2_IPP_IND_MAC0_RXEN_DAISY)}}
}

type ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT uint32

type RENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) LoadBits(mask ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) StoreBits(mask, b ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) SetBits(mask ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) ClearBits(mask ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) Load() ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT(r.U32.Load())
}
func (r *RENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) Store(b ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) Load() ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) Store(b ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func ENET2_IPP_IND_MAC0_RXERR_DAISY_(p *Periph) RMENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT {
	return RMENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT{mmio.UM32{&p.ENET2_IPP_IND_MAC0_RXERR_SELECT_INPUT.U32, uint32(ENET2_IPP_IND_MAC0_RXERR_DAISY)}}
}

type ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0 uint32

type RENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0 struct{ mmio.U32 }

func (r *RENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) LoadBits(mask ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0 {
	return ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) StoreBits(mask, b ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) SetBits(mask ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) ClearBits(mask ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) Load() ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0 {
	return ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0(r.U32.Load())
}
func (r *RENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) Store(b ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) {
	r.U32.Store(uint32(b))
}

type RMENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0 struct{ mmio.UM32 }

func (rm RMENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) Load() ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0 {
	return ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0(rm.UM32.Load())
}
func (rm RMENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) Store(b ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0) {
	rm.UM32.Store(uint32(b))
}

func ENET2_IPP_IND_MAC0_TIMER_DAISY_0_(p *Periph) RMENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0 {
	return RMENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0{mmio.UM32{&p.ENET2_IPP_IND_MAC0_TIMER_SELECT_INPUT_0.U32, uint32(ENET2_IPP_IND_MAC0_TIMER_DAISY_0)}}
}

type ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT uint32

type RENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT struct{ mmio.U32 }

func (r *RENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) LoadBits(mask ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) StoreBits(mask, b ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) SetBits(mask ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) ClearBits(mask ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) Load() ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT(r.U32.Load())
}
func (r *RENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) Store(b ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) Load() ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT {
	return ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) Store(b ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func ENET2_IPP_IND_MAC0_TXCLK_DAISY_(p *Periph) RMENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT {
	return RMENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT{mmio.UM32{&p.ENET2_IPP_IND_MAC0_TXCLK_SELECT_INPUT.U32, uint32(ENET2_IPP_IND_MAC0_TXCLK_DAISY)}}
}

type FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_DQS_FA_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_DQS_FA_DAISY)}}
}

type FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_IO_FA_BIT0_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_IO_FA_BIT0_DAISY)}}
}

type FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_IO_FA_BIT1_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_IO_FA_BIT1_DAISY)}}
}

type FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_IO_FA_BIT2_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_IO_FA_BIT2_DAISY)}}
}

type FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_IO_FA_BIT3_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_IO_FA_BIT3_DAISY)}}
}

type FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_IO_FB_BIT0_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_IO_FB_BIT0_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_IO_FB_BIT0_DAISY)}}
}

type FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_IO_FB_BIT1_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_IO_FB_BIT1_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_IO_FB_BIT1_DAISY)}}
}

type FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_IO_FB_BIT2_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_IO_FB_BIT2_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_IO_FB_BIT2_DAISY)}}
}

type FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_IO_FB_BIT3_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_IO_FB_BIT3_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_IO_FB_BIT3_DAISY)}}
}

type FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_SCK_FA_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_SCK_FA_DAISY)}}
}

type FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT uint32

type RFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT struct{ mmio.U32 }

func (r *RFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) LoadBits(mask FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) StoreBits(mask, b FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) SetBits(mask FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) ClearBits(mask FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT(r.U32.Load())
}
func (r *RFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) Load() FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT {
	return FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) Store(b FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func FLEXSPI2_IPP_IND_SCK_FB_DAISY_(p *Periph) RMFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT {
	return RMFLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT{mmio.UM32{&p.FLEXSPI2_IPP_IND_SCK_FB_SELECT_INPUT.U32, uint32(FLEXSPI2_IPP_IND_SCK_FB_DAISY)}}
}

type GPT1_IPP_IND_CAPIN1_SELECT_INPUT uint32

type RGPT1_IPP_IND_CAPIN1_SELECT_INPUT struct{ mmio.U32 }

func (r *RGPT1_IPP_IND_CAPIN1_SELECT_INPUT) LoadBits(mask GPT1_IPP_IND_CAPIN1_SELECT_INPUT) GPT1_IPP_IND_CAPIN1_SELECT_INPUT {
	return GPT1_IPP_IND_CAPIN1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RGPT1_IPP_IND_CAPIN1_SELECT_INPUT) StoreBits(mask, b GPT1_IPP_IND_CAPIN1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RGPT1_IPP_IND_CAPIN1_SELECT_INPUT) SetBits(mask GPT1_IPP_IND_CAPIN1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RGPT1_IPP_IND_CAPIN1_SELECT_INPUT) ClearBits(mask GPT1_IPP_IND_CAPIN1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RGPT1_IPP_IND_CAPIN1_SELECT_INPUT) Load() GPT1_IPP_IND_CAPIN1_SELECT_INPUT {
	return GPT1_IPP_IND_CAPIN1_SELECT_INPUT(r.U32.Load())
}
func (r *RGPT1_IPP_IND_CAPIN1_SELECT_INPUT) Store(b GPT1_IPP_IND_CAPIN1_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMGPT1_IPP_IND_CAPIN1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMGPT1_IPP_IND_CAPIN1_SELECT_INPUT) Load() GPT1_IPP_IND_CAPIN1_SELECT_INPUT {
	return GPT1_IPP_IND_CAPIN1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMGPT1_IPP_IND_CAPIN1_SELECT_INPUT) Store(b GPT1_IPP_IND_CAPIN1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func GPT1_IPP_IND_CAPIN1_DAISY_(p *Periph) RMGPT1_IPP_IND_CAPIN1_SELECT_INPUT {
	return RMGPT1_IPP_IND_CAPIN1_SELECT_INPUT{mmio.UM32{&p.GPT1_IPP_IND_CAPIN1_SELECT_INPUT.U32, uint32(GPT1_IPP_IND_CAPIN1_DAISY)}}
}

type GPT1_IPP_IND_CAPIN2_SELECT_INPUT uint32

type RGPT1_IPP_IND_CAPIN2_SELECT_INPUT struct{ mmio.U32 }

func (r *RGPT1_IPP_IND_CAPIN2_SELECT_INPUT) LoadBits(mask GPT1_IPP_IND_CAPIN2_SELECT_INPUT) GPT1_IPP_IND_CAPIN2_SELECT_INPUT {
	return GPT1_IPP_IND_CAPIN2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RGPT1_IPP_IND_CAPIN2_SELECT_INPUT) StoreBits(mask, b GPT1_IPP_IND_CAPIN2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RGPT1_IPP_IND_CAPIN2_SELECT_INPUT) SetBits(mask GPT1_IPP_IND_CAPIN2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RGPT1_IPP_IND_CAPIN2_SELECT_INPUT) ClearBits(mask GPT1_IPP_IND_CAPIN2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RGPT1_IPP_IND_CAPIN2_SELECT_INPUT) Load() GPT1_IPP_IND_CAPIN2_SELECT_INPUT {
	return GPT1_IPP_IND_CAPIN2_SELECT_INPUT(r.U32.Load())
}
func (r *RGPT1_IPP_IND_CAPIN2_SELECT_INPUT) Store(b GPT1_IPP_IND_CAPIN2_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMGPT1_IPP_IND_CAPIN2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMGPT1_IPP_IND_CAPIN2_SELECT_INPUT) Load() GPT1_IPP_IND_CAPIN2_SELECT_INPUT {
	return GPT1_IPP_IND_CAPIN2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMGPT1_IPP_IND_CAPIN2_SELECT_INPUT) Store(b GPT1_IPP_IND_CAPIN2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func GPT1_IPP_IND_CAPIN2_DAISY_(p *Periph) RMGPT1_IPP_IND_CAPIN2_SELECT_INPUT {
	return RMGPT1_IPP_IND_CAPIN2_SELECT_INPUT{mmio.UM32{&p.GPT1_IPP_IND_CAPIN2_SELECT_INPUT.U32, uint32(GPT1_IPP_IND_CAPIN2_DAISY)}}
}

type GPT1_IPP_IND_CLKIN_SELECT_INPUT uint32

type RGPT1_IPP_IND_CLKIN_SELECT_INPUT struct{ mmio.U32 }

func (r *RGPT1_IPP_IND_CLKIN_SELECT_INPUT) LoadBits(mask GPT1_IPP_IND_CLKIN_SELECT_INPUT) GPT1_IPP_IND_CLKIN_SELECT_INPUT {
	return GPT1_IPP_IND_CLKIN_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RGPT1_IPP_IND_CLKIN_SELECT_INPUT) StoreBits(mask, b GPT1_IPP_IND_CLKIN_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RGPT1_IPP_IND_CLKIN_SELECT_INPUT) SetBits(mask GPT1_IPP_IND_CLKIN_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RGPT1_IPP_IND_CLKIN_SELECT_INPUT) ClearBits(mask GPT1_IPP_IND_CLKIN_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RGPT1_IPP_IND_CLKIN_SELECT_INPUT) Load() GPT1_IPP_IND_CLKIN_SELECT_INPUT {
	return GPT1_IPP_IND_CLKIN_SELECT_INPUT(r.U32.Load())
}
func (r *RGPT1_IPP_IND_CLKIN_SELECT_INPUT) Store(b GPT1_IPP_IND_CLKIN_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMGPT1_IPP_IND_CLKIN_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMGPT1_IPP_IND_CLKIN_SELECT_INPUT) Load() GPT1_IPP_IND_CLKIN_SELECT_INPUT {
	return GPT1_IPP_IND_CLKIN_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMGPT1_IPP_IND_CLKIN_SELECT_INPUT) Store(b GPT1_IPP_IND_CLKIN_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func GPT1_IPP_IND_CLKIN_DAISY_(p *Periph) RMGPT1_IPP_IND_CLKIN_SELECT_INPUT {
	return RMGPT1_IPP_IND_CLKIN_SELECT_INPUT{mmio.UM32{&p.GPT1_IPP_IND_CLKIN_SELECT_INPUT.U32, uint32(GPT1_IPP_IND_CLKIN_DAISY)}}
}

type GPT2_IPP_IND_CAPIN1_SELECT_INPUT uint32

type RGPT2_IPP_IND_CAPIN1_SELECT_INPUT struct{ mmio.U32 }

func (r *RGPT2_IPP_IND_CAPIN1_SELECT_INPUT) LoadBits(mask GPT2_IPP_IND_CAPIN1_SELECT_INPUT) GPT2_IPP_IND_CAPIN1_SELECT_INPUT {
	return GPT2_IPP_IND_CAPIN1_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RGPT2_IPP_IND_CAPIN1_SELECT_INPUT) StoreBits(mask, b GPT2_IPP_IND_CAPIN1_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RGPT2_IPP_IND_CAPIN1_SELECT_INPUT) SetBits(mask GPT2_IPP_IND_CAPIN1_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RGPT2_IPP_IND_CAPIN1_SELECT_INPUT) ClearBits(mask GPT2_IPP_IND_CAPIN1_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RGPT2_IPP_IND_CAPIN1_SELECT_INPUT) Load() GPT2_IPP_IND_CAPIN1_SELECT_INPUT {
	return GPT2_IPP_IND_CAPIN1_SELECT_INPUT(r.U32.Load())
}
func (r *RGPT2_IPP_IND_CAPIN1_SELECT_INPUT) Store(b GPT2_IPP_IND_CAPIN1_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMGPT2_IPP_IND_CAPIN1_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMGPT2_IPP_IND_CAPIN1_SELECT_INPUT) Load() GPT2_IPP_IND_CAPIN1_SELECT_INPUT {
	return GPT2_IPP_IND_CAPIN1_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMGPT2_IPP_IND_CAPIN1_SELECT_INPUT) Store(b GPT2_IPP_IND_CAPIN1_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func GPT2_IPP_IND_CAPIN1_DAISY_(p *Periph) RMGPT2_IPP_IND_CAPIN1_SELECT_INPUT {
	return RMGPT2_IPP_IND_CAPIN1_SELECT_INPUT{mmio.UM32{&p.GPT2_IPP_IND_CAPIN1_SELECT_INPUT.U32, uint32(GPT2_IPP_IND_CAPIN1_DAISY)}}
}

type GPT2_IPP_IND_CAPIN2_SELECT_INPUT uint32

type RGPT2_IPP_IND_CAPIN2_SELECT_INPUT struct{ mmio.U32 }

func (r *RGPT2_IPP_IND_CAPIN2_SELECT_INPUT) LoadBits(mask GPT2_IPP_IND_CAPIN2_SELECT_INPUT) GPT2_IPP_IND_CAPIN2_SELECT_INPUT {
	return GPT2_IPP_IND_CAPIN2_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RGPT2_IPP_IND_CAPIN2_SELECT_INPUT) StoreBits(mask, b GPT2_IPP_IND_CAPIN2_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RGPT2_IPP_IND_CAPIN2_SELECT_INPUT) SetBits(mask GPT2_IPP_IND_CAPIN2_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RGPT2_IPP_IND_CAPIN2_SELECT_INPUT) ClearBits(mask GPT2_IPP_IND_CAPIN2_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RGPT2_IPP_IND_CAPIN2_SELECT_INPUT) Load() GPT2_IPP_IND_CAPIN2_SELECT_INPUT {
	return GPT2_IPP_IND_CAPIN2_SELECT_INPUT(r.U32.Load())
}
func (r *RGPT2_IPP_IND_CAPIN2_SELECT_INPUT) Store(b GPT2_IPP_IND_CAPIN2_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMGPT2_IPP_IND_CAPIN2_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMGPT2_IPP_IND_CAPIN2_SELECT_INPUT) Load() GPT2_IPP_IND_CAPIN2_SELECT_INPUT {
	return GPT2_IPP_IND_CAPIN2_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMGPT2_IPP_IND_CAPIN2_SELECT_INPUT) Store(b GPT2_IPP_IND_CAPIN2_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func GPT2_IPP_IND_CAPIN2_DAISY_(p *Periph) RMGPT2_IPP_IND_CAPIN2_SELECT_INPUT {
	return RMGPT2_IPP_IND_CAPIN2_SELECT_INPUT{mmio.UM32{&p.GPT2_IPP_IND_CAPIN2_SELECT_INPUT.U32, uint32(GPT2_IPP_IND_CAPIN2_DAISY)}}
}

type GPT2_IPP_IND_CLKIN_SELECT_INPUT uint32

type RGPT2_IPP_IND_CLKIN_SELECT_INPUT struct{ mmio.U32 }

func (r *RGPT2_IPP_IND_CLKIN_SELECT_INPUT) LoadBits(mask GPT2_IPP_IND_CLKIN_SELECT_INPUT) GPT2_IPP_IND_CLKIN_SELECT_INPUT {
	return GPT2_IPP_IND_CLKIN_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RGPT2_IPP_IND_CLKIN_SELECT_INPUT) StoreBits(mask, b GPT2_IPP_IND_CLKIN_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RGPT2_IPP_IND_CLKIN_SELECT_INPUT) SetBits(mask GPT2_IPP_IND_CLKIN_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RGPT2_IPP_IND_CLKIN_SELECT_INPUT) ClearBits(mask GPT2_IPP_IND_CLKIN_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RGPT2_IPP_IND_CLKIN_SELECT_INPUT) Load() GPT2_IPP_IND_CLKIN_SELECT_INPUT {
	return GPT2_IPP_IND_CLKIN_SELECT_INPUT(r.U32.Load())
}
func (r *RGPT2_IPP_IND_CLKIN_SELECT_INPUT) Store(b GPT2_IPP_IND_CLKIN_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMGPT2_IPP_IND_CLKIN_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMGPT2_IPP_IND_CLKIN_SELECT_INPUT) Load() GPT2_IPP_IND_CLKIN_SELECT_INPUT {
	return GPT2_IPP_IND_CLKIN_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMGPT2_IPP_IND_CLKIN_SELECT_INPUT) Store(b GPT2_IPP_IND_CLKIN_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func GPT2_IPP_IND_CLKIN_DAISY_(p *Periph) RMGPT2_IPP_IND_CLKIN_SELECT_INPUT {
	return RMGPT2_IPP_IND_CLKIN_SELECT_INPUT{mmio.UM32{&p.GPT2_IPP_IND_CLKIN_SELECT_INPUT.U32, uint32(GPT2_IPP_IND_CLKIN_DAISY)}}
}

type SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2 uint32

type RSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2 struct{ mmio.U32 }

func (r *RSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) LoadBits(mask SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2 {
	return SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) StoreBits(mask, b SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) SetBits(mask SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) ClearBits(mask SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) Load() SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2 {
	return SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2(r.U32.Load())
}
func (r *RSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) Store(b SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) {
	r.U32.Store(uint32(b))
}

type RMSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2 struct{ mmio.UM32 }

func (rm RMSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) Load() SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2 {
	return SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2(rm.UM32.Load())
}
func (rm RMSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) Store(b SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2) {
	rm.UM32.Store(uint32(b))
}

func DAISY_(p *Periph) RMSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2 {
	return RMSAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2{mmio.UM32{&p.SAI3_IPG_CLK_SAI_MCLK_SELECT_INPUT_2.U32, uint32(DAISY)}}
}

type SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT uint32

type RSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) LoadBits(mask SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) StoreBits(mask, b SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) SetBits(mask SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) ClearBits(mask SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) Load() SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) Store(b SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) Load() SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) Store(b SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func SAI3_IPP_IND_SAI_RXBCLK_DAISY_(p *Periph) RMSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT {
	return RMSAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT{mmio.UM32{&p.SAI3_IPP_IND_SAI_RXBCLK_SELECT_INPUT.U32, uint32(SAI3_IPP_IND_SAI_RXBCLK_DAISY)}}
}

type SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 uint32

type RSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 struct{ mmio.U32 }

func (r *RSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) LoadBits(mask SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 {
	return SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) StoreBits(mask, b SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) SetBits(mask SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) ClearBits(mask SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) Load() SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 {
	return SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0(r.U32.Load())
}
func (r *RSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) Store(b SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) {
	r.U32.Store(uint32(b))
}

type RMSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 struct{ mmio.UM32 }

func (rm RMSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) Load() SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 {
	return SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0(rm.UM32.Load())
}
func (rm RMSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) Store(b SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0) {
	rm.UM32.Store(uint32(b))
}

func SAI3_IPP_IND_SAI_RXDATA_DAISY_0_(p *Periph) RMSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 {
	return RMSAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0{mmio.UM32{&p.SAI3_IPP_IND_SAI_RXDATA_SELECT_INPUT_0.U32, uint32(SAI3_IPP_IND_SAI_RXDATA_DAISY_0)}}
}

type SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT uint32

type RSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) LoadBits(mask SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) StoreBits(mask, b SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) SetBits(mask SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) ClearBits(mask SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) Load() SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) Store(b SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) Load() SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) Store(b SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func SAI3_IPP_IND_SAI_RXSYNC_DAISY_(p *Periph) RMSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT {
	return RMSAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT{mmio.UM32{&p.SAI3_IPP_IND_SAI_RXSYNC_SELECT_INPUT.U32, uint32(SAI3_IPP_IND_SAI_RXSYNC_DAISY)}}
}

type SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT uint32

type RSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) LoadBits(mask SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) StoreBits(mask, b SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) SetBits(mask SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) ClearBits(mask SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) Load() SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) Store(b SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) Load() SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) Store(b SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func SAI3_IPP_IND_SAI_TXBCLK_DAISY_(p *Periph) RMSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT {
	return RMSAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT{mmio.UM32{&p.SAI3_IPP_IND_SAI_TXBCLK_SELECT_INPUT.U32, uint32(SAI3_IPP_IND_SAI_TXBCLK_DAISY)}}
}

type SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT uint32

type RSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT struct{ mmio.U32 }

func (r *RSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) LoadBits(mask SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) StoreBits(mask, b SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) SetBits(mask SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) ClearBits(mask SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) Load() SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT(r.U32.Load())
}
func (r *RSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) Store(b SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) Load() SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT {
	return SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) Store(b SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func SAI3_IPP_IND_SAI_TXSYNC_DAISY_(p *Periph) RMSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT {
	return RMSAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT{mmio.UM32{&p.SAI3_IPP_IND_SAI_TXSYNC_SELECT_INPUT.U32, uint32(SAI3_IPP_IND_SAI_TXSYNC_DAISY)}}
}

type SEMC_I_IPP_IND_DQS4_SELECT_INPUT uint32

type RSEMC_I_IPP_IND_DQS4_SELECT_INPUT struct{ mmio.U32 }

func (r *RSEMC_I_IPP_IND_DQS4_SELECT_INPUT) LoadBits(mask SEMC_I_IPP_IND_DQS4_SELECT_INPUT) SEMC_I_IPP_IND_DQS4_SELECT_INPUT {
	return SEMC_I_IPP_IND_DQS4_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RSEMC_I_IPP_IND_DQS4_SELECT_INPUT) StoreBits(mask, b SEMC_I_IPP_IND_DQS4_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RSEMC_I_IPP_IND_DQS4_SELECT_INPUT) SetBits(mask SEMC_I_IPP_IND_DQS4_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RSEMC_I_IPP_IND_DQS4_SELECT_INPUT) ClearBits(mask SEMC_I_IPP_IND_DQS4_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RSEMC_I_IPP_IND_DQS4_SELECT_INPUT) Load() SEMC_I_IPP_IND_DQS4_SELECT_INPUT {
	return SEMC_I_IPP_IND_DQS4_SELECT_INPUT(r.U32.Load())
}
func (r *RSEMC_I_IPP_IND_DQS4_SELECT_INPUT) Store(b SEMC_I_IPP_IND_DQS4_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMSEMC_I_IPP_IND_DQS4_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMSEMC_I_IPP_IND_DQS4_SELECT_INPUT) Load() SEMC_I_IPP_IND_DQS4_SELECT_INPUT {
	return SEMC_I_IPP_IND_DQS4_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMSEMC_I_IPP_IND_DQS4_SELECT_INPUT) Store(b SEMC_I_IPP_IND_DQS4_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func SEMC_I_IPP_IND_DQS4_DAISY_(p *Periph) RMSEMC_I_IPP_IND_DQS4_SELECT_INPUT {
	return RMSEMC_I_IPP_IND_DQS4_SELECT_INPUT{mmio.UM32{&p.SEMC_I_IPP_IND_DQS4_SELECT_INPUT.U32, uint32(SEMC_I_IPP_IND_DQS4_DAISY)}}
}

type CANFD_IPP_IND_CANRX_SELECT_INPUT uint32

type RCANFD_IPP_IND_CANRX_SELECT_INPUT struct{ mmio.U32 }

func (r *RCANFD_IPP_IND_CANRX_SELECT_INPUT) LoadBits(mask CANFD_IPP_IND_CANRX_SELECT_INPUT) CANFD_IPP_IND_CANRX_SELECT_INPUT {
	return CANFD_IPP_IND_CANRX_SELECT_INPUT(r.U32.LoadBits(uint32(mask)))
}
func (r *RCANFD_IPP_IND_CANRX_SELECT_INPUT) StoreBits(mask, b CANFD_IPP_IND_CANRX_SELECT_INPUT) {
	r.U32.StoreBits(uint32(mask), uint32(b))
}
func (r *RCANFD_IPP_IND_CANRX_SELECT_INPUT) SetBits(mask CANFD_IPP_IND_CANRX_SELECT_INPUT) {
	r.U32.SetBits(uint32(mask))
}
func (r *RCANFD_IPP_IND_CANRX_SELECT_INPUT) ClearBits(mask CANFD_IPP_IND_CANRX_SELECT_INPUT) {
	r.U32.ClearBits(uint32(mask))
}
func (r *RCANFD_IPP_IND_CANRX_SELECT_INPUT) Load() CANFD_IPP_IND_CANRX_SELECT_INPUT {
	return CANFD_IPP_IND_CANRX_SELECT_INPUT(r.U32.Load())
}
func (r *RCANFD_IPP_IND_CANRX_SELECT_INPUT) Store(b CANFD_IPP_IND_CANRX_SELECT_INPUT) {
	r.U32.Store(uint32(b))
}

type RMCANFD_IPP_IND_CANRX_SELECT_INPUT struct{ mmio.UM32 }

func (rm RMCANFD_IPP_IND_CANRX_SELECT_INPUT) Load() CANFD_IPP_IND_CANRX_SELECT_INPUT {
	return CANFD_IPP_IND_CANRX_SELECT_INPUT(rm.UM32.Load())
}
func (rm RMCANFD_IPP_IND_CANRX_SELECT_INPUT) Store(b CANFD_IPP_IND_CANRX_SELECT_INPUT) {
	rm.UM32.Store(uint32(b))
}

func CANFD_IPP_IND_CANRX_DAISY_(p *Periph) RMCANFD_IPP_IND_CANRX_SELECT_INPUT {
	return RMCANFD_IPP_IND_CANRX_SELECT_INPUT{mmio.UM32{&p.CANFD_IPP_IND_CANRX_SELECT_INPUT.U32, uint32(CANFD_IPP_IND_CANRX_DAISY)}}
}
