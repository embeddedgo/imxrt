// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build imxrt1060

// Package tempmon provides access to the registers of the TEMPMON peripheral.
//
// Instances:
//  TEMPMON  TEMPMON_BASE  -  TEMP_LOW_HIGH*,TEMP_PANIC*  Temperature Monitor
// Registers:
//  0x180 32  TEMPSENSE0      Tempsensor Control Register 0
//  0x184 32  TEMPSENSE0_SET  Tempsensor Control Register 0
//  0x188 32  TEMPSENSE0_CLR  Tempsensor Control Register 0
//  0x18C 32  TEMPSENSE0_TOG  Tempsensor Control Register 0
//  0x190 32  TEMPSENSE1      Tempsensor Control Register 1
//  0x194 32  TEMPSENSE1_SET  Tempsensor Control Register 1
//  0x198 32  TEMPSENSE1_CLR  Tempsensor Control Register 1
//  0x19C 32  TEMPSENSE1_TOG  Tempsensor Control Register 1
//  0x290 32  TEMPSENSE2      Tempsensor Control Register 2
//  0x294 32  TEMPSENSE2_SET  Tempsensor Control Register 2
//  0x298 32  TEMPSENSE2_CLR  Tempsensor Control Register 2
//  0x29C 32  TEMPSENSE2_TOG  Tempsensor Control Register 2
// Import:
//  github.com/embeddedgo/imxrt/p/mmap
package tempmon

const (
	POWER_DOWN   TEMPSENSE0 = 0x01 << 0   //+ This bit powers down the temperature sensor.
	POWER_UP     TEMPSENSE0 = 0x00 << 0   //  Enable power to the temperature sensor.
	POWER_DOWN   TEMPSENSE0 = 0x01 << 0   //  Power down the temperature sensor.
	MEASURE_TEMP TEMPSENSE0 = 0x01 << 1   //+ Starts the measurement process
	STOP         TEMPSENSE0 = 0x00 << 1   //  Do not start the measurement process.
	START        TEMPSENSE0 = 0x01 << 1   //  Start the measurement process.
	FINISHED     TEMPSENSE0 = 0x01 << 2   //+ Indicates that the latest temp is valid
	INVALID      TEMPSENSE0 = 0x00 << 2   //  Last measurement is not ready yet.
	VALID        TEMPSENSE0 = 0x01 << 2   //  Last measurement is valid.
	TEMP_CNT     TEMPSENSE0 = 0xFFF << 8  //+ This bit field contains the last measured temperature count.
	ALARM_VALUE  TEMPSENSE0 = 0xFFF << 20 //+ This bit field contains the temperature count (raw sensor output) that will generate a high alarm when TEMP_CNT is smaller than this field
)

const (
	POWER_DOWNn   = 0
	MEASURE_TEMPn = 1
	FINISHEDn     = 2
	TEMP_CNTn     = 8
	ALARM_VALUEn  = 20
)

const (
	POWER_DOWN   TEMPSENSE0_SET = 0x01 << 0   //+ This bit powers down the temperature sensor.
	POWER_UP     TEMPSENSE0_SET = 0x00 << 0   //  Enable power to the temperature sensor.
	POWER_DOWN   TEMPSENSE0_SET = 0x01 << 0   //  Power down the temperature sensor.
	MEASURE_TEMP TEMPSENSE0_SET = 0x01 << 1   //+ Starts the measurement process
	STOP         TEMPSENSE0_SET = 0x00 << 1   //  Do not start the measurement process.
	START        TEMPSENSE0_SET = 0x01 << 1   //  Start the measurement process.
	FINISHED     TEMPSENSE0_SET = 0x01 << 2   //+ Indicates that the latest temp is valid
	INVALID      TEMPSENSE0_SET = 0x00 << 2   //  Last measurement is not ready yet.
	VALID        TEMPSENSE0_SET = 0x01 << 2   //  Last measurement is valid.
	TEMP_CNT     TEMPSENSE0_SET = 0xFFF << 8  //+ This bit field contains the last measured temperature count.
	ALARM_VALUE  TEMPSENSE0_SET = 0xFFF << 20 //+ This bit field contains the temperature count (raw sensor output) that will generate a high alarm when TEMP_CNT is smaller than this field
)

const (
	POWER_DOWNn   = 0
	MEASURE_TEMPn = 1
	FINISHEDn     = 2
	TEMP_CNTn     = 8
	ALARM_VALUEn  = 20
)

const (
	POWER_DOWN   TEMPSENSE0_CLR = 0x01 << 0   //+ This bit powers down the temperature sensor.
	POWER_UP     TEMPSENSE0_CLR = 0x00 << 0   //  Enable power to the temperature sensor.
	POWER_DOWN   TEMPSENSE0_CLR = 0x01 << 0   //  Power down the temperature sensor.
	MEASURE_TEMP TEMPSENSE0_CLR = 0x01 << 1   //+ Starts the measurement process
	STOP         TEMPSENSE0_CLR = 0x00 << 1   //  Do not start the measurement process.
	START        TEMPSENSE0_CLR = 0x01 << 1   //  Start the measurement process.
	FINISHED     TEMPSENSE0_CLR = 0x01 << 2   //+ Indicates that the latest temp is valid
	INVALID      TEMPSENSE0_CLR = 0x00 << 2   //  Last measurement is not ready yet.
	VALID        TEMPSENSE0_CLR = 0x01 << 2   //  Last measurement is valid.
	TEMP_CNT     TEMPSENSE0_CLR = 0xFFF << 8  //+ This bit field contains the last measured temperature count.
	ALARM_VALUE  TEMPSENSE0_CLR = 0xFFF << 20 //+ This bit field contains the temperature count (raw sensor output) that will generate a high alarm when TEMP_CNT is smaller than this field
)

const (
	POWER_DOWNn   = 0
	MEASURE_TEMPn = 1
	FINISHEDn     = 2
	TEMP_CNTn     = 8
	ALARM_VALUEn  = 20
)

const (
	POWER_DOWN   TEMPSENSE0_TOG = 0x01 << 0   //+ This bit powers down the temperature sensor.
	POWER_UP     TEMPSENSE0_TOG = 0x00 << 0   //  Enable power to the temperature sensor.
	POWER_DOWN   TEMPSENSE0_TOG = 0x01 << 0   //  Power down the temperature sensor.
	MEASURE_TEMP TEMPSENSE0_TOG = 0x01 << 1   //+ Starts the measurement process
	STOP         TEMPSENSE0_TOG = 0x00 << 1   //  Do not start the measurement process.
	START        TEMPSENSE0_TOG = 0x01 << 1   //  Start the measurement process.
	FINISHED     TEMPSENSE0_TOG = 0x01 << 2   //+ Indicates that the latest temp is valid
	INVALID      TEMPSENSE0_TOG = 0x00 << 2   //  Last measurement is not ready yet.
	VALID        TEMPSENSE0_TOG = 0x01 << 2   //  Last measurement is valid.
	TEMP_CNT     TEMPSENSE0_TOG = 0xFFF << 8  //+ This bit field contains the last measured temperature count.
	ALARM_VALUE  TEMPSENSE0_TOG = 0xFFF << 20 //+ This bit field contains the temperature count (raw sensor output) that will generate a high alarm when TEMP_CNT is smaller than this field
)

const (
	POWER_DOWNn   = 0
	MEASURE_TEMPn = 1
	FINISHEDn     = 2
	TEMP_CNTn     = 8
	ALARM_VALUEn  = 20
)

const (
	MEASURE_FREQ TEMPSENSE1 = 0xFFFF << 0 //+ This bits determines how many RTC clocks to wait before automatically repeating a temperature measurement
)

const (
	MEASURE_FREQn = 0
)

const (
	MEASURE_FREQ TEMPSENSE1_SET = 0xFFFF << 0 //+ This bits determines how many RTC clocks to wait before automatically repeating a temperature measurement
)

const (
	MEASURE_FREQn = 0
)

const (
	MEASURE_FREQ TEMPSENSE1_CLR = 0xFFFF << 0 //+ This bits determines how many RTC clocks to wait before automatically repeating a temperature measurement
)

const (
	MEASURE_FREQn = 0
)

const (
	MEASURE_FREQ TEMPSENSE1_TOG = 0xFFFF << 0 //+ This bits determines how many RTC clocks to wait before automatically repeating a temperature measurement
)

const (
	MEASURE_FREQn = 0
)

const (
	LOW_ALARM_VALUE   TEMPSENSE2 = 0xFFF << 0  //+ This bit field contains the temperature count that will generate a low alarm interrupt when the field is exceeded by TEMP_CNT
	PANIC_ALARM_VALUE TEMPSENSE2 = 0xFFF << 16 //+ This bit field contains the temperature count that will generate a panic interrupt when TEMP_CNT is smaller than this field
)

const (
	LOW_ALARM_VALUEn   = 0
	PANIC_ALARM_VALUEn = 16
)

const (
	LOW_ALARM_VALUE   TEMPSENSE2_SET = 0xFFF << 0  //+ This bit field contains the temperature count that will generate a low alarm interrupt when the field is exceeded by TEMP_CNT
	PANIC_ALARM_VALUE TEMPSENSE2_SET = 0xFFF << 16 //+ This bit field contains the temperature count that will generate a panic interrupt when TEMP_CNT is smaller than this field
)

const (
	LOW_ALARM_VALUEn   = 0
	PANIC_ALARM_VALUEn = 16
)

const (
	LOW_ALARM_VALUE   TEMPSENSE2_CLR = 0xFFF << 0  //+ This bit field contains the temperature count that will generate a low alarm interrupt when the field is exceeded by TEMP_CNT
	PANIC_ALARM_VALUE TEMPSENSE2_CLR = 0xFFF << 16 //+ This bit field contains the temperature count that will generate a panic interrupt when TEMP_CNT is smaller than this field
)

const (
	LOW_ALARM_VALUEn   = 0
	PANIC_ALARM_VALUEn = 16
)

const (
	LOW_ALARM_VALUE   TEMPSENSE2_TOG = 0xFFF << 0  //+ This bit field contains the temperature count that will generate a low alarm interrupt when the field is exceeded by TEMP_CNT
	PANIC_ALARM_VALUE TEMPSENSE2_TOG = 0xFFF << 16 //+ This bit field contains the temperature count that will generate a panic interrupt when TEMP_CNT is smaller than this field
)

const (
	LOW_ALARM_VALUEn   = 0
	PANIC_ALARM_VALUEn = 16
)
