// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build imxrt1060

// Package rtwdog provides access to the registers of the RTWDOG peripheral.
//
// Instances:
//  RTWDOG  RTWDOG_BASE  -  RTWDOG*  WDOG
// Registers:
//  0x000 32  CS     Watchdog Control and Status Register
//  0x004 32  CNT    Watchdog Counter Register
//  0x008 32  TOVAL  Watchdog Timeout Value Register
//  0x00C 32  WIN    Watchdog Window Register
// Import:
//  github.com/embeddedgo/imxrt/p/mmap
package rtwdog

const (
	STOP      CS = 0x01 << 0  //+ Stop Enable
	STOP_0    CS = 0x00 << 0  //  Watchdog disabled in chip stop mode.
	STOP_1    CS = 0x01 << 0  //  Watchdog enabled in chip stop mode.
	WAIT      CS = 0x01 << 1  //+ Wait Enable
	WAIT_0    CS = 0x00 << 1  //  Watchdog disabled in chip wait mode.
	WAIT_1    CS = 0x01 << 1  //  Watchdog enabled in chip wait mode.
	DBG       CS = 0x01 << 2  //+ Debug Enable
	DBG_0     CS = 0x00 << 2  //  Watchdog disabled in chip debug mode.
	DBG_1     CS = 0x01 << 2  //  Watchdog enabled in chip debug mode.
	TST       CS = 0x03 << 3  //+ Watchdog Test
	TST_0     CS = 0x00 << 3  //  Watchdog test mode disabled.
	TST_1     CS = 0x01 << 3  //  Watchdog user mode enabled. (Watchdog test mode disabled.) After testing the watchdog, software should use this setting to indicate that the watchdog is functioning normally in user mode.
	TST_2     CS = 0x02 << 3  //  Watchdog test mode enabled, only the low byte is used. CNT[CNTLOW] is compared with TOVAL[TOVALLOW].
	TST_3     CS = 0x03 << 3  //  Watchdog test mode enabled, only the high byte is used. CNT[CNTHIGH] is compared with TOVAL[TOVALHIGH].
	UPDATE    CS = 0x01 << 5  //+ Allow updates
	UPDATE_0  CS = 0x00 << 5  //  Updates not allowed. After the initial configuration, the watchdog cannot be later modified without forcing a reset.
	UPDATE_1  CS = 0x01 << 5  //  Updates allowed. Software can modify the watchdog configuration registers within 128 bus clocks after performing the unlock write sequence.
	INT       CS = 0x01 << 6  //+ Watchdog Interrupt
	INT_0     CS = 0x00 << 6  //  Watchdog interrupts are disabled. Watchdog resets are not delayed.
	INT_1     CS = 0x01 << 6  //  Watchdog interrupts are enabled. Watchdog resets are delayed by 128 bus clocks from the interrupt vector fetch.
	EN        CS = 0x01 << 7  //+ Watchdog Enable
	EN_0      CS = 0x00 << 7  //  Watchdog disabled.
	EN_1      CS = 0x01 << 7  //  Watchdog enabled.
	CLK       CS = 0x03 << 8  //+ Watchdog Clock
	CLK_0     CS = 0x00 << 8  //  Bus clock
	CLK_1     CS = 0x01 << 8  //  LPO clock
	CLK_2     CS = 0x02 << 8  //  INTCLK (internal clock)
	CLK_3     CS = 0x03 << 8  //  ERCLK (external reference clock)
	RCS       CS = 0x01 << 10 //+ Reconfiguration Success
	RCS_0     CS = 0x00 << 10 //  Reconfiguring WDOG.
	RCS_1     CS = 0x01 << 10 //  Reconfiguration is successful.
	ULK       CS = 0x01 << 11 //+ Unlock status
	ULK_0     CS = 0x00 << 11 //  WDOG is locked.
	ULK_1     CS = 0x01 << 11 //  WDOG is unlocked.
	PRES      CS = 0x01 << 12 //+ Watchdog prescaler
	PRES_0    CS = 0x00 << 12 //  256 prescaler disabled.
	PRES_1    CS = 0x01 << 12 //  256 prescaler enabled.
	CMD32EN   CS = 0x01 << 13 //+ Enables or disables WDOG support for 32-bit (otherwise 16-bit or 8-bit) refresh/unlock command write words
	CMD32EN_0 CS = 0x00 << 13 //  Disables support for 32-bit refresh/unlock command write words. Only 16-bit or 8-bit is supported.
	CMD32EN_1 CS = 0x01 << 13 //  Enables support for 32-bit refresh/unlock command write words. 16-bit or 8-bit is NOT supported.
	FLG       CS = 0x01 << 14 //+ Watchdog Interrupt Flag
	FLG_0     CS = 0x00 << 14 //  No interrupt occurred.
	FLG_1     CS = 0x01 << 14 //  An interrupt occurred.
	WIN       CS = 0x01 << 15 //+ Watchdog Window
	WIN_0     CS = 0x00 << 15 //  Window mode disabled.
	WIN_1     CS = 0x01 << 15 //  Window mode enabled.
)

const (
	STOPn    = 0
	WAITn    = 1
	DBGn     = 2
	TSTn     = 3
	UPDATEn  = 5
	INTn     = 6
	ENn      = 7
	CLKn     = 8
	RCSn     = 10
	ULKn     = 11
	PRESn    = 12
	CMD32ENn = 13
	FLGn     = 14
	WINn     = 15
)

const (
	CNTLOW  CNT = 0xFF << 0 //+ Low byte of the Watchdog Counter
	CNTHIGH CNT = 0xFF << 8 //+ High byte of the Watchdog Counter
)

const (
	CNTLOWn  = 0
	CNTHIGHn = 8
)

const (
	TOVALLOW  TOVAL = 0xFF << 0 //+ Low byte of the timeout value
	TOVALHIGH TOVAL = 0xFF << 8 //+ High byte of the timeout value
)

const (
	TOVALLOWn  = 0
	TOVALHIGHn = 8
)

const (
	WINLOW  WIN = 0xFF << 0 //+ Low byte of Watchdog Window
	WINHIGH WIN = 0xFF << 8 //+ High byte of Watchdog Window
)

const (
	WINLOWn  = 0
	WINHIGHn = 8
)
