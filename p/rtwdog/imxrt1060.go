// Code generated by svdxgen; DO NOT EDIT.

//go:build imxrt1060

// Package rtwdog provides access to the registers of the RTWDOG peripheral.
//
// Instances:
//
//	RTWDOG  RTWDOG_BASE  -  RTWDOG*  WDOG
//
// Registers:
//
//	0x000 32  CS     Watchdog Control and Status Register
//	0x004 32  CNT    Watchdog Counter Register
//	0x008 32  TOVAL  Watchdog Timeout Value Register
//	0x00C 32  WIN    Watchdog Window Register
//
// Import:
//
//	github.com/embeddedgo/imxrt/p/mmap
package rtwdog

const (
	STOP    CS = 0x01 << 0  //+ Stop Enable
	WAIT    CS = 0x01 << 1  //+ Wait Enable
	DBG     CS = 0x01 << 2  //+ Debug Enable
	TST     CS = 0x03 << 3  //+ Watchdog Test
	TST_0   CS = 0x00 << 3  //  Watchdog test mode disabled.
	TST_1   CS = 0x01 << 3  //  Watchdog user mode enabled. (Watchdog test mode disabled.) After testing the watchdog, software should use this setting to indicate that the watchdog is functioning normally in user mode.
	TST_2   CS = 0x02 << 3  //  Watchdog test mode enabled, only the low byte is used. CNT[CNTLOW] is compared with TOVAL[TOVALLOW].
	TST_3   CS = 0x03 << 3  //  Watchdog test mode enabled, only the high byte is used. CNT[CNTHIGH] is compared with TOVAL[TOVALHIGH].
	UPDATE  CS = 0x01 << 5  //+ Allow updates
	INT     CS = 0x01 << 6  //+ Watchdog Interrupt
	EN      CS = 0x01 << 7  //+ Watchdog Enable
	CLK     CS = 0x03 << 8  //+ Watchdog Clock
	CLK_0   CS = 0x00 << 8  //  Bus clock
	CLK_1   CS = 0x01 << 8  //  LPO clock
	CLK_2   CS = 0x02 << 8  //  INTCLK (internal clock)
	CLK_3   CS = 0x03 << 8  //  ERCLK (external reference clock)
	RCS     CS = 0x01 << 10 //+ Reconfiguration Success
	ULK     CS = 0x01 << 11 //+ Unlock status
	PRES    CS = 0x01 << 12 //+ Watchdog prescaler
	CMD32EN CS = 0x01 << 13 //+ Enables or disables WDOG support for 32-bit (otherwise 16-bit or 8-bit) refresh/unlock command write words
	FLG     CS = 0x01 << 14 //+ Watchdog Interrupt Flag
	WIN     CS = 0x01 << 15 //+ Watchdog Window
)

const (
	STOPn    = 0
	WAITn    = 1
	DBGn     = 2
	TSTn     = 3
	UPDATEn  = 5
	INTn     = 6
	ENn      = 7
	CLKn     = 8
	RCSn     = 10
	ULKn     = 11
	PRESn    = 12
	CMD32ENn = 13
	FLGn     = 14
	WINn     = 15
)

const (
	CNTLOW  CNT = 0xFF << 0 //+ Low byte of the Watchdog Counter
	CNTHIGH CNT = 0xFF << 8 //+ High byte of the Watchdog Counter
)

const (
	CNTLOWn  = 0
	CNTHIGHn = 8
)

const (
	TOVALLOW  TOVAL = 0xFF << 0 //+ Low byte of the timeout value
	TOVALHIGH TOVAL = 0xFF << 8 //+ High byte of the timeout value
)

const (
	TOVALLOWn  = 0
	TOVALHIGHn = 8
)

const (
	WINLOW  WIN = 0xFF << 0 //+ Low byte of Watchdog Window
	WINHIGH WIN = 0xFF << 8 //+ High byte of Watchdog Window
)

const (
	WINLOWn  = 0
	WINHIGHn = 8
)
