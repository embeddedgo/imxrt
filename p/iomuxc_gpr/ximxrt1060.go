// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build imxrt1060

package iomuxc_gpr

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	GPR0  mmio.R32[GPR0]
	GPR1  mmio.R32[GPR1]
	GPR2  mmio.R32[GPR2]
	GPR3  mmio.R32[GPR3]
	GPR4  mmio.R32[GPR4]
	GPR5  mmio.R32[GPR5]
	GPR6  mmio.R32[GPR6]
	GPR7  mmio.R32[GPR7]
	GPR8  mmio.R32[GPR8]
	GPR9  mmio.R32[GPR9]
	GPR10 mmio.R32[GPR10]
	GPR11 mmio.R32[GPR11]
	GPR12 mmio.R32[GPR12]
	GPR13 mmio.R32[GPR13]
	GPR14 mmio.R32[GPR14]
	GPR15 mmio.R32[GPR15]
	GPR16 mmio.R32[GPR16]
	GPR17 mmio.R32[GPR17]
	GPR18 mmio.R32[GPR18]
	GPR19 mmio.R32[GPR19]
	GPR20 mmio.R32[GPR20]
	GPR21 mmio.R32[GPR21]
	GPR22 mmio.R32[GPR22]
	GPR23 mmio.R32[GPR23]
	GPR24 mmio.R32[GPR24]
	GPR25 mmio.R32[GPR25]
	GPR26 mmio.R32[GPR26]
	GPR27 mmio.R32[GPR27]
	GPR28 mmio.R32[GPR28]
	GPR29 mmio.R32[GPR29]
	GPR30 mmio.R32[GPR30]
	GPR31 mmio.R32[GPR31]
	GPR32 mmio.R32[GPR32]
	GPR33 mmio.R32[GPR33]
	GPR34 mmio.R32[GPR34]
}

func IOMUXC_GPR() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.IOMUXC_GPR_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type GPR0 uint32

type GPR1 uint32

func SAI1_MCLK1_SEL_(p *Periph) mmio.RM32[GPR1]   { return mmio.RM32[GPR1]{&p.GPR1, SAI1_MCLK1_SEL} }
func SAI1_MCLK2_SEL_(p *Periph) mmio.RM32[GPR1]   { return mmio.RM32[GPR1]{&p.GPR1, SAI1_MCLK2_SEL} }
func SAI1_MCLK3_SEL_(p *Periph) mmio.RM32[GPR1]   { return mmio.RM32[GPR1]{&p.GPR1, SAI1_MCLK3_SEL} }
func SAI2_MCLK3_SEL_(p *Periph) mmio.RM32[GPR1]   { return mmio.RM32[GPR1]{&p.GPR1, SAI2_MCLK3_SEL} }
func SAI3_MCLK3_SEL_(p *Periph) mmio.RM32[GPR1]   { return mmio.RM32[GPR1]{&p.GPR1, SAI3_MCLK3_SEL} }
func GINT_(p *Periph) mmio.RM32[GPR1]             { return mmio.RM32[GPR1]{&p.GPR1, GINT} }
func ENET1_CLK_SEL_(p *Periph) mmio.RM32[GPR1]    { return mmio.RM32[GPR1]{&p.GPR1, ENET1_CLK_SEL} }
func ENET2_CLK_SEL_(p *Periph) mmio.RM32[GPR1]    { return mmio.RM32[GPR1]{&p.GPR1, ENET2_CLK_SEL} }
func USB_EXP_MODE_(p *Periph) mmio.RM32[GPR1]     { return mmio.RM32[GPR1]{&p.GPR1, USB_EXP_MODE} }
func ENET1_TX_CLK_DIR_(p *Periph) mmio.RM32[GPR1] { return mmio.RM32[GPR1]{&p.GPR1, ENET1_TX_CLK_DIR} }
func ENET2_TX_CLK_DIR_(p *Periph) mmio.RM32[GPR1] { return mmio.RM32[GPR1]{&p.GPR1, ENET2_TX_CLK_DIR} }
func SAI1_MCLK_DIR_(p *Periph) mmio.RM32[GPR1]    { return mmio.RM32[GPR1]{&p.GPR1, SAI1_MCLK_DIR} }
func SAI2_MCLK_DIR_(p *Periph) mmio.RM32[GPR1]    { return mmio.RM32[GPR1]{&p.GPR1, SAI2_MCLK_DIR} }
func SAI3_MCLK_DIR_(p *Periph) mmio.RM32[GPR1]    { return mmio.RM32[GPR1]{&p.GPR1, SAI3_MCLK_DIR} }
func EXC_MON_(p *Periph) mmio.RM32[GPR1]          { return mmio.RM32[GPR1]{&p.GPR1, EXC_MON} }
func ENET_IPG_CLK_S_EN_(p *Periph) mmio.RM32[GPR1] {
	return mmio.RM32[GPR1]{&p.GPR1, ENET_IPG_CLK_S_EN}
}
func CM7_FORCE_HCLK_EN_(p *Periph) mmio.RM32[GPR1] {
	return mmio.RM32[GPR1]{&p.GPR1, CM7_FORCE_HCLK_EN}
}

type GPR2 uint32

func AXBS_L_AHBXL_HIGH_PRIORITY_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, AXBS_L_AHBXL_HIGH_PRIORITY}
}
func AXBS_L_DMA_HIGH_PRIORITY_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, AXBS_L_DMA_HIGH_PRIORITY}
}
func AXBS_L_FORCE_ROUND_ROBIN_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, AXBS_L_FORCE_ROUND_ROBIN}
}
func AXBS_P_M0_HIGH_PRIORITY_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, AXBS_P_M0_HIGH_PRIORITY}
}
func AXBS_P_M1_HIGH_PRIORITY_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, AXBS_P_M1_HIGH_PRIORITY}
}
func AXBS_P_FORCE_ROUND_ROBIN_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, AXBS_P_FORCE_ROUND_ROBIN}
}
func CANFD_FILTER_BYPASS_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, CANFD_FILTER_BYPASS}
}
func L2_MEM_EN_POWERSAVING_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, L2_MEM_EN_POWERSAVING}
}
func RAM_AUTO_CLK_GATING_EN_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, RAM_AUTO_CLK_GATING_EN}
}
func L2_MEM_DEEPSLEEP_(p *Periph) mmio.RM32[GPR2] { return mmio.RM32[GPR2]{&p.GPR2, L2_MEM_DEEPSLEEP} }
func MQS_CLK_DIV_(p *Periph) mmio.RM32[GPR2]      { return mmio.RM32[GPR2]{&p.GPR2, MQS_CLK_DIV} }
func MQS_SW_RST_(p *Periph) mmio.RM32[GPR2]       { return mmio.RM32[GPR2]{&p.GPR2, MQS_SW_RST} }
func MQS_EN_(p *Periph) mmio.RM32[GPR2]           { return mmio.RM32[GPR2]{&p.GPR2, MQS_EN} }
func MQS_OVERSAMPLE_(p *Periph) mmio.RM32[GPR2]   { return mmio.RM32[GPR2]{&p.GPR2, MQS_OVERSAMPLE} }
func QTIMER1_TMR_CNTS_FREEZE_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, QTIMER1_TMR_CNTS_FREEZE}
}
func QTIMER2_TMR_CNTS_FREEZE_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, QTIMER2_TMR_CNTS_FREEZE}
}
func QTIMER3_TMR_CNTS_FREEZE_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, QTIMER3_TMR_CNTS_FREEZE}
}
func QTIMER4_TMR_CNTS_FREEZE_(p *Periph) mmio.RM32[GPR2] {
	return mmio.RM32[GPR2]{&p.GPR2, QTIMER4_TMR_CNTS_FREEZE}
}

type GPR3 uint32

func OCRAM_CTL_(p *Periph) mmio.RM32[GPR3]       { return mmio.RM32[GPR3]{&p.GPR3, OCRAM_CTL} }
func DCP_KEY_SEL_(p *Periph) mmio.RM32[GPR3]     { return mmio.RM32[GPR3]{&p.GPR3, DCP_KEY_SEL} }
func OCRAM2_CTL_(p *Periph) mmio.RM32[GPR3]      { return mmio.RM32[GPR3]{&p.GPR3, OCRAM2_CTL} }
func AXBS_L_HALT_REQ_(p *Periph) mmio.RM32[GPR3] { return mmio.RM32[GPR3]{&p.GPR3, AXBS_L_HALT_REQ} }
func OCRAM_STATUS_(p *Periph) mmio.RM32[GPR3]    { return mmio.RM32[GPR3]{&p.GPR3, OCRAM_STATUS} }
func OCRAM2_STATUS_(p *Periph) mmio.RM32[GPR3]   { return mmio.RM32[GPR3]{&p.GPR3, OCRAM2_STATUS} }
func AXBS_L_HALTED_(p *Periph) mmio.RM32[GPR3]   { return mmio.RM32[GPR3]{&p.GPR3, AXBS_L_HALTED} }

type GPR4 uint32

func EDMA_STOP_REQ_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, EDMA_STOP_REQ} }
func CAN1_STOP_REQ_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, CAN1_STOP_REQ} }
func CAN2_STOP_REQ_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, CAN2_STOP_REQ} }
func TRNG_STOP_REQ_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, TRNG_STOP_REQ} }
func ENET_STOP_REQ_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, ENET_STOP_REQ} }
func SAI1_STOP_REQ_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, SAI1_STOP_REQ} }
func SAI2_STOP_REQ_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, SAI2_STOP_REQ} }
func SAI3_STOP_REQ_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, SAI3_STOP_REQ} }
func ENET2_STOP_REQ_(p *Periph) mmio.RM32[GPR4]   { return mmio.RM32[GPR4]{&p.GPR4, ENET2_STOP_REQ} }
func SEMC_STOP_REQ_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, SEMC_STOP_REQ} }
func PIT_STOP_REQ_(p *Periph) mmio.RM32[GPR4]     { return mmio.RM32[GPR4]{&p.GPR4, PIT_STOP_REQ} }
func FLEXSPI_STOP_REQ_(p *Periph) mmio.RM32[GPR4] { return mmio.RM32[GPR4]{&p.GPR4, FLEXSPI_STOP_REQ} }
func FLEXIO1_STOP_REQ_(p *Periph) mmio.RM32[GPR4] { return mmio.RM32[GPR4]{&p.GPR4, FLEXIO1_STOP_REQ} }
func FLEXIO2_STOP_REQ_(p *Periph) mmio.RM32[GPR4] { return mmio.RM32[GPR4]{&p.GPR4, FLEXIO2_STOP_REQ} }
func FLEXIO3_STOP_REQ_(p *Periph) mmio.RM32[GPR4] { return mmio.RM32[GPR4]{&p.GPR4, FLEXIO3_STOP_REQ} }
func FLEXSPI2_STOP_REQ_(p *Periph) mmio.RM32[GPR4] {
	return mmio.RM32[GPR4]{&p.GPR4, FLEXSPI2_STOP_REQ}
}
func EDMA_STOP_ACK_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, EDMA_STOP_ACK} }
func CAN1_STOP_ACK_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, CAN1_STOP_ACK} }
func CAN2_STOP_ACK_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, CAN2_STOP_ACK} }
func TRNG_STOP_ACK_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, TRNG_STOP_ACK} }
func ENET_STOP_ACK_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, ENET_STOP_ACK} }
func SAI1_STOP_ACK_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, SAI1_STOP_ACK} }
func SAI2_STOP_ACK_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, SAI2_STOP_ACK} }
func SAI3_STOP_ACK_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, SAI3_STOP_ACK} }
func ENET2_STOP_ACK_(p *Periph) mmio.RM32[GPR4]   { return mmio.RM32[GPR4]{&p.GPR4, ENET2_STOP_ACK} }
func SEMC_STOP_ACK_(p *Periph) mmio.RM32[GPR4]    { return mmio.RM32[GPR4]{&p.GPR4, SEMC_STOP_ACK} }
func PIT_STOP_ACK_(p *Periph) mmio.RM32[GPR4]     { return mmio.RM32[GPR4]{&p.GPR4, PIT_STOP_ACK} }
func FLEXSPI_STOP_ACK_(p *Periph) mmio.RM32[GPR4] { return mmio.RM32[GPR4]{&p.GPR4, FLEXSPI_STOP_ACK} }
func FLEXIO1_STOP_ACK_(p *Periph) mmio.RM32[GPR4] { return mmio.RM32[GPR4]{&p.GPR4, FLEXIO1_STOP_ACK} }
func FLEXIO2_STOP_ACK_(p *Periph) mmio.RM32[GPR4] { return mmio.RM32[GPR4]{&p.GPR4, FLEXIO2_STOP_ACK} }
func FLEXIO3_STOP_ACK_(p *Periph) mmio.RM32[GPR4] { return mmio.RM32[GPR4]{&p.GPR4, FLEXIO3_STOP_ACK} }
func FLEXSPI2_STOP_ACK_(p *Periph) mmio.RM32[GPR4] {
	return mmio.RM32[GPR4]{&p.GPR4, FLEXSPI2_STOP_ACK}
}

type GPR5 uint32

func WDOG1_MASK_(p *Periph) mmio.RM32[GPR5]      { return mmio.RM32[GPR5]{&p.GPR5, WDOG1_MASK} }
func WDOG2_MASK_(p *Periph) mmio.RM32[GPR5]      { return mmio.RM32[GPR5]{&p.GPR5, WDOG2_MASK} }
func GPT2_CAPIN1_SEL_(p *Periph) mmio.RM32[GPR5] { return mmio.RM32[GPR5]{&p.GPR5, GPT2_CAPIN1_SEL} }
func GPT2_CAPIN2_SEL_(p *Periph) mmio.RM32[GPR5] { return mmio.RM32[GPR5]{&p.GPR5, GPT2_CAPIN2_SEL} }
func ENET_EVENT3IN_SEL_(p *Periph) mmio.RM32[GPR5] {
	return mmio.RM32[GPR5]{&p.GPR5, ENET_EVENT3IN_SEL}
}
func ENET2_EVENT3IN_SEL_(p *Periph) mmio.RM32[GPR5] {
	return mmio.RM32[GPR5]{&p.GPR5, ENET2_EVENT3IN_SEL}
}
func VREF_1M_CLK_GPT1_(p *Periph) mmio.RM32[GPR5] { return mmio.RM32[GPR5]{&p.GPR5, VREF_1M_CLK_GPT1} }
func VREF_1M_CLK_GPT2_(p *Periph) mmio.RM32[GPR5] { return mmio.RM32[GPR5]{&p.GPR5, VREF_1M_CLK_GPT2} }

type GPR6 uint32

func QTIMER1_TRM0_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER1_TRM0_INPUT_SEL}
}
func QTIMER1_TRM1_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER1_TRM1_INPUT_SEL}
}
func QTIMER1_TRM2_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER1_TRM2_INPUT_SEL}
}
func QTIMER1_TRM3_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER1_TRM3_INPUT_SEL}
}
func QTIMER2_TRM0_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER2_TRM0_INPUT_SEL}
}
func QTIMER2_TRM1_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER2_TRM1_INPUT_SEL}
}
func QTIMER2_TRM2_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER2_TRM2_INPUT_SEL}
}
func QTIMER2_TRM3_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER2_TRM3_INPUT_SEL}
}
func QTIMER3_TRM0_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER3_TRM0_INPUT_SEL}
}
func QTIMER3_TRM1_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER3_TRM1_INPUT_SEL}
}
func QTIMER3_TRM2_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER3_TRM2_INPUT_SEL}
}
func QTIMER3_TRM3_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER3_TRM3_INPUT_SEL}
}
func QTIMER4_TRM0_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER4_TRM0_INPUT_SEL}
}
func QTIMER4_TRM1_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER4_TRM1_INPUT_SEL}
}
func QTIMER4_TRM2_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER4_TRM2_INPUT_SEL}
}
func QTIMER4_TRM3_INPUT_SEL_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, QTIMER4_TRM3_INPUT_SEL}
}
func IOMUXC_XBAR_DIR_SEL_4_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_4}
}
func IOMUXC_XBAR_DIR_SEL_5_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_5}
}
func IOMUXC_XBAR_DIR_SEL_6_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_6}
}
func IOMUXC_XBAR_DIR_SEL_7_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_7}
}
func IOMUXC_XBAR_DIR_SEL_8_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_8}
}
func IOMUXC_XBAR_DIR_SEL_9_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_9}
}
func IOMUXC_XBAR_DIR_SEL_10_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_10}
}
func IOMUXC_XBAR_DIR_SEL_11_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_11}
}
func IOMUXC_XBAR_DIR_SEL_12_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_12}
}
func IOMUXC_XBAR_DIR_SEL_13_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_13}
}
func IOMUXC_XBAR_DIR_SEL_14_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_14}
}
func IOMUXC_XBAR_DIR_SEL_15_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_15}
}
func IOMUXC_XBAR_DIR_SEL_16_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_16}
}
func IOMUXC_XBAR_DIR_SEL_17_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_17}
}
func IOMUXC_XBAR_DIR_SEL_18_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_18}
}
func IOMUXC_XBAR_DIR_SEL_19_(p *Periph) mmio.RM32[GPR6] {
	return mmio.RM32[GPR6]{&p.GPR6, IOMUXC_XBAR_DIR_SEL_19}
}

type GPR7 uint32

func LPI2C1_STOP_REQ_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPI2C1_STOP_REQ} }
func LPI2C2_STOP_REQ_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPI2C2_STOP_REQ} }
func LPI2C3_STOP_REQ_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPI2C3_STOP_REQ} }
func LPI2C4_STOP_REQ_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPI2C4_STOP_REQ} }
func LPSPI1_STOP_REQ_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPSPI1_STOP_REQ} }
func LPSPI2_STOP_REQ_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPSPI2_STOP_REQ} }
func LPSPI3_STOP_REQ_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPSPI3_STOP_REQ} }
func LPSPI4_STOP_REQ_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPSPI4_STOP_REQ} }
func LPUART1_STOP_REQ_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART1_STOP_REQ} }
func LPUART2_STOP_REQ_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART2_STOP_REQ} }
func LPUART3_STOP_REQ_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART3_STOP_REQ} }
func LPUART4_STOP_REQ_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART4_STOP_REQ} }
func LPUART5_STOP_REQ_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART5_STOP_REQ} }
func LPUART6_STOP_REQ_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART6_STOP_REQ} }
func LPUART7_STOP_REQ_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART7_STOP_REQ} }
func LPUART8_STOP_REQ_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART8_STOP_REQ} }
func LPI2C1_STOP_ACK_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPI2C1_STOP_ACK} }
func LPI2C2_STOP_ACK_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPI2C2_STOP_ACK} }
func LPI2C3_STOP_ACK_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPI2C3_STOP_ACK} }
func LPI2C4_STOP_ACK_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPI2C4_STOP_ACK} }
func LPSPI1_STOP_ACK_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPSPI1_STOP_ACK} }
func LPSPI2_STOP_ACK_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPSPI2_STOP_ACK} }
func LPSPI3_STOP_ACK_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPSPI3_STOP_ACK} }
func LPSPI4_STOP_ACK_(p *Periph) mmio.RM32[GPR7]  { return mmio.RM32[GPR7]{&p.GPR7, LPSPI4_STOP_ACK} }
func LPUART1_STOP_ACK_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART1_STOP_ACK} }
func LPUART2_STOP_ACK_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART2_STOP_ACK} }
func LPUART3_STOP_ACK_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART3_STOP_ACK} }
func LPUART4_STOP_ACK_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART4_STOP_ACK} }
func LPUART5_STOP_ACK_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART5_STOP_ACK} }
func LPUART6_STOP_ACK_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART6_STOP_ACK} }
func LPUART7_STOP_ACK_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART7_STOP_ACK} }
func LPUART8_STOP_ACK_(p *Periph) mmio.RM32[GPR7] { return mmio.RM32[GPR7]{&p.GPR7, LPUART8_STOP_ACK} }

type GPR8 uint32

func LPI2C1_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPI2C1_IPG_STOP_MODE}
}
func LPI2C1_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPI2C1_IPG_DOZE} }
func LPI2C2_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPI2C2_IPG_STOP_MODE}
}
func LPI2C2_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPI2C2_IPG_DOZE} }
func LPI2C3_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPI2C3_IPG_STOP_MODE}
}
func LPI2C3_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPI2C3_IPG_DOZE} }
func LPI2C4_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPI2C4_IPG_STOP_MODE}
}
func LPI2C4_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPI2C4_IPG_DOZE} }
func LPSPI1_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPSPI1_IPG_STOP_MODE}
}
func LPSPI1_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPSPI1_IPG_DOZE} }
func LPSPI2_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPSPI2_IPG_STOP_MODE}
}
func LPSPI2_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPSPI2_IPG_DOZE} }
func LPSPI3_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPSPI3_IPG_STOP_MODE}
}
func LPSPI3_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPSPI3_IPG_DOZE} }
func LPSPI4_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPSPI4_IPG_STOP_MODE}
}
func LPSPI4_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPSPI4_IPG_DOZE} }
func LPUART1_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPUART1_IPG_STOP_MODE}
}
func LPUART1_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPUART1_IPG_DOZE} }
func LPUART2_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPUART2_IPG_STOP_MODE}
}
func LPUART2_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPUART2_IPG_DOZE} }
func LPUART3_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPUART3_IPG_STOP_MODE}
}
func LPUART3_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPUART3_IPG_DOZE} }
func LPUART4_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPUART4_IPG_STOP_MODE}
}
func LPUART4_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPUART4_IPG_DOZE} }
func LPUART5_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPUART5_IPG_STOP_MODE}
}
func LPUART5_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPUART5_IPG_DOZE} }
func LPUART6_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPUART6_IPG_STOP_MODE}
}
func LPUART6_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPUART6_IPG_DOZE} }
func LPUART7_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPUART7_IPG_STOP_MODE}
}
func LPUART7_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPUART7_IPG_DOZE} }
func LPUART8_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR8] {
	return mmio.RM32[GPR8]{&p.GPR8, LPUART8_IPG_STOP_MODE}
}
func LPUART8_IPG_DOZE_(p *Periph) mmio.RM32[GPR8] { return mmio.RM32[GPR8]{&p.GPR8, LPUART8_IPG_DOZE} }

type GPR9 uint32

type GPR10 uint32

func NIDEN_(p *Periph) mmio.RM32[GPR10]        { return mmio.RM32[GPR10]{&p.GPR10, NIDEN} }
func DBG_EN_(p *Periph) mmio.RM32[GPR10]       { return mmio.RM32[GPR10]{&p.GPR10, DBG_EN} }
func SEC_ERR_RESP_(p *Periph) mmio.RM32[GPR10] { return mmio.RM32[GPR10]{&p.GPR10, SEC_ERR_RESP} }
func DCPKEY_OCOTP_OR_KEYMUX_(p *Periph) mmio.RM32[GPR10] {
	return mmio.RM32[GPR10]{&p.GPR10, DCPKEY_OCOTP_OR_KEYMUX}
}
func OCRAM_TZ_EN_(p *Periph) mmio.RM32[GPR10]   { return mmio.RM32[GPR10]{&p.GPR10, OCRAM_TZ_EN} }
func OCRAM_TZ_ADDR_(p *Periph) mmio.RM32[GPR10] { return mmio.RM32[GPR10]{&p.GPR10, OCRAM_TZ_ADDR} }
func LOCK_NIDEN_(p *Periph) mmio.RM32[GPR10]    { return mmio.RM32[GPR10]{&p.GPR10, LOCK_NIDEN} }
func LOCK_DBG_EN_(p *Periph) mmio.RM32[GPR10]   { return mmio.RM32[GPR10]{&p.GPR10, LOCK_DBG_EN} }
func LOCK_SEC_ERR_RESP_(p *Periph) mmio.RM32[GPR10] {
	return mmio.RM32[GPR10]{&p.GPR10, LOCK_SEC_ERR_RESP}
}
func LOCK_DCPKEY_OCOTP_OR_KEYMUX_(p *Periph) mmio.RM32[GPR10] {
	return mmio.RM32[GPR10]{&p.GPR10, LOCK_DCPKEY_OCOTP_OR_KEYMUX}
}
func LOCK_OCRAM_TZ_EN_(p *Periph) mmio.RM32[GPR10] {
	return mmio.RM32[GPR10]{&p.GPR10, LOCK_OCRAM_TZ_EN}
}
func LOCK_OCRAM_TZ_ADDR_(p *Periph) mmio.RM32[GPR10] {
	return mmio.RM32[GPR10]{&p.GPR10, LOCK_OCRAM_TZ_ADDR}
}

type GPR11 uint32

func M7_APC_AC_R0_CTRL_(p *Periph) mmio.RM32[GPR11] {
	return mmio.RM32[GPR11]{&p.GPR11, M7_APC_AC_R0_CTRL}
}
func M7_APC_AC_R1_CTRL_(p *Periph) mmio.RM32[GPR11] {
	return mmio.RM32[GPR11]{&p.GPR11, M7_APC_AC_R1_CTRL}
}
func M7_APC_AC_R2_CTRL_(p *Periph) mmio.RM32[GPR11] {
	return mmio.RM32[GPR11]{&p.GPR11, M7_APC_AC_R2_CTRL}
}
func M7_APC_AC_R3_CTRL_(p *Periph) mmio.RM32[GPR11] {
	return mmio.RM32[GPR11]{&p.GPR11, M7_APC_AC_R3_CTRL}
}
func BEE_DE_RX_EN_(p *Periph) mmio.RM32[GPR11] { return mmio.RM32[GPR11]{&p.GPR11, BEE_DE_RX_EN} }

type GPR12 uint32

func FLEXIO1_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR12] {
	return mmio.RM32[GPR12]{&p.GPR12, FLEXIO1_IPG_STOP_MODE}
}
func FLEXIO1_IPG_DOZE_(p *Periph) mmio.RM32[GPR12] {
	return mmio.RM32[GPR12]{&p.GPR12, FLEXIO1_IPG_DOZE}
}
func FLEXIO2_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR12] {
	return mmio.RM32[GPR12]{&p.GPR12, FLEXIO2_IPG_STOP_MODE}
}
func FLEXIO2_IPG_DOZE_(p *Periph) mmio.RM32[GPR12] {
	return mmio.RM32[GPR12]{&p.GPR12, FLEXIO2_IPG_DOZE}
}
func ACMP_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR12] {
	return mmio.RM32[GPR12]{&p.GPR12, ACMP_IPG_STOP_MODE}
}
func FLEXIO3_IPG_STOP_MODE_(p *Periph) mmio.RM32[GPR12] {
	return mmio.RM32[GPR12]{&p.GPR12, FLEXIO3_IPG_STOP_MODE}
}
func FLEXIO3_IPG_DOZE_(p *Periph) mmio.RM32[GPR12] {
	return mmio.RM32[GPR12]{&p.GPR12, FLEXIO3_IPG_DOZE}
}

type GPR13 uint32

func ARCACHE_USDHC_(p *Periph) mmio.RM32[GPR13]  { return mmio.RM32[GPR13]{&p.GPR13, ARCACHE_USDHC} }
func AWCACHE_USDHC_(p *Periph) mmio.RM32[GPR13]  { return mmio.RM32[GPR13]{&p.GPR13, AWCACHE_USDHC} }
func CANFD_STOP_REQ_(p *Periph) mmio.RM32[GPR13] { return mmio.RM32[GPR13]{&p.GPR13, CANFD_STOP_REQ} }
func CACHE_ENET_(p *Periph) mmio.RM32[GPR13]     { return mmio.RM32[GPR13]{&p.GPR13, CACHE_ENET} }
func CACHE_USB_(p *Periph) mmio.RM32[GPR13]      { return mmio.RM32[GPR13]{&p.GPR13, CACHE_USB} }
func CANFD_STOP_ACK_(p *Periph) mmio.RM32[GPR13] { return mmio.RM32[GPR13]{&p.GPR13, CANFD_STOP_ACK} }

type GPR14 uint32

func ACMP1_CMP_IGEN_TRIM_DN_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP1_CMP_IGEN_TRIM_DN}
}
func ACMP2_CMP_IGEN_TRIM_DN_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP2_CMP_IGEN_TRIM_DN}
}
func ACMP3_CMP_IGEN_TRIM_DN_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP3_CMP_IGEN_TRIM_DN}
}
func ACMP4_CMP_IGEN_TRIM_DN_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP4_CMP_IGEN_TRIM_DN}
}
func ACMP1_CMP_IGEN_TRIM_UP_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP1_CMP_IGEN_TRIM_UP}
}
func ACMP2_CMP_IGEN_TRIM_UP_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP2_CMP_IGEN_TRIM_UP}
}
func ACMP3_CMP_IGEN_TRIM_UP_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP3_CMP_IGEN_TRIM_UP}
}
func ACMP4_CMP_IGEN_TRIM_UP_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP4_CMP_IGEN_TRIM_UP}
}
func ACMP1_SAMPLE_SYNC_EN_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP1_SAMPLE_SYNC_EN}
}
func ACMP2_SAMPLE_SYNC_EN_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP2_SAMPLE_SYNC_EN}
}
func ACMP3_SAMPLE_SYNC_EN_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP3_SAMPLE_SYNC_EN}
}
func ACMP4_SAMPLE_SYNC_EN_(p *Periph) mmio.RM32[GPR14] {
	return mmio.RM32[GPR14]{&p.GPR14, ACMP4_SAMPLE_SYNC_EN}
}
func CM7_CFGITCMSZ_(p *Periph) mmio.RM32[GPR14] { return mmio.RM32[GPR14]{&p.GPR14, CM7_CFGITCMSZ} }
func CM7_CFGDTCMSZ_(p *Periph) mmio.RM32[GPR14] { return mmio.RM32[GPR14]{&p.GPR14, CM7_CFGDTCMSZ} }

type GPR15 uint32

type GPR16 uint32

func INIT_ITCM_EN_(p *Periph) mmio.RM32[GPR16] { return mmio.RM32[GPR16]{&p.GPR16, INIT_ITCM_EN} }
func INIT_DTCM_EN_(p *Periph) mmio.RM32[GPR16] { return mmio.RM32[GPR16]{&p.GPR16, INIT_DTCM_EN} }
func FLEXRAM_BANK_CFG_SEL_(p *Periph) mmio.RM32[GPR16] {
	return mmio.RM32[GPR16]{&p.GPR16, FLEXRAM_BANK_CFG_SEL}
}

type GPR17 uint32

func FLEXRAM_BANK_CFG_(p *Periph) mmio.RM32[GPR17] {
	return mmio.RM32[GPR17]{&p.GPR17, FLEXRAM_BANK_CFG}
}

type GPR18 uint32

func LOCK_M7_APC_AC_R0_BOT_(p *Periph) mmio.RM32[GPR18] {
	return mmio.RM32[GPR18]{&p.GPR18, LOCK_M7_APC_AC_R0_BOT}
}
func M7_APC_AC_R0_BOT_(p *Periph) mmio.RM32[GPR18] {
	return mmio.RM32[GPR18]{&p.GPR18, M7_APC_AC_R0_BOT}
}

type GPR19 uint32

func LOCK_M7_APC_AC_R0_TOP_(p *Periph) mmio.RM32[GPR19] {
	return mmio.RM32[GPR19]{&p.GPR19, LOCK_M7_APC_AC_R0_TOP}
}
func M7_APC_AC_R0_TOP_(p *Periph) mmio.RM32[GPR19] {
	return mmio.RM32[GPR19]{&p.GPR19, M7_APC_AC_R0_TOP}
}

type GPR20 uint32

func LOCK_M7_APC_AC_R1_BOT_(p *Periph) mmio.RM32[GPR20] {
	return mmio.RM32[GPR20]{&p.GPR20, LOCK_M7_APC_AC_R1_BOT}
}
func M7_APC_AC_R1_BOT_(p *Periph) mmio.RM32[GPR20] {
	return mmio.RM32[GPR20]{&p.GPR20, M7_APC_AC_R1_BOT}
}

type GPR21 uint32

func LOCK_M7_APC_AC_R1_TOP_(p *Periph) mmio.RM32[GPR21] {
	return mmio.RM32[GPR21]{&p.GPR21, LOCK_M7_APC_AC_R1_TOP}
}
func M7_APC_AC_R1_TOP_(p *Periph) mmio.RM32[GPR21] {
	return mmio.RM32[GPR21]{&p.GPR21, M7_APC_AC_R1_TOP}
}

type GPR22 uint32

func LOCK_M7_APC_AC_R2_BOT_(p *Periph) mmio.RM32[GPR22] {
	return mmio.RM32[GPR22]{&p.GPR22, LOCK_M7_APC_AC_R2_BOT}
}
func M7_APC_AC_R2_BOT_(p *Periph) mmio.RM32[GPR22] {
	return mmio.RM32[GPR22]{&p.GPR22, M7_APC_AC_R2_BOT}
}

type GPR23 uint32

func LOCK_M7_APC_AC_R2_TOP_(p *Periph) mmio.RM32[GPR23] {
	return mmio.RM32[GPR23]{&p.GPR23, LOCK_M7_APC_AC_R2_TOP}
}
func M7_APC_AC_R2_TOP_(p *Periph) mmio.RM32[GPR23] {
	return mmio.RM32[GPR23]{&p.GPR23, M7_APC_AC_R2_TOP}
}

type GPR24 uint32

func LOCK_M7_APC_AC_R3_BOT_(p *Periph) mmio.RM32[GPR24] {
	return mmio.RM32[GPR24]{&p.GPR24, LOCK_M7_APC_AC_R3_BOT}
}
func M7_APC_AC_R3_BOT_(p *Periph) mmio.RM32[GPR24] {
	return mmio.RM32[GPR24]{&p.GPR24, M7_APC_AC_R3_BOT}
}

type GPR25 uint32

func LOCK_M7_APC_AC_R3_TOP_(p *Periph) mmio.RM32[GPR25] {
	return mmio.RM32[GPR25]{&p.GPR25, LOCK_M7_APC_AC_R3_TOP}
}
func M7_APC_AC_R3_TOP_(p *Periph) mmio.RM32[GPR25] {
	return mmio.RM32[GPR25]{&p.GPR25, M7_APC_AC_R3_TOP}
}

type GPR26 uint32

func GPIO_MUX1_GPIO_SEL_(p *Periph) mmio.RM32[GPR26] {
	return mmio.RM32[GPR26]{&p.GPR26, GPIO_MUX1_GPIO_SEL}
}

type GPR27 uint32

func GPIO_MUX2_GPIO_SEL_(p *Periph) mmio.RM32[GPR27] {
	return mmio.RM32[GPR27]{&p.GPR27, GPIO_MUX2_GPIO_SEL}
}

type GPR28 uint32

func GPIO_MUX3_GPIO_SEL_(p *Periph) mmio.RM32[GPR28] {
	return mmio.RM32[GPR28]{&p.GPR28, GPIO_MUX3_GPIO_SEL}
}

type GPR29 uint32

func GPIO_MUX4_GPIO_SEL_(p *Periph) mmio.RM32[GPR29] {
	return mmio.RM32[GPR29]{&p.GPR29, GPIO_MUX4_GPIO_SEL}
}

type GPR30 uint32

func FLEXSPI_REMAP_ADDR_START_(p *Periph) mmio.RM32[GPR30] {
	return mmio.RM32[GPR30]{&p.GPR30, FLEXSPI_REMAP_ADDR_START}
}

type GPR31 uint32

func FLEXSPI_REMAP_ADDR_END_(p *Periph) mmio.RM32[GPR31] {
	return mmio.RM32[GPR31]{&p.GPR31, FLEXSPI_REMAP_ADDR_END}
}

type GPR32 uint32

func FLEXSPI_REMAP_ADDR_OFFSET_(p *Periph) mmio.RM32[GPR32] {
	return mmio.RM32[GPR32]{&p.GPR32, FLEXSPI_REMAP_ADDR_OFFSET}
}

type GPR33 uint32

func OCRAM2_TZ_EN_(p *Periph) mmio.RM32[GPR33]   { return mmio.RM32[GPR33]{&p.GPR33, OCRAM2_TZ_EN} }
func OCRAM2_TZ_ADDR_(p *Periph) mmio.RM32[GPR33] { return mmio.RM32[GPR33]{&p.GPR33, OCRAM2_TZ_ADDR} }
func LOCK_OCRAM2_TZ_EN_(p *Periph) mmio.RM32[GPR33] {
	return mmio.RM32[GPR33]{&p.GPR33, LOCK_OCRAM2_TZ_EN}
}
func LOCK_OCRAM2_TZ_ADDR_(p *Periph) mmio.RM32[GPR33] {
	return mmio.RM32[GPR33]{&p.GPR33, LOCK_OCRAM2_TZ_ADDR}
}

type GPR34 uint32

func SIP_TEST_MUX_BOOT_PIN_SEL_(p *Periph) mmio.RM32[GPR34] {
	return mmio.RM32[GPR34]{&p.GPR34, SIP_TEST_MUX_BOOT_PIN_SEL}
}
func SIP_TEST_MUX_QSPI_SIP_EN_(p *Periph) mmio.RM32[GPR34] {
	return mmio.RM32[GPR34]{&p.GPR34, SIP_TEST_MUX_QSPI_SIP_EN}
}
