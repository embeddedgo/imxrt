// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build imxrt1060

// Package flexio provides access to the registers of the FLEXIO peripheral.
//
// Instances:
//  FLEXIO1  FLEXIO1_BASE  -  FLEXIO1*
//  FLEXIO2  FLEXIO2_BASE  -  FLEXIO2*
//  FLEXIO3  FLEXIO3_BASE  -  FLEXIO3*
// Registers:
//  0x000 32  VERID           Version ID Register
//  0x004 32  PARAM           Parameter Register
//  0x008 32  CTRL            FlexIO Control Register
//  0x00C 32  PIN             Pin State Register
//  0x010 32  SHIFTSTAT       Shifter Status Register
//  0x014 32  SHIFTERR        Shifter Error Register
//  0x018 32  TIMSTAT         Timer Status Register
//  0x020 32  SHIFTSIEN       Shifter Status Interrupt Enable
//  0x024 32  SHIFTEIEN       Shifter Error Interrupt Enable
//  0x028 32  TIMIEN          Timer Interrupt Enable Register
//  0x030 32  SHIFTSDEN       Shifter Status DMA Enable
//  0x040 32  SHIFTSTATE      Shifter State Register
//  0x080 32  SHIFTCTL[4]     Shifter Control N Register
//  0x100 32  SHIFTCFG[4]     Shifter Configuration N Register
//  0x200 32  SHIFTBUF[4]     Shifter Buffer N Register
//  0x280 32  SHIFTBUFBIS[4]  Shifter Buffer N Bit Swapped Register
//  0x300 32  SHIFTBUFBYS[4]  Shifter Buffer N Byte Swapped Register
//  0x380 32  SHIFTBUFBBS[4]  Shifter Buffer N Bit Byte Swapped Register
//  0x400 32  TIMCTL[4]       Timer Control N Register
//  0x480 32  TIMCFG[4]       Timer Configuration N Register
//  0x500 32  TIMCMP[4]       Timer Compare N Register
//  0x680 32  SHIFTBUFNBS[4]  Shifter Buffer N Nibble Byte Swapped Register
//  0x700 32  SHIFTBUFHWS[4]  Shifter Buffer N Half Word Swapped Register
//  0x780 32  SHIFTBUFNIS[4]  Shifter Buffer N Nibble Swapped Register
// Import:
//  github.com/embeddedgo/imxrt/p/mmap
package flexio

const (
	FEATURE   VERID = 0xFFFF << 0 //+ Feature Specification Number
	FEATURE_0 VERID = 0x00 << 0   //  Standard features implemented.
	FEATURE_1 VERID = 0x01 << 0   //  Supports state, logic and parallel modes.
	MINOR     VERID = 0xFF << 16  //+ Minor Version Number
	MAJOR     VERID = 0xFF << 24  //+ Major Version Number
)

const (
	FEATUREn = 0
	MINORn   = 16
	MAJORn   = 24
)

const (
	SHIFTER PARAM = 0xFF << 0  //+ Shifter Number
	TIMER   PARAM = 0xFF << 8  //+ Timer Number
	PIN     PARAM = 0xFF << 16 //+ Pin Number
	TRIGGER PARAM = 0xFF << 24 //+ Trigger Number
)

const (
	SHIFTERn = 0
	TIMERn   = 8
	PINn     = 16
	TRIGGERn = 24
)

const (
	FLEXEN  CTRL = 0x01 << 0  //+ FlexIO Enable
	SWRST   CTRL = 0x01 << 1  //+ Software Reset
	FASTACC CTRL = 0x01 << 2  //+ Fast Access
	DBGE    CTRL = 0x01 << 30 //+ Debug Enable
	DOZEN   CTRL = 0x01 << 31 //+ Doze Enable
)

const (
	FLEXENn  = 0
	SWRSTn   = 1
	FASTACCn = 2
	DBGEn    = 30
	DOZENn   = 31
)

const (
	PDI PIN = 0xFFFF << 0 //+ Pin Data Input
)

const (
	PDIn = 0
)

const (
	SSF SHIFTSTAT = 0x0F << 0 //+ Shifter Status Flag
)

const (
	SSFn = 0
)

const (
	SEF SHIFTERR = 0x0F << 0 //+ Shifter Error Flags
)

const (
	SEFn = 0
)

const (
	TSF TIMSTAT = 0x0F << 0 //+ Timer Status Flags
)

const (
	TSFn = 0
)

const (
	SSIE SHIFTSIEN = 0x0F << 0 //+ Shifter Status Interrupt Enable
)

const (
	SSIEn = 0
)

const (
	SEIE SHIFTEIEN = 0x0F << 0 //+ Shifter Error Interrupt Enable
)

const (
	SEIEn = 0
)

const (
	TEIE TIMIEN = 0x0F << 0 //+ Timer Status Interrupt Enable
)

const (
	TEIEn = 0
)

const (
	SSDE SHIFTSDEN = 0x0F << 0 //+ Shifter Status DMA Enable
)

const (
	SSDEn = 0
)

const (
	STATE SHIFTSTATE = 0x07 << 0 //+ Current State Pointer
)

const (
	STATEn = 0
)

const (
	SMOD     SHIFTCTL = 0x07 << 0  //+ Shifter Mode
	SMOD_0   SHIFTCTL = 0x00 << 0  //  Disabled.
	SMOD_1   SHIFTCTL = 0x01 << 0  //  Receive mode. Captures the current Shifter content into the SHIFTBUF on expiration of the Timer.
	SMOD_2   SHIFTCTL = 0x02 << 0  //  Transmit mode. Load SHIFTBUF contents into the Shifter on expiration of the Timer.
	SMOD_4   SHIFTCTL = 0x04 << 0  //  Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the Timer.
	SMOD_5   SHIFTCTL = 0x05 << 0  //  Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents.
	SMOD_6   SHIFTCTL = 0x06 << 0  //  State mode. SHIFTBUF contents are used for storing programmable state attributes.
	SMOD_7   SHIFTCTL = 0x07 << 0  //  Logic mode. SHIFTBUF contents are used for implementing programmable logic look up table.
	PINPOL   SHIFTCTL = 0x01 << 7  //+ Shifter Pin Polarity
	PINSEL   SHIFTCTL = 0x0F << 8  //+ Shifter Pin Select
	PINCFG   SHIFTCTL = 0x03 << 16 //+ Shifter Pin Configuration
	PINCFG_0 SHIFTCTL = 0x00 << 16 //  Shifter pin output disabled
	PINCFG_1 SHIFTCTL = 0x01 << 16 //  Shifter pin open drain or bidirectional output enable
	PINCFG_2 SHIFTCTL = 0x02 << 16 //  Shifter pin bidirectional output data
	PINCFG_3 SHIFTCTL = 0x03 << 16 //  Shifter pin output
	TIMPOL   SHIFTCTL = 0x01 << 23 //+ Timer Polarity
	TIMSEL   SHIFTCTL = 0x03 << 24 //+ Timer Select
)

const (
	SMODn   = 0
	PINPOLn = 7
	PINSELn = 8
	PINCFGn = 16
	TIMPOLn = 23
	TIMSELn = 24
)

const (
	SSTART   SHIFTCFG = 0x03 << 0  //+ Shifter Start bit
	SSTART_0 SHIFTCFG = 0x00 << 0  //  Start bit disabled for transmitter/receiver/match store, transmitter loads data on enable
	SSTART_1 SHIFTCFG = 0x01 << 0  //  Start bit disabled for transmitter/receiver/match store, transmitter loads data on first shift
	SSTART_2 SHIFTCFG = 0x02 << 0  //  Transmitter outputs start bit value 0 before loading data on first shift, receiver/match store sets error flag if start bit is not 0
	SSTART_3 SHIFTCFG = 0x03 << 0  //  Transmitter outputs start bit value 1 before loading data on first shift, receiver/match store sets error flag if start bit is not 1
	SSTOP    SHIFTCFG = 0x03 << 4  //+ Shifter Stop bit
	SSTOP_0  SHIFTCFG = 0x00 << 4  //  Stop bit disabled for transmitter/receiver/match store
	SSTOP_2  SHIFTCFG = 0x02 << 4  //  Transmitter outputs stop bit value 0 on store, receiver/match store sets error flag if stop bit is not 0
	SSTOP_3  SHIFTCFG = 0x03 << 4  //  Transmitter outputs stop bit value 1 on store, receiver/match store sets error flag if stop bit is not 1
	INSRC    SHIFTCFG = 0x01 << 8  //+ Input Source
	PWIDTH   SHIFTCFG = 0x0F << 16 //+ Parallel Width
)

const (
	SSTARTn = 0
	SSTOPn  = 4
	INSRCn  = 8
	PWIDTHn = 16
)

const (
	SHIFTBUF SHIFTBUF = 0xFFFFFFFF << 0 //+ Shift Buffer
)

const (
	SHIFTBUFn = 0
)

const (
	SHIFTBUFBIS SHIFTBUFBIS = 0xFFFFFFFF << 0 //+ Shift Buffer
)

const (
	SHIFTBUFBISn = 0
)

const (
	SHIFTBUFBYS SHIFTBUFBYS = 0xFFFFFFFF << 0 //+ Shift Buffer
)

const (
	SHIFTBUFBYSn = 0
)

const (
	SHIFTBUFBBS SHIFTBUFBBS = 0xFFFFFFFF << 0 //+ Shift Buffer
)

const (
	SHIFTBUFBBSn = 0
)

const (
	TIMOD    TIMCTL = 0x03 << 0  //+ Timer Mode
	TIMOD_0  TIMCTL = 0x00 << 0  //  Timer Disabled.
	TIMOD_1  TIMCTL = 0x01 << 0  //  Dual 8-bit counters baud mode.
	TIMOD_2  TIMCTL = 0x02 << 0  //  Dual 8-bit counters PWM high mode.
	TIMOD_3  TIMCTL = 0x03 << 0  //  Single 16-bit counter mode.
	PINPOL   TIMCTL = 0x01 << 7  //+ Timer Pin Polarity
	PINSEL   TIMCTL = 0x0F << 8  //+ Timer Pin Select
	PINCFG   TIMCTL = 0x03 << 16 //+ Timer Pin Configuration
	PINCFG_0 TIMCTL = 0x00 << 16 //  Timer pin output disabled
	PINCFG_1 TIMCTL = 0x01 << 16 //  Timer pin open drain or bidirectional output enable
	PINCFG_2 TIMCTL = 0x02 << 16 //  Timer pin bidirectional output data
	PINCFG_3 TIMCTL = 0x03 << 16 //  Timer pin output
	TRGSRC   TIMCTL = 0x01 << 22 //+ Trigger Source
	TRGPOL   TIMCTL = 0x01 << 23 //+ Trigger Polarity
	TRGSEL   TIMCTL = 0x1F << 24 //+ Trigger Select
)

const (
	TIMODn  = 0
	PINPOLn = 7
	PINSELn = 8
	PINCFGn = 16
	TRGSRCn = 22
	TRGPOLn = 23
	TRGSELn = 24
)

const (
	TSTART   TIMCFG = 0x01 << 1  //+ Timer Start Bit
	TSTOP    TIMCFG = 0x03 << 4  //+ Timer Stop Bit
	TSTOP_0  TIMCFG = 0x00 << 4  //  Stop bit disabled
	TSTOP_1  TIMCFG = 0x01 << 4  //  Stop bit is enabled on timer compare
	TSTOP_2  TIMCFG = 0x02 << 4  //  Stop bit is enabled on timer disable
	TSTOP_3  TIMCFG = 0x03 << 4  //  Stop bit is enabled on timer compare and timer disable
	TIMENA   TIMCFG = 0x07 << 8  //+ Timer Enable
	TIMENA_0 TIMCFG = 0x00 << 8  //  Timer always enabled
	TIMENA_1 TIMCFG = 0x01 << 8  //  Timer enabled on Timer N-1 enable
	TIMENA_2 TIMCFG = 0x02 << 8  //  Timer enabled on Trigger high
	TIMENA_3 TIMCFG = 0x03 << 8  //  Timer enabled on Trigger high and Pin high
	TIMENA_4 TIMCFG = 0x04 << 8  //  Timer enabled on Pin rising edge
	TIMENA_5 TIMCFG = 0x05 << 8  //  Timer enabled on Pin rising edge and Trigger high
	TIMENA_6 TIMCFG = 0x06 << 8  //  Timer enabled on Trigger rising edge
	TIMENA_7 TIMCFG = 0x07 << 8  //  Timer enabled on Trigger rising or falling edge
	TIMDIS   TIMCFG = 0x07 << 12 //+ Timer Disable
	TIMDIS_0 TIMCFG = 0x00 << 12 //  Timer never disabled
	TIMDIS_1 TIMCFG = 0x01 << 12 //  Timer disabled on Timer N-1 disable
	TIMDIS_2 TIMCFG = 0x02 << 12 //  Timer disabled on Timer compare (upper 8-bits match and decrement)
	TIMDIS_3 TIMCFG = 0x03 << 12 //  Timer disabled on Timer compare (upper 8-bits match and decrement) and Trigger Low
	TIMDIS_4 TIMCFG = 0x04 << 12 //  Timer disabled on Pin rising or falling edge
	TIMDIS_5 TIMCFG = 0x05 << 12 //  Timer disabled on Pin rising or falling edge provided Trigger is high
	TIMDIS_6 TIMCFG = 0x06 << 12 //  Timer disabled on Trigger falling edge
	TIMRST   TIMCFG = 0x07 << 16 //+ Timer Reset
	TIMRST_0 TIMCFG = 0x00 << 16 //  Timer never reset
	TIMRST_2 TIMCFG = 0x02 << 16 //  Timer reset on Timer Pin equal to Timer Output
	TIMRST_3 TIMCFG = 0x03 << 16 //  Timer reset on Timer Trigger equal to Timer Output
	TIMRST_4 TIMCFG = 0x04 << 16 //  Timer reset on Timer Pin rising edge
	TIMRST_6 TIMCFG = 0x06 << 16 //  Timer reset on Trigger rising edge
	TIMRST_7 TIMCFG = 0x07 << 16 //  Timer reset on Trigger rising or falling edge
	TIMDEC   TIMCFG = 0x03 << 20 //+ Timer Decrement
	TIMDEC_0 TIMCFG = 0x00 << 20 //  Decrement counter on FlexIO clock, Shift clock equals Timer output.
	TIMDEC_1 TIMCFG = 0x01 << 20 //  Decrement counter on Trigger input (both edges), Shift clock equals Timer output.
	TIMDEC_2 TIMCFG = 0x02 << 20 //  Decrement counter on Pin input (both edges), Shift clock equals Pin input.
	TIMDEC_3 TIMCFG = 0x03 << 20 //  Decrement counter on Trigger input (both edges), Shift clock equals Trigger input.
	TIMOUT   TIMCFG = 0x03 << 24 //+ Timer Output
	TIMOUT_0 TIMCFG = 0x00 << 24 //  Timer output is logic one when enabled and is not affected by timer reset
	TIMOUT_1 TIMCFG = 0x01 << 24 //  Timer output is logic zero when enabled and is not affected by timer reset
	TIMOUT_2 TIMCFG = 0x02 << 24 //  Timer output is logic one when enabled and on timer reset
	TIMOUT_3 TIMCFG = 0x03 << 24 //  Timer output is logic zero when enabled and on timer reset
)

const (
	TSTARTn = 1
	TSTOPn  = 4
	TIMENAn = 8
	TIMDISn = 12
	TIMRSTn = 16
	TIMDECn = 20
	TIMOUTn = 24
)

const (
	CMP TIMCMP = 0xFFFF << 0 //+ Timer Compare Value
)

const (
	CMPn = 0
)

const (
	SHIFTBUFNBS SHIFTBUFNBS = 0xFFFFFFFF << 0 //+ Shift Buffer
)

const (
	SHIFTBUFNBSn = 0
)

const (
	SHIFTBUFHWS SHIFTBUFHWS = 0xFFFFFFFF << 0 //+ Shift Buffer
)

const (
	SHIFTBUFHWSn = 0
)

const (
	SHIFTBUFNIS SHIFTBUFNIS = 0xFFFFFFFF << 0 //+ Shift Buffer
)

const (
	SHIFTBUFNISn = 0
)
