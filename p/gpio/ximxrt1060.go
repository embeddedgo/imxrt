// Code generated by xgen -g; DO NOT EDIT.

//go:build imxrt1060

package gpio

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/imxrt/p/mmap"
)

type Periph struct {
	DR        mmio.R32[uint32]
	GDIR      mmio.R32[uint32]
	PSR       mmio.R32[uint32]
	ICR1      mmio.R32[ICR1]
	ICR2      mmio.R32[ICR2]
	IMR       mmio.R32[uint32]
	ISR       mmio.R32[uint32]
	EDGE_SEL  mmio.R32[uint32]
	_         [25]uint32
	DR_SET    mmio.R32[uint32]
	DR_CLEAR  mmio.R32[uint32]
	DR_TOGGLE mmio.R32[uint32]
}

func GPIO1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIO1_BASE))) }
func GPIO2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIO2_BASE))) }
func GPIO3() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIO3_BASE))) }
func GPIO4() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIO4_BASE))) }
func GPIO5() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIO5_BASE))) }
func GPIO6() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIO6_BASE))) }
func GPIO7() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIO7_BASE))) }
func GPIO8() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIO8_BASE))) }
func GPIO9() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIO9_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type ICR1 uint32

func IC0_(p *Periph) mmio.RM32[ICR1]  { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC0} }
func IC1_(p *Periph) mmio.RM32[ICR1]  { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC1} }
func IC2_(p *Periph) mmio.RM32[ICR1]  { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC2} }
func IC3_(p *Periph) mmio.RM32[ICR1]  { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC3} }
func IC4_(p *Periph) mmio.RM32[ICR1]  { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC4} }
func IC5_(p *Periph) mmio.RM32[ICR1]  { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC5} }
func IC6_(p *Periph) mmio.RM32[ICR1]  { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC6} }
func IC7_(p *Periph) mmio.RM32[ICR1]  { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC7} }
func IC8_(p *Periph) mmio.RM32[ICR1]  { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC8} }
func IC9_(p *Periph) mmio.RM32[ICR1]  { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC9} }
func IC10_(p *Periph) mmio.RM32[ICR1] { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC10} }
func IC11_(p *Periph) mmio.RM32[ICR1] { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC11} }
func IC12_(p *Periph) mmio.RM32[ICR1] { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC12} }
func IC13_(p *Periph) mmio.RM32[ICR1] { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC13} }
func IC14_(p *Periph) mmio.RM32[ICR1] { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC14} }
func IC15_(p *Periph) mmio.RM32[ICR1] { return mmio.RM32[ICR1]{R: &p.ICR1, Mask: IC15} }

type ICR2 uint32

func IC16_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC16} }
func IC17_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC17} }
func IC18_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC18} }
func IC19_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC19} }
func IC20_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC20} }
func IC21_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC21} }
func IC22_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC22} }
func IC23_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC23} }
func IC24_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC24} }
func IC25_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC25} }
func IC26_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC26} }
func IC27_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC27} }
func IC28_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC28} }
func IC29_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC29} }
func IC30_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC30} }
func IC31_(p *Periph) mmio.RM32[ICR2] { return mmio.RM32[ICR2]{R: &p.ICR2, Mask: IC31} }
