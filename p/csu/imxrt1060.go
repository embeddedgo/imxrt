// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build imxrt1060

// Package csu provides access to the registers of the CSU peripheral.
//
// Instances:
//
//	CSU  CSU_BASE  -  CSU*  CSU registers
//
// Registers:
//
//	0x000 32  CSL[32]     Config security level register
//	0x200 32  HP0         HP0 register
//	0x218 32  SA          Secure access register
//	0x358 32  HPCONTROL0  HPCONTROL0 register
//
// Import:
//
//	github.com/embeddedgo/imxrt/p/mmap
package csu

const (
	SUR_S2  CSL = 0x01 << 0  //+ Secure user read access control for the second slave
	SSR_S2  CSL = 0x01 << 1  //+ Secure supervisor read access control for the second slave
	NUR_S2  CSL = 0x01 << 2  //+ Non-secure user read access control for the second slave
	NSR_S2  CSL = 0x01 << 3  //+ Non-secure supervisor read access control for the second slave
	SUW_S2  CSL = 0x01 << 4  //+ Secure user write access control for the second slave
	SSW_S2  CSL = 0x01 << 5  //+ Secure supervisor write access control for the second slave
	NUW_S2  CSL = 0x01 << 6  //+ Non-secure user write access control for the second slave
	NSW_S2  CSL = 0x01 << 7  //+ Non-secure supervisor write access control for the second slave
	LOCK_S2 CSL = 0x01 << 8  //+ The lock bit corresponding to the second slave. It is written by the secure software.
	SUR_S1  CSL = 0x01 << 16 //+ Secure user read access control for the first slave
	SSR_S1  CSL = 0x01 << 17 //+ Secure supervisor read access control for the first slave
	NUR_S1  CSL = 0x01 << 18 //+ Non-secure user read access control for the first slave
	NSR_S1  CSL = 0x01 << 19 //+ Non-secure supervisor read access control for the first slave
	SUW_S1  CSL = 0x01 << 20 //+ Secure user write access control for the first slave
	SSW_S1  CSL = 0x01 << 21 //+ Secure supervisor write access control for the first slave
	NUW_S1  CSL = 0x01 << 22 //+ Non-secure user write access control for the first slave
	NSW_S1  CSL = 0x01 << 23 //+ Non-secure supervisor write access control for the first slave
	LOCK_S1 CSL = 0x01 << 24 //+ The lock bit corresponding to the first slave. It is written by the secure software.
)

const (
	SUR_S2n  = 0
	SSR_S2n  = 1
	NUR_S2n  = 2
	NSR_S2n  = 3
	SUW_S2n  = 4
	SSW_S2n  = 5
	NUW_S2n  = 6
	NSW_S2n  = 7
	LOCK_S2n = 8
	SUR_S1n  = 16
	SSR_S1n  = 17
	NUR_S1n  = 18
	NSR_S1n  = 19
	SUW_S1n  = 20
	SSW_S1n  = 21
	NUW_S1n  = 22
	NSW_S1n  = 23
	LOCK_S1n = 24
)

const (
	HP_DMA    HP0 = 0x01 << 2  //+ Determines whether the register value of the corresponding HP field is passed as the hprot[1] of the eDMA
	L_DMA     HP0 = 0x01 << 3  //+ Lock bit set by the TZ software for the eDMA
	HP_LCDIF  HP0 = 0x01 << 4  //+ Determines whether the register value of the corresponding HP field is passed as the hprot[1] of the LCDIF
	L_LCDIF   HP0 = 0x01 << 5  //+ Lock bit set by the TZ software for the LCDIF
	HP_CSI    HP0 = 0x01 << 6  //+ Determines whether the register value of the corresponding HP field is passed as the hprot[1] of the CSI
	L_CSI     HP0 = 0x01 << 7  //+ Lock bit set by the TZ software for the CSI
	HP_PXP    HP0 = 0x01 << 8  //+ Determines whether the register value of the corresponding HP field is passed as the hprot[1] of the PXP
	L_PXP     HP0 = 0x01 << 9  //+ Lock bit set by the TZ software for the PXP
	HP_DCP    HP0 = 0x01 << 10 //+ Determines whether the register value of the corresponding HP field is passed as the hprot[1] of the DCP
	L_DCP     HP0 = 0x01 << 11 //+ Lock bit set by the TZ software for the DCP
	HP_ENET   HP0 = 0x01 << 14 //+ Determines whether the register value of the corresponding HP field is passed as the hprot[1] of the ENET
	L_ENET    HP0 = 0x01 << 15 //+ Lock bit set by the TZ software for the ENET
	HP_USDHC1 HP0 = 0x01 << 16 //+ Determines whether the register value of the corresponding HP field is passed as the hprot[1] of the USDHC1
	L_USDHC1  HP0 = 0x01 << 17 //+ Lock bit set by the TZ software for the USDHC1
	HP_USDHC2 HP0 = 0x01 << 18 //+ Determines whether the register value of the corresponding HP field is passed as the hprot[1] of the USDHC2
	L_USDHC2  HP0 = 0x01 << 19 //+ Lock bit set by the TZ software for the USDHC2
	HP_TPSMP  HP0 = 0x01 << 20 //+ Determines whether the register value of the corresponding HP field is passed as the hprot[1] of the TPSMP
	L_TPSMP   HP0 = 0x01 << 21 //+ Lock bit set by the TZ software for the TPSMP
	HP_USB    HP0 = 0x01 << 22 //+ Determines whether the register value of the corresponding HP field is passed as the hprot[1] of the USB
	L_USB     HP0 = 0x01 << 23 //+ Lock bit set by the TZ software for the USB
)

const (
	HP_DMAn    = 2
	L_DMAn     = 3
	HP_LCDIFn  = 4
	L_LCDIFn   = 5
	HP_CSIn    = 6
	L_CSIn     = 7
	HP_PXPn    = 8
	L_PXPn     = 9
	HP_DCPn    = 10
	L_DCPn     = 11
	HP_ENETn   = 14
	L_ENETn    = 15
	HP_USDHC1n = 16
	L_USDHC1n  = 17
	HP_USDHC2n = 18
	L_USDHC2n  = 19
	HP_TPSMPn  = 20
	L_TPSMPn   = 21
	HP_USBn    = 22
	L_USBn     = 23
)

const (
	NSA_DMA    SA = 0x01 << 2  //+ Non-secure access policy indicator bit
	L_DMA      SA = 0x01 << 3  //+ Lock bit set by the TZ software for the eDMA
	NSA_LCDIF  SA = 0x01 << 4  //+ Non-secure access policy indicator bit
	L_LCDIF    SA = 0x01 << 5  //+ Lock bit set by the TZ software for the LCDIF
	NSA_CSI    SA = 0x01 << 6  //+ Non-secure access policy indicator bit
	L_CSI      SA = 0x01 << 7  //+ Lock bit set by the TZ software for the CSI
	NSA_PXP    SA = 0x01 << 8  //+ Non-Secure Access Policy indicator bit
	L_PXP      SA = 0x01 << 9  //+ Lock bit set by the TZ software for the PXP
	NSA_DCP    SA = 0x01 << 10 //+ Non-secure access policy indicator bit
	L_DCP      SA = 0x01 << 11 //+ Lock bit set by the TZ software for the DCP
	NSA_ENET   SA = 0x01 << 14 //+ Non-secure access policy indicator bit
	L_ENET     SA = 0x01 << 15 //+ Lock bit set by the TZ software for the ENET1 and ENET2
	NSA_USDHC1 SA = 0x01 << 16 //+ Non-secure access policy indicator bit
	L_USDHC1   SA = 0x01 << 17 //+ Lock bit set by the TZ software for the USDHC1
	NSA_USDHC2 SA = 0x01 << 18 //+ Non-secure access policy indicator bit
	L_USDHC2   SA = 0x01 << 19 //+ Lock bit set by the TZ software for the USDHC2
	NSA_TPSMP  SA = 0x01 << 20 //+ Non-secure access policy indicator bit
	L_TPSMP    SA = 0x01 << 21 //+ Lock bit set by the TZ software for the TPSMP
	NSA_USB    SA = 0x01 << 22 //+ Non-secure access policy indicator bit
	L_USB      SA = 0x01 << 23 //+ Lock bit set by the TZ software for the USB
)

const (
	NSA_DMAn    = 2
	L_DMAn      = 3
	NSA_LCDIFn  = 4
	L_LCDIFn    = 5
	NSA_CSIn    = 6
	L_CSIn      = 7
	NSA_PXPn    = 8
	L_PXPn      = 9
	NSA_DCPn    = 10
	L_DCPn      = 11
	NSA_ENETn   = 14
	L_ENETn     = 15
	NSA_USDHC1n = 16
	L_USDHC1n   = 17
	NSA_USDHC2n = 18
	L_USDHC2n   = 19
	NSA_TPSMPn  = 20
	L_TPSMPn    = 21
	NSA_USBn    = 22
	L_USBn      = 23
)

const (
	HPC_DMA    HPCONTROL0 = 0x01 << 2  //+ Indicates the privilege/user mode for the eDMA
	L_DMA      HPCONTROL0 = 0x01 << 3  //+ Lock bit set by the TZ software for the eDMA
	HPC_LCDIF  HPCONTROL0 = 0x01 << 4  //+ Indicates the privilege/user mode for the LCDIF
	L_LCDIF    HPCONTROL0 = 0x01 << 5  //+ Lock bit set by the TZ software for the LCDIF
	HPC_CSI    HPCONTROL0 = 0x01 << 6  //+ Indicates the privilege/user mode for the CSI
	L_CSI      HPCONTROL0 = 0x01 << 7  //+ Lock bit set by the TZ software for the CSI
	HPC_PXP    HPCONTROL0 = 0x01 << 8  //+ Indicates the privilege/user mode for the PXP
	L_PXP      HPCONTROL0 = 0x01 << 9  //+ Lock bit set by the TZ software for the PXP
	HPC_DCP    HPCONTROL0 = 0x01 << 10 //+ Indicates the privilege/user mode for the DCP
	L_DCP      HPCONTROL0 = 0x01 << 11 //+ Lock bit set by the TZ software for the DCP
	HPC_ENET   HPCONTROL0 = 0x01 << 14 //+ Indicates the privilege/user mode for the ENET
	L_ENET     HPCONTROL0 = 0x01 << 15 //+ Lock bit set by the TZ software for the ENET
	HPC_USDHC1 HPCONTROL0 = 0x01 << 16 //+ Indicates the privilege/user mode for the USDHC1
	L_USDHC1   HPCONTROL0 = 0x01 << 17 //+ Lock bit set by the TZ software for the USDHC1
	HPC_USDHC2 HPCONTROL0 = 0x01 << 18 //+ Indicates the privilege/user mode for the USDHC2
	L_USDHC2   HPCONTROL0 = 0x01 << 19 //+ Lock bit set by the TZ software for the USDHC2.
	HPC_TPSMP  HPCONTROL0 = 0x01 << 20 //+ Indicates the privilege/user mode for the TPSMP
	L_TPSMP    HPCONTROL0 = 0x01 << 21 //+ Lock bit set by the TZ software for the TPSMP.
	HPC_USB    HPCONTROL0 = 0x01 << 22 //+ Indicates the privilege/user mode for the USB
	L_USB      HPCONTROL0 = 0x01 << 23 //+ Lock bit set by the TZ software for the USB.
)

const (
	HPC_DMAn    = 2
	L_DMAn      = 3
	HPC_LCDIFn  = 4
	L_LCDIFn    = 5
	HPC_CSIn    = 6
	L_CSIn      = 7
	HPC_PXPn    = 8
	L_PXPn      = 9
	HPC_DCPn    = 10
	L_DCPn      = 11
	HPC_ENETn   = 14
	L_ENETn     = 15
	HPC_USDHC1n = 16
	L_USDHC1n   = 17
	HPC_USDHC2n = 18
	L_USDHC2n   = 19
	HPC_TPSMPn  = 20
	L_TPSMPn    = 21
	HPC_USBn    = 22
	L_USBn      = 23
)
