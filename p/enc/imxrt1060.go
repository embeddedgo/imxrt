// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build imxrt1060

// Package enc provides access to the registers of the ENC peripheral.
//
// Instances:
//
//	ENC1  ENC1_BASE  -  ENC1*  Quadrature Decoder
//	ENC2  ENC2_BASE  -  ENC2*  Quadrature Decoder
//	ENC3  ENC3_BASE  -  ENC3*  Quadrature Decoder
//	ENC4  ENC4_BASE  -  ENC4*  Quadrature Decoder
//
// Registers:
//
//	0x000 16  CTRL   Control Register
//	0x002 16  FILT   Input Filter Register
//	0x004 16  WTR    Watchdog Timeout Register
//	0x006 16  POSD   Position Difference Counter Register
//	0x008 16  POSDH  Position Difference Hold Register
//	0x00A 16  REV    Revolution Counter Register
//	0x00C 16  REVH   Revolution Hold Register
//	0x00E 16  UPOS   Upper Position Counter Register
//	0x010 16  LPOS   Lower Position Counter Register
//	0x012 16  UPOSH  Upper Position Hold Register
//	0x014 16  LPOSH  Lower Position Hold Register
//	0x016 16  UINIT  Upper Initialization Register
//	0x018 16  LINIT  Lower Initialization Register
//	0x01A 16  IMR    Input Monitor Register
//	0x01C 16  TST    Test Register
//	0x01E 16  CTRL2  Control 2 Register
//	0x020 16  UMOD   Upper Modulus Register
//	0x022 16  LMOD   Lower Modulus Register
//	0x024 16  UCOMP  Upper Position Compare Register
//	0x026 16  LCOMP  Lower Position Compare Register
//
// Import:
//
//	github.com/embeddedgo/imxrt/p/mmap
package enc

const (
	CMPIE  CTRL = 0x01 << 0  //+ Compare Interrupt Enable
	CMPIRQ CTRL = 0x01 << 1  //+ Compare Interrupt Request
	WDE    CTRL = 0x01 << 2  //+ Watchdog Enable
	DIE    CTRL = 0x01 << 3  //+ Watchdog Timeout Interrupt Enable
	DIRQ   CTRL = 0x01 << 4  //+ Watchdog Timeout Interrupt Request
	XNE    CTRL = 0x01 << 5  //+ Use Negative Edge of INDEX Pulse
	XIP    CTRL = 0x01 << 6  //+ INDEX Triggered Initialization of Position Counters UPOS and LPOS
	XIE    CTRL = 0x01 << 7  //+ INDEX Pulse Interrupt Enable
	XIRQ   CTRL = 0x01 << 8  //+ INDEX Pulse Interrupt Request
	PH1    CTRL = 0x01 << 9  //+ Enable Signal Phase Count Mode
	REV    CTRL = 0x01 << 10 //+ Enable Reverse Direction Counting
	SWIP   CTRL = 0x01 << 11 //+ Software Triggered Initialization of Position Counters UPOS and LPOS
	HNE    CTRL = 0x01 << 12 //+ Use Negative Edge of HOME Input
	HIP    CTRL = 0x01 << 13 //+ Enable HOME to Initialize Position Counters UPOS and LPOS
	HIE    CTRL = 0x01 << 14 //+ HOME Interrupt Enable
	HIRQ   CTRL = 0x01 << 15 //+ HOME Signal Transition Interrupt Request
)

const (
	CMPIEn  = 0
	CMPIRQn = 1
	WDEn    = 2
	DIEn    = 3
	DIRQn   = 4
	XNEn    = 5
	XIPn    = 6
	XIEn    = 7
	XIRQn   = 8
	PH1n    = 9
	REVn    = 10
	SWIPn   = 11
	HNEn    = 12
	HIPn    = 13
	HIEn    = 14
	HIRQn   = 15
)

const (
	FILT_PER FILT = 0xFF << 0 //+ Input Filter Sample Period
	FILT_CNT FILT = 0x07 << 8 //+ Input Filter Sample Count
)

const (
	FILT_PERn = 0
	FILT_CNTn = 8
)

const (
	WDOG WTR = 0xFFFF << 0 //+ WDOG[15:0] is a binary representation of the number of clock cycles plus one that the watchdog timer counts before timing out and optionally generating an interrupt
)

const (
	WDOGn = 0
)

const (
	POSD POSD = 0xFFFF << 0 //+ This read/write register contains the position change in value occurring between each read of the position register
)

const (
	POSDn = 0
)

const (
	POSDH POSDH = 0xFFFF << 0 //+ This read-only register contains a snapshot of the value of the POSD register
)

const (
	POSDHn = 0
)

const (
	REV REV = 0xFFFF << 0 //+ This read/write register contains the current value of the revolution counter.
)

const (
	REVn = 0
)

const (
	REVH REVH = 0xFFFF << 0 //+ This read-only register contains a snapshot of the value of the REV register.
)

const (
	REVHn = 0
)

const (
	POS UPOS = 0xFFFF << 0 //+ This read/write register contains the upper (most significant) half of the position counter
)

const (
	POSn = 0
)

const (
	POS LPOS = 0xFFFF << 0 //+ This read/write register contains the lower (least significant) half of the position counter
)

const (
	POSn = 0
)

const (
	POSH UPOSH = 0xFFFF << 0 //+ This read-only register contains a snapshot of the UPOS register.
)

const (
	POSHn = 0
)

const (
	POSH LPOSH = 0xFFFF << 0 //+ This read-only register contains a snapshot of the LPOS register.
)

const (
	POSHn = 0
)

const (
	INIT UINIT = 0xFFFF << 0 //+ This read/write register contains the value to be used to initialize the upper half of the position counter (UPOS)
)

const (
	INITn = 0
)

const (
	INIT LINIT = 0xFFFF << 0 //+ This read/write register contains the value to be used to initialize the lower half of the position counter (LPOS)
)

const (
	INITn = 0
)

const (
	HOME  IMR = 0x01 << 0 //+ This is the raw HOME input.
	INDEX IMR = 0x01 << 1 //+ This is the raw INDEX input.
	PHB   IMR = 0x01 << 2 //+ This is the raw PHASEB input.
	PHA   IMR = 0x01 << 3 //+ This is the raw PHASEA input.
	FHOM  IMR = 0x01 << 4 //+ This is the filtered version of HOME input.
	FIND  IMR = 0x01 << 5 //+ This is the filtered version of INDEX input.
	FPHB  IMR = 0x01 << 6 //+ This is the filtered version of PHASEB input.
	FPHA  IMR = 0x01 << 7 //+ This is the filtered version of PHASEA input.
)

const (
	HOMEn  = 0
	INDEXn = 1
	PHBn   = 2
	PHAn   = 3
	FHOMn  = 4
	FINDn  = 5
	FPHBn  = 6
	FPHAn  = 7
)

const (
	TEST_COUNT  TST = 0xFF << 0  //+ These bits hold the number of quadrature advances to generate.
	TEST_PERIOD TST = 0x1F << 8  //+ These bits hold the period of quadrature phase in IPBus clock cycles.
	QDN         TST = 0x01 << 13 //+ Quadrature Decoder Negative Signal
	TCE         TST = 0x01 << 14 //+ Test Counter Enable
	TEN         TST = 0x01 << 15 //+ Test Mode Enable
)

const (
	TEST_COUNTn  = 0
	TEST_PERIODn = 8
	QDNn         = 13
	TCEn         = 14
	TENn         = 15
)

const (
	UPDHLD CTRL2 = 0x01 << 0  //+ Update Hold Registers
	UPDPOS CTRL2 = 0x01 << 1  //+ Update Position Registers
	MOD    CTRL2 = 0x01 << 2  //+ Enable Modulo Counting
	DIR    CTRL2 = 0x01 << 3  //+ Count Direction Flag
	RUIE   CTRL2 = 0x01 << 4  //+ Roll-under Interrupt Enable
	RUIRQ  CTRL2 = 0x01 << 5  //+ Roll-under Interrupt Request
	ROIE   CTRL2 = 0x01 << 6  //+ Roll-over Interrupt Enable
	ROIRQ  CTRL2 = 0x01 << 7  //+ Roll-over Interrupt Request
	REVMOD CTRL2 = 0x01 << 8  //+ Revolution Counter Modulus Enable
	OUTCTL CTRL2 = 0x01 << 9  //+ Output Control
	SABIE  CTRL2 = 0x01 << 10 //+ Simultaneous PHASEA and PHASEB Change Interrupt Enable
	SABIRQ CTRL2 = 0x01 << 11 //+ Simultaneous PHASEA and PHASEB Change Interrupt Request
)

const (
	UPDHLDn = 0
	UPDPOSn = 1
	MODn    = 2
	DIRn    = 3
	RUIEn   = 4
	RUIRQn  = 5
	ROIEn   = 6
	ROIRQn  = 7
	REVMODn = 8
	OUTCTLn = 9
	SABIEn  = 10
	SABIRQn = 11
)

const (
	MOD UMOD = 0xFFFF << 0 //+ This read/write register contains the upper (most significant) half of the modulus register
)

const (
	MODn = 0
)

const (
	MOD LMOD = 0xFFFF << 0 //+ This read/write register contains the lower (least significant) half of the modulus register
)

const (
	MODn = 0
)

const (
	COMP UCOMP = 0xFFFF << 0 //+ This read/write register contains the upper (most significant) half of the position compare register
)

const (
	COMPn = 0
)

const (
	COMP LCOMP = 0xFFFF << 0 //+ This read/write register contains the lower (least significant) half of the position compare register
)

const (
	COMPn = 0
)
